,Owner,Repo Name,Filename,Commit Message
SHA:  352f8efd88a139b390ae0ac944e061c5bb33b444,deepchem,deepchem,deepchem/utils/dft_utils/__init__.py,"Dft Part 5 (#3895)

* ks.py and scf_qccalc.py

* spin param update and docs

* hf and libxc

* remove ks

* remove hf

* formatting

* minor 3.8 yapf fix

* remove update

* minor fix - remove it due to having bad support for decorators in docs

* hf

* init

* env fixes

* minor env fix

* docs improvement

* added test for HFEngine

* minor fixes

* docs

* citation and more docs

* python 3.8 error fix"
SHA:  352f8efd88a139b390ae0ac944e061c5bb33b444,deepchem,deepchem,deepchem/utils/dft_utils/qccalc/hf.py,"Dft Part 5 (#3895)

* ks.py and scf_qccalc.py

* spin param update and docs

* hf and libxc

* remove ks

* remove hf

* formatting

* minor 3.8 yapf fix

* remove update

* minor fix - remove it due to having bad support for decorators in docs

* hf

* init

* env fixes

* minor env fix

* docs improvement

* added test for HFEngine

* minor fixes

* docs

* citation and more docs

* python 3.8 error fix"
SHA:  352f8efd88a139b390ae0ac944e061c5bb33b444,deepchem,deepchem,docs/source/api_reference/utils.rst,"Dft Part 5 (#3895)

* ks.py and scf_qccalc.py

* spin param update and docs

* hf and libxc

* remove ks

* remove hf

* formatting

* minor 3.8 yapf fix

* remove update

* minor fix - remove it due to having bad support for decorators in docs

* hf

* init

* env fixes

* minor env fix

* docs improvement

* added test for HFEngine

* minor fixes

* docs

* citation and more docs

* python 3.8 error fix"
SHA:  554e661ee62ba6db1cfcbef0fabd98a1659a1641,Qiskit,qiskit,releasenotes/notes/storage-var-a00a33fcf9a71f3f.yaml,"Add release notes for manual `Var` and `Store` (#12421)

* Add release notes for manual `Var` and `Store`

This adds the release notes and updates some small portions of
documentation that were previously missed surrounding the new manual
`Var` storage locations.

This includes documenting all new keyword arguments to methods, upgrade
instructions for providers, and adding the `Var.new` method to the
documentation, which was previously erroneously omitted.

* Fix Sphinx typo

* Fix another Sphinx typo

* Move QPY version bump to upgrade

* Unify base release note

* Reword providers upgrade note

Co-authored-by: Matthew Treinish <mtreinish@kortar.org>

---------

Co-authored-by: Matthew Treinish <mtreinish@kortar.org>"
SHA:  96607f6b2068594f216928b954db0f516e1466ee,Qiskit,qiskit,qiskit/qobj/converters/pulse_instruction.py,"Avoid lossing precision when scaling frequencies (#12392)

* Avoid lossing precision when scaling frequencies

Classes in pulse_instruction.py scale frequency values to GHz by
multipliying `ParameterExpression` with float 1e9. This can lead
to numerical errors on some systems using symengine. Instead, this
scaling can be done multiplying by integer 10**9.

See: https://github.com/Qiskit/qiskit/issues/12359#issuecomment-2104426621

* Add release note

---------

Co-authored-by: Jake Lishman <jake.lishman@ibm.com>"
SHA:  07c8f20481813493eae80164731794fccdc1de3d,Qiskit,qiskit,qiskit/transpiler/passes/basis/basis_translator.py,Fix two cross-references in `BasisTranslator` docstring (#12398)
SHA:  cea93a051671b4c56945e916a70d22c2f5d488d8,Qiskit,qiskit,qiskit/quantum_info/operators/symplectic/sparse_pauli_op.py,"Fix a corner case of `SparsePauliOp.apply_layout` (#12375)

* fix a corner case of `SparsePauliOp.apply_layout`

* Add zero-qubit tests of Pauli.apply_layout

* use combine and apply isort

* Update releasenotes/notes/fix-sparse-pauli-op-apply-layout-zero-43b9e70f0d1536a6.yaml

---------

Co-authored-by: Matthew Treinish <mtreinish@kortar.org>"
SHA:  cea93a051671b4c56945e916a70d22c2f5d488d8,Qiskit,qiskit,releasenotes/notes/fix-sparse-pauli-op-apply-layout-zero-43b9e70f0d1536a6.yaml,"Fix a corner case of `SparsePauliOp.apply_layout` (#12375)

* fix a corner case of `SparsePauliOp.apply_layout`

* Add zero-qubit tests of Pauli.apply_layout

* use combine and apply isort

* Update releasenotes/notes/fix-sparse-pauli-op-apply-layout-zero-43b9e70f0d1536a6.yaml

---------

Co-authored-by: Matthew Treinish <mtreinish@kortar.org>"
SHA:  cea93a051671b4c56945e916a70d22c2f5d488d8,Qiskit,qiskit,test/python/quantum_info/operators/symplectic/test_pauli.py,"Fix a corner case of `SparsePauliOp.apply_layout` (#12375)

* fix a corner case of `SparsePauliOp.apply_layout`

* Add zero-qubit tests of Pauli.apply_layout

* use combine and apply isort

* Update releasenotes/notes/fix-sparse-pauli-op-apply-layout-zero-43b9e70f0d1536a6.yaml

---------

Co-authored-by: Matthew Treinish <mtreinish@kortar.org>"
SHA:  cea93a051671b4c56945e916a70d22c2f5d488d8,Qiskit,qiskit,test/python/quantum_info/operators/symplectic/test_sparse_pauli_op.py,"Fix a corner case of `SparsePauliOp.apply_layout` (#12375)

* fix a corner case of `SparsePauliOp.apply_layout`

* Add zero-qubit tests of Pauli.apply_layout

* use combine and apply isort

* Update releasenotes/notes/fix-sparse-pauli-op-apply-layout-zero-43b9e70f0d1536a6.yaml

---------

Co-authored-by: Matthew Treinish <mtreinish@kortar.org>"
SHA:  58a383d02a060d85da13b00fd9483da1e4f8139f,Qiskit,qiskit,test/python/circuit/test_compose.py,"Fix `QuantumCircuit.compose` with `Index` exprs (#12396)

This was an oversight in d6c74c265 (gh-12310), where an `ExprVisitor`
was missed in the testing."
SHA:  8985b24c6b8f1886a681731cd8bf74b8202bfff7,Qiskit,qiskit,crates/circuit/src/lib.rs,"[DAGCircuit Oxidation] Port `DAGNode` to Rust (#12380)

* Checkpoint before rebase.

* [Tests passing] Port DAGNode classes to Rust.

Also has beginnings of DAGCircuit, but this is not
complete or wired up at all.

* Revert DAGCircuit stuff.

* Fix lint.

* Address review comments.

* Python lint + format

* Fix format

* Remove unnecessary state methods from CircuitInstruction pickling."
SHA:  8985b24c6b8f1886a681731cd8bf74b8202bfff7,Qiskit,qiskit,qiskit/dagcircuit/dagnode.py,"[DAGCircuit Oxidation] Port `DAGNode` to Rust (#12380)

* Checkpoint before rebase.

* [Tests passing] Port DAGNode classes to Rust.

Also has beginnings of DAGCircuit, but this is not
complete or wired up at all.

* Revert DAGCircuit stuff.

* Fix lint.

* Address review comments.

* Python lint + format

* Fix format

* Remove unnecessary state methods from CircuitInstruction pickling."
SHA:  fe275a0f15132073c6b5afb0c4be8bcc351479cb,Qiskit,qiskit,qiskit/quantum_info/operators/symplectic/sparse_pauli_op.py,"Fix {Pauli,SparsePauliOp}.apply_layout to raise an error with negative or duplicate indices (#12385)

* fix apply_layout to raise an error with negative or duplicate indices

* reno

* Fix Sphinx syntax

* Fix my own Sphinx lookup problem

---------

Co-authored-by: Jake Lishman <jake@binhbar.com>"
SHA:  fe275a0f15132073c6b5afb0c4be8bcc351479cb,Qiskit,qiskit,releasenotes/notes/fix-apply-layout-duplicate-negative-indices-cf5517921fe52706.yaml,"Fix {Pauli,SparsePauliOp}.apply_layout to raise an error with negative or duplicate indices (#12385)

* fix apply_layout to raise an error with negative or duplicate indices

* reno

* Fix Sphinx syntax

* Fix my own Sphinx lookup problem

---------

Co-authored-by: Jake Lishman <jake@binhbar.com>"
SHA:  fe275a0f15132073c6b5afb0c4be8bcc351479cb,Qiskit,qiskit,test/python/quantum_info/operators/symplectic/test_pauli.py,"Fix {Pauli,SparsePauliOp}.apply_layout to raise an error with negative or duplicate indices (#12385)

* fix apply_layout to raise an error with negative or duplicate indices

* reno

* Fix Sphinx syntax

* Fix my own Sphinx lookup problem

---------

Co-authored-by: Jake Lishman <jake@binhbar.com>"
SHA:  b80885d1d617bd96ab5314db1b50d959258c2f93,Qiskit,qiskit,qiskit/transpiler/passes/routing/commuting_2q_gate_routing/commuting_2q_gate_router.py,"Fix missing layout in `Commuting2qGateRouter` (#12137)

* Add layout to property set, add test

* Apply comments from code review

* Add virtual permutation instead of final layout. Test"
SHA:  b80885d1d617bd96ab5314db1b50d959258c2f93,Qiskit,qiskit,releasenotes/notes/fix-swap-router-layout-f28cf0a2de7976a8.yaml,"Fix missing layout in `Commuting2qGateRouter` (#12137)

* Add layout to property set, add test

* Apply comments from code review

* Add virtual permutation instead of final layout. Test"
SHA:  b80885d1d617bd96ab5314db1b50d959258c2f93,Qiskit,qiskit,test/python/transpiler/test_swap_strategy_router.py,"Fix missing layout in `Commuting2qGateRouter` (#12137)

* Add layout to property set, add test

* Apply comments from code review

* Add virtual permutation instead of final layout. Test"
SHA:  24f1436fdb5d4061fde3a6fab6dd5139556f7e10,Qiskit,qiskit,releasenotes/notes/plot-circuit-layout-5935646107893c12.yaml,"fix edge coloring bug in plot_coupling_map (#12369)

* fix edge coloring bug in plot circuit layout

* add release note"
SHA:  87c14cb2bf9cfd9ae12985de994b6c3a31edfa61,Qiskit,qiskit,qiskit/quantum_info/states/stabilizerstate.py,"Add new method for single bitstring target when measuring stabilizerstate probabilities_dict (#12147)

* added new method, deterministic helper unction

added new method probabilities_dict_from_bitstrings, moved logic from probabilities_dict to probabilities_dict_from_bitstrings with ability to pass target, probabilities_dict will pass a target of None.

* Adding test timing, fixed algorithm for determining if should get probability for qubit

Added some timing of the tests to determine if the version with a specfic target runs faster then the non-targetted version (which must calculate all 2^n possibilities for stabilizer state test_probablities_dict_single_qubit. When given a target it can skip branches that were not wanting to be calculated

* Adding more tests, fixing deterministic issues with bad target

* Prob of targets with 0.0 probability

* target calc changes

* Simpler way to get all targets

* Need to improve performance with multiple targets

* Simplified the probabilities_dict_from_bitstrings method

simplified the method probabilities_dict_from_bitstrings, less checking was needed, simpler handling of no target value passed in

* Adding tests for targets

* Added tests to test_probablities_dict_qubits

* Add performance boost check when using targets for test_probablities_dict_qubits

* Added Caching to prevent duplicate branch calculations

In stabilizerstate, added the ability to cache previously calculated branches so they do not get recalculated when attempting to get target values, gives a better starting point to calculate from instead of starting from an unknown probability value of 1.0

* improve performance by performing expensive operations only when needed

when creating an array for the outcome in probability, it is only built if the cache key is not found

* Optimization for caching, deterministic calcs for branches, enabling/disabling cache

added more optimization for performance when performing calculations for branches using caching and targets, it will now also store the deterministic node values which gives a very slight performance increase, migrated to most efficient ways to store and retrieve cache values. The performance increase when using a large amount of qubits is huge, when using a very small amount of qubits the very slight over head of caching makes it about the same. Increasing test coverage for using targets with probabilities

* improved tests, checking of caching vs not caching

implemented more accurate tests that verify probability caching

* added more tests and variations for stabilizerstate

* Corrected deterministic probability calculations

* Fixed bug with cache in wrong place for some calculations

for some calculations the cached results were in the wrong place which could cause false results for certain test cases with 3+ qubits

* added more test cases

* Probabilities update for moved method call

* Added test for random test_probs_random_subsystem

* fixed single probabilities tests lost in previous merge

* Removed caching of deterministic values

overhead was too high compared to calculating

* Fixed failing test with test_probs_random_subsystem

Fixed failing test that would randomly occur, the stabilizer state was not being cached as well, which would sometimes produce a failure. After caching the object to restore when calculating starting at a node down the branch, this failure no longer occurs. Need to optimize and clean up the code a bit, but functioning

* Adding tests back that were not test_probs_random_subsystem, removed to test

* Created ProbabilityCache object for dealing with caching

* Finished adding ProbabilityCache object and commenting

* Added more documentation for stabilizer state

* Fixing style with tox -eblack

* commenting fixes in stabilizerstate

* Added release note

* Updated release notes

* added __future__ to probabilitiescache, removed unused import stabilizerstate

* run tox -eblack to correct probabilitiescache

* Corrected lint issues in multiple classes

fixed lint issues in test_probabilitiycache, test_stabilizerstate, stabilizerstate, and probabilitycache

* fixed more pylint lint issues

pylint -rn qiskit test tools
Corrected in probabilitycache, stabilizerstate, test_probabilitycach, test_stabilizerstate

* fixed more lint issues

fixed with:
tox -eblack

verified with:
black --check qiskit test tools examples setup.py
pylint -rn qiskit test tools
tox -elint

* added a bit more variance allowance for performance tests

renamed test_probabilitycache.py file to correct spelling
added a bit more performance_varability_percent percent time allowed from 0.001 to 0.005

* Corrected Lint issues, added test for probabilitycache

added test_probabilitycache test, fixed lint issues and type issues in stabilizerstate, test_stabilizerstate

* Fixed remaining import ordering issue

* readded ddt decorator for test_probabilitycache

* Changed to using process_time_ns from monotonic for performance measuring

* Added output when performance times fail to aid in debugging in test_stabilizerstate

* moved performance end time out of same method to calculate times

* changed method name in test_stabilizerstate

changed probability_percent_of_calculated_branches to _probability_percent_of_calculated_branches

* Added GC disabling between timed tests

* Attempting using perf_counter_ns instead of process_time_ns

* Updated commenting, moved 'X' outcome check

moved 'X' in outcome out of the for loop for StabilizerState._get_probabilities to help performance

* more comment updating

* Changed performance timer based on OS type

* Changing to time.thread_time_ns(), and raising performance varabilitiy by 0.005

using time.thread_time_ns() for benchmarking instead of time.perf_counter_ns() and time.process_time_ns() based on the OS in test_stabilizerstate. It seems that time is being counted that shouldn't be with the other methods that causes false reports of the work taking longer then it does. Raising the performance_varability_percent in test_stablilizerstate by 0.005 to 0.01 for more headroom for performance checking

* changing time.thread_time() vs time.thread_time_ns() to see if compatible with windows

also added one more target for test_4 to differentiate no caching against caching in test_stabilizerstate

* Changing performance timer based on OS for test_stablizerstate

perf_counter_ns for win32 and thread_time for all other OS

* fixed small issue in probabilitycache, improved probabilitycache test

fixed issue when checking the cache key that was not operating correctly, internally the key is always a str, but when a list[str] was passed in the check was not correct, so changed to check if an instance of a list, and will join the outcome val to a str for the internal cache key. Improved the probabilitycache to test having alternating keys of str and list[str] to test this internal key checking

* Added correct type hinting to probabilitycache

* removed typing hint module

removed the use of typing module for type hinting, looks like python wants to get away from using this module for type hinting, also fixed some commenting issues in stabilizerstate, test_probabilitycache, test_stabilizerstate, and probabilitycache files

* Fix test pylint failure of Value 'list' is unsubscriptable (unsubscriptable-object)

fixing tests failing with pylint when lint checking is performed. This worked locally and wasn't failing, but when it runs in the CI/CD process it fails, so adding from __future__ import annotations to avoid this failure for test_probabilitycache and test_stabilizerstate as new tests include type hinting

* Fix small comment error in test, Added use_caching to tests, simplified cache calls

Fixed a small error in my commenting for the test_stabilizerstate.py and forced use_caching parm in the call of probabilities_dict_from_bitstrings in the tests, even tho it is used as default, to make sure it is clear in the tests. Simplfied the adding values to Probabilitycache, and simplified the code in StabilizerState._get_probabilities() setting values in cache and retrieving the state when using cache, made cache_key in probabilitycache ""private"" and changed method to _cache_key

* Significant code refactoring in StabiizerState

Significant code refactoring in stabilizerstate. I was able to condense the use the cache to a smaller area in the _get_probabilities helper method so it is easier to work with and more clear. I removed methods I created that were single use helper methods that were able to be condensed down into simpler code such as _branches_to_measure, _retrieve_deterministic_probability, _branches_to_measure, _is_qubit_deterministic. Since these are 1 time use methods it didn't make sense to keep them around. The _get_probabilities helper method is much simpler and clearer, closer to the original with less tweaks and functioning with the same performance, and more clarity.  Most of the code changed at this point is adding tests, most of this commit was removing unnecessary code and refactoring

* Fixed stabilizerstate cache key outcome not found

there was a check to make sure a key could be found before that was removed in the refactoring, once and awhile you get a target that can't be found in the cache because of the algorithm of looking for a key by increasing the number of X from the left to the right. There are situations where the X would be in the middle such as 0X1 that won't be found. The algorithm in the probability cache could be changed to use BST which would very rarely help performance, the fix is to make sure a key can be found and then only use the cache if that is the case

* Moved all caching retrieval outside of _get_probabilities for performance

there is a slight overhead when recursively iterating through the _get_probabilities helper when having to check if caching should be retrieved. Realistically when you use caching it is just to get you a better starting point, so it only needs to be retrieved once. The cache inserting remains in the _get_probabilities helper to build up the cache, but the logic was significantly simplified in the _get_probabilities helper, and now only a 1 time cache retrieval is performed for each target via the probabilities_dict_from_bitstrings method

* Simplified Bitstring method for probability cache, removed unnecessary classes

Removed Probabilitycache class, test_probabilitiycache.py. Simplified test_stabilizerstate.py for new bitstring probability testing methods. changed method probabilities_dict_from_bitstrings to probabilities_dict_from_bitstring, and simplified by removing cache, and only allowing a single string value to be passed in

* Commenting update for _probabilities_bitstring_verify

updating the commenting for _probabilities_bitstring_verify, move to top of file

* black lint formatter ran

* Uncomment out line causing circular import

when running locally I get a circular import for two_qubit_decompose.py on line 154 ""_specializations = two_qubit_decompose.Specialization"", I need to comment out to test locally, but did not mean to commit this.

Simplified the stablizierstate self._get_probabilities method but removing an unnecessary check

* Remove type hints from test_stabilizerstate

* Updated test_stabilizerstate, removed helper test method, new release note

update the tests in test_stabilizerstate to no longer use a helper method for checking all the bitstring measurements in. Created a _get_probabilities_dict helper method in stabilizer state to be used for the probabilities_dict and probabilities_dict_with_bitstring methods. This was needed so that they could share the logic of the measurements, but also so that you could enforce in the probabilities_dict_with_bitstring method that outcome_bitstring must be provided. Previouslly this was optional and the user could avoid passing in a value, but this would essentially make it function the same as probabilities_dict. Now with the helper it enforces they must provide a bitstring

* Added large qubit test with h gates, reorder imports for test_stabilizerstate

added new test method test_probabilities_dict_large_num_qubits with large amount of qubit tests using an outcome bitstring target, num_qubits=[25, 50, 100, 200, 300, 400, 500, 600, 750], normally get any results for 750 qubits would require ~5.922387e+225 full bitstring calculations, but if you want one target bitstring you can perform ~750 measurements for a single probability for one result and get the value quickly

* moved methods out of loop that are unnecessary in test_stabilizerstate

moded target dict calculation out of loop that is not necessary to recalculate through each sample loop calculation

* broke out medium hgate test to own test method, issue with assertTrue type in test

testing a variety of hgates that also do the full probabilities_dict calculations up to 9 qubits called test_probabilities_dict_hgate_medium_num_qubits, also changed a assertTrue typo to assertDictEqual in the test_probabilities_dict_large_num_qubits method

* fixed commenting in stabilizerstate, removed unnecessary outcome_bitstring array access syntax

fixed some commenting for probabilities_dict_from_bitstring, and removed unnecessary syntax for accessing the array, was outcome_bitstring[i : i + 1] now outcome_bitstring[i] in _get_probabilities

* Condensed tests in test_stabilizerstate, added helper test class, more test coverage

added class StabilizerStateTestingTools in file test_stabilizerstate, these methods needed to be moved outside of the TestStabilizerState class because they are also needed in the TestStabilizerStateExpectationValue class within the file. It did not make sense to put these helper methods in the QiskitTestCase class, or the BaseQiskitTestCase class as these helpers are specific to helping test a new method in the stabilizerstate class.

I condensed redudnant code for checking the individual bitstrings into helper method _verify_individual_bitstrings which takes a target dict, uses each entry in the dict to attempt to get the single probability, and verify each, which drastically raises the test coverage of this new method probabilities_dict_from_bitstring.

added helper method StabilizerStateTestingTools._bitstring_product which builds a dict of the product of 0, 1 for a lenth passed in, used in several test cases for testing the zero probabilities.

In the test cases you will also notice cases where I update the target dict target.update(StabilizerStateTestingTools._bitstring_product( num_qubits, target)), which builds the rest of the bitstring values that will have a 0 probability, which is then passed into the _verify_individual_bitstrings method to verify they get the correct 0 value

I reduced the number of qubits for the test_probabilities_dict_hgate_large_num_qubits from tests of num_qubits=[25, 50, 100, 200, 300, 400, 500, 600, 750] to num_qubits=[25, 50, 100, 200] due to memory issues on windows, and the largest use case I have received so far is 100 qubits, so going above that by 2x

Overall test coverage should be dramatically increased now testing for 0 probabilities, checking every bitstring individually has a probability, and simplifying the code, removing a lot of repetative logic, moved to the helper methods

* Fixed isues in release notes

https://github.com/Qiskit/qiskit/pull/12147#discussion_r1578906579

https://github.com/Qiskit/qiskit/pull/12147#discussion_r1578907028

* Corrected Targetted to targeted in stablizerstate

* Updated commenting about target

https://github.com/Qiskit/qiskit/pull/12147#discussion_r1579358105

https://github.com/Qiskit/qiskit/pull/12147#discussion_r1579356207

* Moved helper function _get_probabilities_dict

moved the helper function _get_probabilities_dict to the helper function area next to _get_probabilities

https://github.com/Qiskit/qiskit/pull/12147#discussion_r1579365690

* differentiated description for probabilities

https://github.com/Qiskit/qiskit/pull/12147#discussion_r1579193692

* Added test to test_stabilizerstate

added a test that does not have all equal probabilities and is not a GHZ state

https://github.com/Qiskit/qiskit/pull/12147#discussion_r1579395521

* combined 2 test methods

combine the large and medium tests into one due to taking too long to run the tests and lowered the amount of qubits

* removed unnecessary test

removed redundant test in test_probabilities_dict_medium_num_qubits, as this was combined with the large test

* fixed lint issues, renamed test method

renamed test_probabilities_dict_medium_num_qubits in test_stabilizerstate to test_probabilities_dict_from_bitstring

* fixed type for targetting in stabilizerstate

typo for description for word targetting, changed to targeting

---------

Co-authored-by: Shelly Garion <46566946+ShellyGarion@users.noreply.github.com>"
SHA:  87c14cb2bf9cfd9ae12985de994b6c3a31edfa61,Qiskit,qiskit,releasenotes/notes/outcome_bitstring_target_for_probabilities_dict-e53f524d115bbcfc.yaml,"Add new method for single bitstring target when measuring stabilizerstate probabilities_dict (#12147)

* added new method, deterministic helper unction

added new method probabilities_dict_from_bitstrings, moved logic from probabilities_dict to probabilities_dict_from_bitstrings with ability to pass target, probabilities_dict will pass a target of None.

* Adding test timing, fixed algorithm for determining if should get probability for qubit

Added some timing of the tests to determine if the version with a specfic target runs faster then the non-targetted version (which must calculate all 2^n possibilities for stabilizer state test_probablities_dict_single_qubit. When given a target it can skip branches that were not wanting to be calculated

* Adding more tests, fixing deterministic issues with bad target

* Prob of targets with 0.0 probability

* target calc changes

* Simpler way to get all targets

* Need to improve performance with multiple targets

* Simplified the probabilities_dict_from_bitstrings method

simplified the method probabilities_dict_from_bitstrings, less checking was needed, simpler handling of no target value passed in

* Adding tests for targets

* Added tests to test_probablities_dict_qubits

* Add performance boost check when using targets for test_probablities_dict_qubits

* Added Caching to prevent duplicate branch calculations

In stabilizerstate, added the ability to cache previously calculated branches so they do not get recalculated when attempting to get target values, gives a better starting point to calculate from instead of starting from an unknown probability value of 1.0

* improve performance by performing expensive operations only when needed

when creating an array for the outcome in probability, it is only built if the cache key is not found

* Optimization for caching, deterministic calcs for branches, enabling/disabling cache

added more optimization for performance when performing calculations for branches using caching and targets, it will now also store the deterministic node values which gives a very slight performance increase, migrated to most efficient ways to store and retrieve cache values. The performance increase when using a large amount of qubits is huge, when using a very small amount of qubits the very slight over head of caching makes it about the same. Increasing test coverage for using targets with probabilities

* improved tests, checking of caching vs not caching

implemented more accurate tests that verify probability caching

* added more tests and variations for stabilizerstate

* Corrected deterministic probability calculations

* Fixed bug with cache in wrong place for some calculations

for some calculations the cached results were in the wrong place which could cause false results for certain test cases with 3+ qubits

* added more test cases

* Probabilities update for moved method call

* Added test for random test_probs_random_subsystem

* fixed single probabilities tests lost in previous merge

* Removed caching of deterministic values

overhead was too high compared to calculating

* Fixed failing test with test_probs_random_subsystem

Fixed failing test that would randomly occur, the stabilizer state was not being cached as well, which would sometimes produce a failure. After caching the object to restore when calculating starting at a node down the branch, this failure no longer occurs. Need to optimize and clean up the code a bit, but functioning

* Adding tests back that were not test_probs_random_subsystem, removed to test

* Created ProbabilityCache object for dealing with caching

* Finished adding ProbabilityCache object and commenting

* Added more documentation for stabilizer state

* Fixing style with tox -eblack

* commenting fixes in stabilizerstate

* Added release note

* Updated release notes

* added __future__ to probabilitiescache, removed unused import stabilizerstate

* run tox -eblack to correct probabilitiescache

* Corrected lint issues in multiple classes

fixed lint issues in test_probabilitiycache, test_stabilizerstate, stabilizerstate, and probabilitycache

* fixed more pylint lint issues

pylint -rn qiskit test tools
Corrected in probabilitycache, stabilizerstate, test_probabilitycach, test_stabilizerstate

* fixed more lint issues

fixed with:
tox -eblack

verified with:
black --check qiskit test tools examples setup.py
pylint -rn qiskit test tools
tox -elint

* added a bit more variance allowance for performance tests

renamed test_probabilitycache.py file to correct spelling
added a bit more performance_varability_percent percent time allowed from 0.001 to 0.005

* Corrected Lint issues, added test for probabilitycache

added test_probabilitycache test, fixed lint issues and type issues in stabilizerstate, test_stabilizerstate

* Fixed remaining import ordering issue

* readded ddt decorator for test_probabilitycache

* Changed to using process_time_ns from monotonic for performance measuring

* Added output when performance times fail to aid in debugging in test_stabilizerstate

* moved performance end time out of same method to calculate times

* changed method name in test_stabilizerstate

changed probability_percent_of_calculated_branches to _probability_percent_of_calculated_branches

* Added GC disabling between timed tests

* Attempting using perf_counter_ns instead of process_time_ns

* Updated commenting, moved 'X' outcome check

moved 'X' in outcome out of the for loop for StabilizerState._get_probabilities to help performance

* more comment updating

* Changed performance timer based on OS type

* Changing to time.thread_time_ns(), and raising performance varabilitiy by 0.005

using time.thread_time_ns() for benchmarking instead of time.perf_counter_ns() and time.process_time_ns() based on the OS in test_stabilizerstate. It seems that time is being counted that shouldn't be with the other methods that causes false reports of the work taking longer then it does. Raising the performance_varability_percent in test_stablilizerstate by 0.005 to 0.01 for more headroom for performance checking

* changing time.thread_time() vs time.thread_time_ns() to see if compatible with windows

also added one more target for test_4 to differentiate no caching against caching in test_stabilizerstate

* Changing performance timer based on OS for test_stablizerstate

perf_counter_ns for win32 and thread_time for all other OS

* fixed small issue in probabilitycache, improved probabilitycache test

fixed issue when checking the cache key that was not operating correctly, internally the key is always a str, but when a list[str] was passed in the check was not correct, so changed to check if an instance of a list, and will join the outcome val to a str for the internal cache key. Improved the probabilitycache to test having alternating keys of str and list[str] to test this internal key checking

* Added correct type hinting to probabilitycache

* removed typing hint module

removed the use of typing module for type hinting, looks like python wants to get away from using this module for type hinting, also fixed some commenting issues in stabilizerstate, test_probabilitycache, test_stabilizerstate, and probabilitycache files

* Fix test pylint failure of Value 'list' is unsubscriptable (unsubscriptable-object)

fixing tests failing with pylint when lint checking is performed. This worked locally and wasn't failing, but when it runs in the CI/CD process it fails, so adding from __future__ import annotations to avoid this failure for test_probabilitycache and test_stabilizerstate as new tests include type hinting

* Fix small comment error in test, Added use_caching to tests, simplified cache calls

Fixed a small error in my commenting for the test_stabilizerstate.py and forced use_caching parm in the call of probabilities_dict_from_bitstrings in the tests, even tho it is used as default, to make sure it is clear in the tests. Simplfied the adding values to Probabilitycache, and simplified the code in StabilizerState._get_probabilities() setting values in cache and retrieving the state when using cache, made cache_key in probabilitycache ""private"" and changed method to _cache_key

* Significant code refactoring in StabiizerState

Significant code refactoring in stabilizerstate. I was able to condense the use the cache to a smaller area in the _get_probabilities helper method so it is easier to work with and more clear. I removed methods I created that were single use helper methods that were able to be condensed down into simpler code such as _branches_to_measure, _retrieve_deterministic_probability, _branches_to_measure, _is_qubit_deterministic. Since these are 1 time use methods it didn't make sense to keep them around. The _get_probabilities helper method is much simpler and clearer, closer to the original with less tweaks and functioning with the same performance, and more clarity.  Most of the code changed at this point is adding tests, most of this commit was removing unnecessary code and refactoring

* Fixed stabilizerstate cache key outcome not found

there was a check to make sure a key could be found before that was removed in the refactoring, once and awhile you get a target that can't be found in the cache because of the algorithm of looking for a key by increasing the number of X from the left to the right. There are situations where the X would be in the middle such as 0X1 that won't be found. The algorithm in the probability cache could be changed to use BST which would very rarely help performance, the fix is to make sure a key can be found and then only use the cache if that is the case

* Moved all caching retrieval outside of _get_probabilities for performance

there is a slight overhead when recursively iterating through the _get_probabilities helper when having to check if caching should be retrieved. Realistically when you use caching it is just to get you a better starting point, so it only needs to be retrieved once. The cache inserting remains in the _get_probabilities helper to build up the cache, but the logic was significantly simplified in the _get_probabilities helper, and now only a 1 time cache retrieval is performed for each target via the probabilities_dict_from_bitstrings method

* Simplified Bitstring method for probability cache, removed unnecessary classes

Removed Probabilitycache class, test_probabilitiycache.py. Simplified test_stabilizerstate.py for new bitstring probability testing methods. changed method probabilities_dict_from_bitstrings to probabilities_dict_from_bitstring, and simplified by removing cache, and only allowing a single string value to be passed in

* Commenting update for _probabilities_bitstring_verify

updating the commenting for _probabilities_bitstring_verify, move to top of file

* black lint formatter ran

* Uncomment out line causing circular import

when running locally I get a circular import for two_qubit_decompose.py on line 154 ""_specializations = two_qubit_decompose.Specialization"", I need to comment out to test locally, but did not mean to commit this.

Simplified the stablizierstate self._get_probabilities method but removing an unnecessary check

* Remove type hints from test_stabilizerstate

* Updated test_stabilizerstate, removed helper test method, new release note

update the tests in test_stabilizerstate to no longer use a helper method for checking all the bitstring measurements in. Created a _get_probabilities_dict helper method in stabilizer state to be used for the probabilities_dict and probabilities_dict_with_bitstring methods. This was needed so that they could share the logic of the measurements, but also so that you could enforce in the probabilities_dict_with_bitstring method that outcome_bitstring must be provided. Previouslly this was optional and the user could avoid passing in a value, but this would essentially make it function the same as probabilities_dict. Now with the helper it enforces they must provide a bitstring

* Added large qubit test with h gates, reorder imports for test_stabilizerstate

added new test method test_probabilities_dict_large_num_qubits with large amount of qubit tests using an outcome bitstring target, num_qubits=[25, 50, 100, 200, 300, 400, 500, 600, 750], normally get any results for 750 qubits would require ~5.922387e+225 full bitstring calculations, but if you want one target bitstring you can perform ~750 measurements for a single probability for one result and get the value quickly

* moved methods out of loop that are unnecessary in test_stabilizerstate

moded target dict calculation out of loop that is not necessary to recalculate through each sample loop calculation

* broke out medium hgate test to own test method, issue with assertTrue type in test

testing a variety of hgates that also do the full probabilities_dict calculations up to 9 qubits called test_probabilities_dict_hgate_medium_num_qubits, also changed a assertTrue typo to assertDictEqual in the test_probabilities_dict_large_num_qubits method

* fixed commenting in stabilizerstate, removed unnecessary outcome_bitstring array access syntax

fixed some commenting for probabilities_dict_from_bitstring, and removed unnecessary syntax for accessing the array, was outcome_bitstring[i : i + 1] now outcome_bitstring[i] in _get_probabilities

* Condensed tests in test_stabilizerstate, added helper test class, more test coverage

added class StabilizerStateTestingTools in file test_stabilizerstate, these methods needed to be moved outside of the TestStabilizerState class because they are also needed in the TestStabilizerStateExpectationValue class within the file. It did not make sense to put these helper methods in the QiskitTestCase class, or the BaseQiskitTestCase class as these helpers are specific to helping test a new method in the stabilizerstate class.

I condensed redudnant code for checking the individual bitstrings into helper method _verify_individual_bitstrings which takes a target dict, uses each entry in the dict to attempt to get the single probability, and verify each, which drastically raises the test coverage of this new method probabilities_dict_from_bitstring.

added helper method StabilizerStateTestingTools._bitstring_product which builds a dict of the product of 0, 1 for a lenth passed in, used in several test cases for testing the zero probabilities.

In the test cases you will also notice cases where I update the target dict target.update(StabilizerStateTestingTools._bitstring_product( num_qubits, target)), which builds the rest of the bitstring values that will have a 0 probability, which is then passed into the _verify_individual_bitstrings method to verify they get the correct 0 value

I reduced the number of qubits for the test_probabilities_dict_hgate_large_num_qubits from tests of num_qubits=[25, 50, 100, 200, 300, 400, 500, 600, 750] to num_qubits=[25, 50, 100, 200] due to memory issues on windows, and the largest use case I have received so far is 100 qubits, so going above that by 2x

Overall test coverage should be dramatically increased now testing for 0 probabilities, checking every bitstring individually has a probability, and simplifying the code, removing a lot of repetative logic, moved to the helper methods

* Fixed isues in release notes

https://github.com/Qiskit/qiskit/pull/12147#discussion_r1578906579

https://github.com/Qiskit/qiskit/pull/12147#discussion_r1578907028

* Corrected Targetted to targeted in stablizerstate

* Updated commenting about target

https://github.com/Qiskit/qiskit/pull/12147#discussion_r1579358105

https://github.com/Qiskit/qiskit/pull/12147#discussion_r1579356207

* Moved helper function _get_probabilities_dict

moved the helper function _get_probabilities_dict to the helper function area next to _get_probabilities

https://github.com/Qiskit/qiskit/pull/12147#discussion_r1579365690

* differentiated description for probabilities

https://github.com/Qiskit/qiskit/pull/12147#discussion_r1579193692

* Added test to test_stabilizerstate

added a test that does not have all equal probabilities and is not a GHZ state

https://github.com/Qiskit/qiskit/pull/12147#discussion_r1579395521

* combined 2 test methods

combine the large and medium tests into one due to taking too long to run the tests and lowered the amount of qubits

* removed unnecessary test

removed redundant test in test_probabilities_dict_medium_num_qubits, as this was combined with the large test

* fixed lint issues, renamed test method

renamed test_probabilities_dict_medium_num_qubits in test_stabilizerstate to test_probabilities_dict_from_bitstring

* fixed type for targetting in stabilizerstate

typo for description for word targetting, changed to targeting

---------

Co-authored-by: Shelly Garion <46566946+ShellyGarion@users.noreply.github.com>"
SHA:  87c14cb2bf9cfd9ae12985de994b6c3a31edfa61,Qiskit,qiskit,test/python/quantum_info/states/test_stabilizerstate.py,"Add new method for single bitstring target when measuring stabilizerstate probabilities_dict (#12147)

* added new method, deterministic helper unction

added new method probabilities_dict_from_bitstrings, moved logic from probabilities_dict to probabilities_dict_from_bitstrings with ability to pass target, probabilities_dict will pass a target of None.

* Adding test timing, fixed algorithm for determining if should get probability for qubit

Added some timing of the tests to determine if the version with a specfic target runs faster then the non-targetted version (which must calculate all 2^n possibilities for stabilizer state test_probablities_dict_single_qubit. When given a target it can skip branches that were not wanting to be calculated

* Adding more tests, fixing deterministic issues with bad target

* Prob of targets with 0.0 probability

* target calc changes

* Simpler way to get all targets

* Need to improve performance with multiple targets

* Simplified the probabilities_dict_from_bitstrings method

simplified the method probabilities_dict_from_bitstrings, less checking was needed, simpler handling of no target value passed in

* Adding tests for targets

* Added tests to test_probablities_dict_qubits

* Add performance boost check when using targets for test_probablities_dict_qubits

* Added Caching to prevent duplicate branch calculations

In stabilizerstate, added the ability to cache previously calculated branches so they do not get recalculated when attempting to get target values, gives a better starting point to calculate from instead of starting from an unknown probability value of 1.0

* improve performance by performing expensive operations only when needed

when creating an array for the outcome in probability, it is only built if the cache key is not found

* Optimization for caching, deterministic calcs for branches, enabling/disabling cache

added more optimization for performance when performing calculations for branches using caching and targets, it will now also store the deterministic node values which gives a very slight performance increase, migrated to most efficient ways to store and retrieve cache values. The performance increase when using a large amount of qubits is huge, when using a very small amount of qubits the very slight over head of caching makes it about the same. Increasing test coverage for using targets with probabilities

* improved tests, checking of caching vs not caching

implemented more accurate tests that verify probability caching

* added more tests and variations for stabilizerstate

* Corrected deterministic probability calculations

* Fixed bug with cache in wrong place for some calculations

for some calculations the cached results were in the wrong place which could cause false results for certain test cases with 3+ qubits

* added more test cases

* Probabilities update for moved method call

* Added test for random test_probs_random_subsystem

* fixed single probabilities tests lost in previous merge

* Removed caching of deterministic values

overhead was too high compared to calculating

* Fixed failing test with test_probs_random_subsystem

Fixed failing test that would randomly occur, the stabilizer state was not being cached as well, which would sometimes produce a failure. After caching the object to restore when calculating starting at a node down the branch, this failure no longer occurs. Need to optimize and clean up the code a bit, but functioning

* Adding tests back that were not test_probs_random_subsystem, removed to test

* Created ProbabilityCache object for dealing with caching

* Finished adding ProbabilityCache object and commenting

* Added more documentation for stabilizer state

* Fixing style with tox -eblack

* commenting fixes in stabilizerstate

* Added release note

* Updated release notes

* added __future__ to probabilitiescache, removed unused import stabilizerstate

* run tox -eblack to correct probabilitiescache

* Corrected lint issues in multiple classes

fixed lint issues in test_probabilitiycache, test_stabilizerstate, stabilizerstate, and probabilitycache

* fixed more pylint lint issues

pylint -rn qiskit test tools
Corrected in probabilitycache, stabilizerstate, test_probabilitycach, test_stabilizerstate

* fixed more lint issues

fixed with:
tox -eblack

verified with:
black --check qiskit test tools examples setup.py
pylint -rn qiskit test tools
tox -elint

* added a bit more variance allowance for performance tests

renamed test_probabilitycache.py file to correct spelling
added a bit more performance_varability_percent percent time allowed from 0.001 to 0.005

* Corrected Lint issues, added test for probabilitycache

added test_probabilitycache test, fixed lint issues and type issues in stabilizerstate, test_stabilizerstate

* Fixed remaining import ordering issue

* readded ddt decorator for test_probabilitycache

* Changed to using process_time_ns from monotonic for performance measuring

* Added output when performance times fail to aid in debugging in test_stabilizerstate

* moved performance end time out of same method to calculate times

* changed method name in test_stabilizerstate

changed probability_percent_of_calculated_branches to _probability_percent_of_calculated_branches

* Added GC disabling between timed tests

* Attempting using perf_counter_ns instead of process_time_ns

* Updated commenting, moved 'X' outcome check

moved 'X' in outcome out of the for loop for StabilizerState._get_probabilities to help performance

* more comment updating

* Changed performance timer based on OS type

* Changing to time.thread_time_ns(), and raising performance varabilitiy by 0.005

using time.thread_time_ns() for benchmarking instead of time.perf_counter_ns() and time.process_time_ns() based on the OS in test_stabilizerstate. It seems that time is being counted that shouldn't be with the other methods that causes false reports of the work taking longer then it does. Raising the performance_varability_percent in test_stablilizerstate by 0.005 to 0.01 for more headroom for performance checking

* changing time.thread_time() vs time.thread_time_ns() to see if compatible with windows

also added one more target for test_4 to differentiate no caching against caching in test_stabilizerstate

* Changing performance timer based on OS for test_stablizerstate

perf_counter_ns for win32 and thread_time for all other OS

* fixed small issue in probabilitycache, improved probabilitycache test

fixed issue when checking the cache key that was not operating correctly, internally the key is always a str, but when a list[str] was passed in the check was not correct, so changed to check if an instance of a list, and will join the outcome val to a str for the internal cache key. Improved the probabilitycache to test having alternating keys of str and list[str] to test this internal key checking

* Added correct type hinting to probabilitycache

* removed typing hint module

removed the use of typing module for type hinting, looks like python wants to get away from using this module for type hinting, also fixed some commenting issues in stabilizerstate, test_probabilitycache, test_stabilizerstate, and probabilitycache files

* Fix test pylint failure of Value 'list' is unsubscriptable (unsubscriptable-object)

fixing tests failing with pylint when lint checking is performed. This worked locally and wasn't failing, but when it runs in the CI/CD process it fails, so adding from __future__ import annotations to avoid this failure for test_probabilitycache and test_stabilizerstate as new tests include type hinting

* Fix small comment error in test, Added use_caching to tests, simplified cache calls

Fixed a small error in my commenting for the test_stabilizerstate.py and forced use_caching parm in the call of probabilities_dict_from_bitstrings in the tests, even tho it is used as default, to make sure it is clear in the tests. Simplfied the adding values to Probabilitycache, and simplified the code in StabilizerState._get_probabilities() setting values in cache and retrieving the state when using cache, made cache_key in probabilitycache ""private"" and changed method to _cache_key

* Significant code refactoring in StabiizerState

Significant code refactoring in stabilizerstate. I was able to condense the use the cache to a smaller area in the _get_probabilities helper method so it is easier to work with and more clear. I removed methods I created that were single use helper methods that were able to be condensed down into simpler code such as _branches_to_measure, _retrieve_deterministic_probability, _branches_to_measure, _is_qubit_deterministic. Since these are 1 time use methods it didn't make sense to keep them around. The _get_probabilities helper method is much simpler and clearer, closer to the original with less tweaks and functioning with the same performance, and more clarity.  Most of the code changed at this point is adding tests, most of this commit was removing unnecessary code and refactoring

* Fixed stabilizerstate cache key outcome not found

there was a check to make sure a key could be found before that was removed in the refactoring, once and awhile you get a target that can't be found in the cache because of the algorithm of looking for a key by increasing the number of X from the left to the right. There are situations where the X would be in the middle such as 0X1 that won't be found. The algorithm in the probability cache could be changed to use BST which would very rarely help performance, the fix is to make sure a key can be found and then only use the cache if that is the case

* Moved all caching retrieval outside of _get_probabilities for performance

there is a slight overhead when recursively iterating through the _get_probabilities helper when having to check if caching should be retrieved. Realistically when you use caching it is just to get you a better starting point, so it only needs to be retrieved once. The cache inserting remains in the _get_probabilities helper to build up the cache, but the logic was significantly simplified in the _get_probabilities helper, and now only a 1 time cache retrieval is performed for each target via the probabilities_dict_from_bitstrings method

* Simplified Bitstring method for probability cache, removed unnecessary classes

Removed Probabilitycache class, test_probabilitiycache.py. Simplified test_stabilizerstate.py for new bitstring probability testing methods. changed method probabilities_dict_from_bitstrings to probabilities_dict_from_bitstring, and simplified by removing cache, and only allowing a single string value to be passed in

* Commenting update for _probabilities_bitstring_verify

updating the commenting for _probabilities_bitstring_verify, move to top of file

* black lint formatter ran

* Uncomment out line causing circular import

when running locally I get a circular import for two_qubit_decompose.py on line 154 ""_specializations = two_qubit_decompose.Specialization"", I need to comment out to test locally, but did not mean to commit this.

Simplified the stablizierstate self._get_probabilities method but removing an unnecessary check

* Remove type hints from test_stabilizerstate

* Updated test_stabilizerstate, removed helper test method, new release note

update the tests in test_stabilizerstate to no longer use a helper method for checking all the bitstring measurements in. Created a _get_probabilities_dict helper method in stabilizer state to be used for the probabilities_dict and probabilities_dict_with_bitstring methods. This was needed so that they could share the logic of the measurements, but also so that you could enforce in the probabilities_dict_with_bitstring method that outcome_bitstring must be provided. Previouslly this was optional and the user could avoid passing in a value, but this would essentially make it function the same as probabilities_dict. Now with the helper it enforces they must provide a bitstring

* Added large qubit test with h gates, reorder imports for test_stabilizerstate

added new test method test_probabilities_dict_large_num_qubits with large amount of qubit tests using an outcome bitstring target, num_qubits=[25, 50, 100, 200, 300, 400, 500, 600, 750], normally get any results for 750 qubits would require ~5.922387e+225 full bitstring calculations, but if you want one target bitstring you can perform ~750 measurements for a single probability for one result and get the value quickly

* moved methods out of loop that are unnecessary in test_stabilizerstate

moded target dict calculation out of loop that is not necessary to recalculate through each sample loop calculation

* broke out medium hgate test to own test method, issue with assertTrue type in test

testing a variety of hgates that also do the full probabilities_dict calculations up to 9 qubits called test_probabilities_dict_hgate_medium_num_qubits, also changed a assertTrue typo to assertDictEqual in the test_probabilities_dict_large_num_qubits method

* fixed commenting in stabilizerstate, removed unnecessary outcome_bitstring array access syntax

fixed some commenting for probabilities_dict_from_bitstring, and removed unnecessary syntax for accessing the array, was outcome_bitstring[i : i + 1] now outcome_bitstring[i] in _get_probabilities

* Condensed tests in test_stabilizerstate, added helper test class, more test coverage

added class StabilizerStateTestingTools in file test_stabilizerstate, these methods needed to be moved outside of the TestStabilizerState class because they are also needed in the TestStabilizerStateExpectationValue class within the file. It did not make sense to put these helper methods in the QiskitTestCase class, or the BaseQiskitTestCase class as these helpers are specific to helping test a new method in the stabilizerstate class.

I condensed redudnant code for checking the individual bitstrings into helper method _verify_individual_bitstrings which takes a target dict, uses each entry in the dict to attempt to get the single probability, and verify each, which drastically raises the test coverage of this new method probabilities_dict_from_bitstring.

added helper method StabilizerStateTestingTools._bitstring_product which builds a dict of the product of 0, 1 for a lenth passed in, used in several test cases for testing the zero probabilities.

In the test cases you will also notice cases where I update the target dict target.update(StabilizerStateTestingTools._bitstring_product( num_qubits, target)), which builds the rest of the bitstring values that will have a 0 probability, which is then passed into the _verify_individual_bitstrings method to verify they get the correct 0 value

I reduced the number of qubits for the test_probabilities_dict_hgate_large_num_qubits from tests of num_qubits=[25, 50, 100, 200, 300, 400, 500, 600, 750] to num_qubits=[25, 50, 100, 200] due to memory issues on windows, and the largest use case I have received so far is 100 qubits, so going above that by 2x

Overall test coverage should be dramatically increased now testing for 0 probabilities, checking every bitstring individually has a probability, and simplifying the code, removing a lot of repetative logic, moved to the helper methods

* Fixed isues in release notes

https://github.com/Qiskit/qiskit/pull/12147#discussion_r1578906579

https://github.com/Qiskit/qiskit/pull/12147#discussion_r1578907028

* Corrected Targetted to targeted in stablizerstate

* Updated commenting about target

https://github.com/Qiskit/qiskit/pull/12147#discussion_r1579358105

https://github.com/Qiskit/qiskit/pull/12147#discussion_r1579356207

* Moved helper function _get_probabilities_dict

moved the helper function _get_probabilities_dict to the helper function area next to _get_probabilities

https://github.com/Qiskit/qiskit/pull/12147#discussion_r1579365690

* differentiated description for probabilities

https://github.com/Qiskit/qiskit/pull/12147#discussion_r1579193692

* Added test to test_stabilizerstate

added a test that does not have all equal probabilities and is not a GHZ state

https://github.com/Qiskit/qiskit/pull/12147#discussion_r1579395521

* combined 2 test methods

combine the large and medium tests into one due to taking too long to run the tests and lowered the amount of qubits

* removed unnecessary test

removed redundant test in test_probabilities_dict_medium_num_qubits, as this was combined with the large test

* fixed lint issues, renamed test method

renamed test_probabilities_dict_medium_num_qubits in test_stabilizerstate to test_probabilities_dict_from_bitstring

* fixed type for targetting in stabilizerstate

typo for description for word targetting, changed to targeting

---------

Co-authored-by: Shelly Garion <46566946+ShellyGarion@users.noreply.github.com>"
SHA:  5c37733f27988c64deb92d41686893ccbf20fd6a,microsoft,QuantumKatas,tutorials/MultiQubitSystems/MultiQubitSystems.ipynb,Fix several typos and clarify true randomness (#891)
SHA:  5c37733f27988c64deb92d41686893ccbf20fd6a,microsoft,QuantumKatas,tutorials/Oracles/ReferenceImplementation.qs,Fix several typos and clarify true randomness (#891)
SHA:  5c37733f27988c64deb92d41686893ccbf20fd6a,microsoft,QuantumKatas,tutorials/Oracles/Tasks.qs,Fix several typos and clarify true randomness (#891)
SHA:  5c37733f27988c64deb92d41686893ccbf20fd6a,microsoft,QuantumKatas,tutorials/RandomNumberGeneration/RandomNumberGenerationTutorial.ipynb,Fix several typos and clarify true randomness (#891)
SHA:  5c37733f27988c64deb92d41686893ccbf20fd6a,microsoft,QuantumKatas,tutorials/SingleQubitGates/SingleQubitGates.ipynb,Fix several typos and clarify true randomness (#891)
SHA:  46eab2d88e940b47489d9efbc28333d07352228f,quantumlib,Cirq,dev_tools/requirements/deps/dev-tools.txt,"Support Python 3.12 (#6516)

- Fix attribute error in `engine_test.py::test_create_context`
- Adjust package presence assertion in `test_isolated_env_cloning`
- Bump up to virtualenv>=20.23, filelock~=3.1, pylatex~=1.4
- Bump up to grpcio-tools~=1.59.0 and recompile protos
- Relax qiskit-aer requirement to qiskit-aer~=0.12.0.  Allow qiskit-aer-0.12.0
  which has source archive on PyPI and can be installed for Python 3.12.
- Bump up to quimb~=1.7 which installs correctly with Python 3.12
  Remove quimb-only dependencies from our requirements, let
  quimb sort out its dependencies itself.
- CI - add pytest jobs with Python 3.12
- Skip mysteriously failing test of Contract-a-Grid-Circuit.ipynb

Fixes #6460"
,quantumlib,Cirq,cirq-core/cirq/transformers/gauge_compiling/gauge_compiling.py,Add a new gauge for SqrtCZ and support SqrtCZ闂 and fix and improve spin inversion gauge (#6571)
,quantumlib,Cirq,cirq-core/cirq/transformers/gauge_compiling/spin_inversion_gauge.py,Add a new gauge for SqrtCZ and support SqrtCZ闂 and fix and improve spin inversion gauge (#6571)
,quantumlib,Cirq,cirq-core/cirq/transformers/gauge_compiling/spin_inversion_gauge_test.py,Add a new gauge for SqrtCZ and support SqrtCZ闂 and fix and improve spin inversion gauge (#6571)
,quantumlib,Cirq,cirq-core/cirq/transformers/gauge_compiling/sqrt_cz_gauge.py,Add a new gauge for SqrtCZ and support SqrtCZ闂 and fix and improve spin inversion gauge (#6571)
,quantumlib,Cirq,cirq-core/cirq/transformers/gauge_compiling/sqrt_cz_gauge_test.py,Add a new gauge for SqrtCZ and support SqrtCZ闂 and fix and improve spin inversion gauge (#6571)
SHA:  e1b03ef63af4270d6a185df3db6e43c8232c6a71,quantumlib,Cirq,cirq-aqt/cirq_aqt/aqt_device.py,"Update AQT Backend (#6441)

Adjusted the AQT backend so that it works with the new AQT Arnica API. We also updated the gateset to reflect what we support.
As we made an extension to the API, we were able to add a feature that lists the workspaces and resources that are available to a user. We also updated tests and documentation accordingly.

Fixes #6379"
SHA:  e1b03ef63af4270d6a185df3db6e43c8232c6a71,quantumlib,Cirq,cirq-aqt/cirq_aqt/aqt_device_metadata.py,"Update AQT Backend (#6441)

Adjusted the AQT backend so that it works with the new AQT Arnica API. We also updated the gateset to reflect what we support.
As we made an extension to the API, we were able to add a feature that lists the workspaces and resources that are available to a user. We also updated tests and documentation accordingly.

Fixes #6379"
SHA:  e1b03ef63af4270d6a185df3db6e43c8232c6a71,quantumlib,Cirq,cirq-aqt/cirq_aqt/aqt_device_metadata_test.py,"Update AQT Backend (#6441)

Adjusted the AQT backend so that it works with the new AQT Arnica API. We also updated the gateset to reflect what we support.
As we made an extension to the API, we were able to add a feature that lists the workspaces and resources that are available to a user. We also updated tests and documentation accordingly.

Fixes #6379"
SHA:  e1b03ef63af4270d6a185df3db6e43c8232c6a71,quantumlib,Cirq,cirq-aqt/cirq_aqt/aqt_simulator_test.py,"Update AQT Backend (#6441)

Adjusted the AQT backend so that it works with the new AQT Arnica API. We also updated the gateset to reflect what we support.
As we made an extension to the API, we were able to add a feature that lists the workspaces and resources that are available to a user. We also updated tests and documentation accordingly.

Fixes #6379"
SHA:  e1b03ef63af4270d6a185df3db6e43c8232c6a71,quantumlib,Cirq,cirq-aqt/cirq_aqt/aqt_target_gateset.py,"Update AQT Backend (#6441)

Adjusted the AQT backend so that it works with the new AQT Arnica API. We also updated the gateset to reflect what we support.
As we made an extension to the API, we were able to add a feature that lists the workspaces and resources that are available to a user. We also updated tests and documentation accordingly.

Fixes #6379"
SHA:  e1b03ef63af4270d6a185df3db6e43c8232c6a71,quantumlib,Cirq,cirq-aqt/cirq_aqt/aqt_target_gateset_test.py,"Update AQT Backend (#6441)

Adjusted the AQT backend so that it works with the new AQT Arnica API. We also updated the gateset to reflect what we support.
As we made an extension to the API, we were able to add a feature that lists the workspaces and resources that are available to a user. We also updated tests and documentation accordingly.

Fixes #6379"
SHA:  d16b12c0360924900aa6a9317570b7e7e6c18591,quantumlib,Cirq,cirq-core/cirq/sim/state_vector_simulator.py,"Avoid state vector normalization if it worsens the round offs (#6556)

This fixes failure of

check/pytest -n0 cirq-core/cirq/circuits/circuit_test.py::test_final_state_vector

which happened because normalization of a state vector at `np.complex64`
precision can subtly increase the overall round-off error.

Follow up to #6522 and #6402"
SHA:  c18feed740cad55c5203d4a510b0ea8a64548fac,quantumlib,Cirq,cirq-core/cirq/transformers/merge_k_qubit_gates_test.py,"display tags by `str` instead of `repr` in circuit diagrams (#6530)

Use more readable rendering of tagged operations in diagrams.

Fixes: #6411"
SHA:  c18feed740cad55c5203d4a510b0ea8a64548fac,quantumlib,Cirq,cirq-core/cirq/transformers/merge_single_qubit_gates_test.py,"display tags by `str` instead of `repr` in circuit diagrams (#6530)

Use more readable rendering of tagged operations in diagrams.

Fixes: #6411"
SHA:  c18feed740cad55c5203d4a510b0ea8a64548fac,quantumlib,Cirq,cirq-core/cirq/transformers/optimize_for_target_gateset_test.py,"display tags by `str` instead of `repr` in circuit diagrams (#6530)

Use more readable rendering of tagged operations in diagrams.

Fixes: #6411"
SHA:  c18feed740cad55c5203d4a510b0ea8a64548fac,quantumlib,Cirq,cirq-core/cirq/transformers/routing/visualize_routed_circuit_test.py,"display tags by `str` instead of `repr` in circuit diagrams (#6530)

Use more readable rendering of tagged operations in diagrams.

Fixes: #6411"
SHA:  c18feed740cad55c5203d4a510b0ea8a64548fac,quantumlib,Cirq,cirq-core/cirq/transformers/stratify_test.py,"display tags by `str` instead of `repr` in circuit diagrams (#6530)

Use more readable rendering of tagged operations in diagrams.

Fixes: #6411"
SHA:  c18feed740cad55c5203d4a510b0ea8a64548fac,quantumlib,Cirq,cirq-core/cirq/transformers/target_gatesets/compilation_target_gateset_test.py,"display tags by `str` instead of `repr` in circuit diagrams (#6530)

Use more readable rendering of tagged operations in diagrams.

Fixes: #6411"
SHA:  c18feed740cad55c5203d4a510b0ea8a64548fac,quantumlib,Cirq,cirq-core/cirq/transformers/transformer_primitives_test.py,"display tags by `str` instead of `repr` in circuit diagrams (#6530)

Use more readable rendering of tagged operations in diagrams.

Fixes: #6411"
SHA:  c18feed740cad55c5203d4a510b0ea8a64548fac,quantumlib,Cirq,cirq-google/cirq_google/transformers/target_gatesets/sycamore_gateset_test.py,"display tags by `str` instead of `repr` in circuit diagrams (#6530)

Use more readable rendering of tagged operations in diagrams.

Fixes: #6411"
SHA:  1bec6b581bfac5b6b832ba06e51b246813a65d91,quantumlib,Cirq,cirq-core/cirq/ops/qubit_manager_test.py,"Improve repr of `_BaseAncillaQid` classes with prefix (#6555)

* Add failing repr tests for CleanQubit and BorrowableQubit with prefix

* Quote prefix string in repr of `_BaseAncillaQid` classes"
SHA:  857e202db46307ac95a4a229fb1969fda6ff1a47,quantumlib,Cirq,cirq-core/cirq/ops/qubit_manager_test.py,"Bugfix in `comparison_key` and nicer `with_dimension` of `_BaseAncillaQid` (#6554)

* Bugfix in comparison_key and nicer with_dimension of _BaseAncillaQid

* Fix pylint"
SHA:  359e6ae12729bdb182c422e5e9d92f7f1491a075,microsoft,Quantum,global.json,"0.28.291394 (#817)

* Build 0.28.291394.
* Enable uploading missing packs from nuget.org to alpha
* GitHub action fix."
SHA:  359e6ae12729bdb182c422e5e9d92f7f1491a075,microsoft,Quantum,samples/algorithms/chsh-game/CHSHGame.csproj,"0.28.291394 (#817)

* Build 0.28.291394.
* Enable uploading missing packs from nuget.org to alpha
* GitHub action fix."
SHA:  359e6ae12729bdb182c422e5e9d92f7f1491a075,microsoft,Quantum,samples/algorithms/database-search/DatabaseSearchSample.csproj,"0.28.291394 (#817)

* Build 0.28.291394.
* Enable uploading missing packs from nuget.org to alpha
* GitHub action fix."
SHA:  359e6ae12729bdb182c422e5e9d92f7f1491a075,microsoft,Quantum,samples/algorithms/integer-factorization/IntegerFactorization.csproj,"0.28.291394 (#817)

* Build 0.28.291394.
* Enable uploading missing packs from nuget.org to alpha
* GitHub action fix."
SHA:  359e6ae12729bdb182c422e5e9d92f7f1491a075,microsoft,Quantum,samples/algorithms/oracle-synthesis/OracleSynthesis.csproj,"0.28.291394 (#817)

* Build 0.28.291394.
* Enable uploading missing packs from nuget.org to alpha
* GitHub action fix."
SHA:  359e6ae12729bdb182c422e5e9d92f7f1491a075,microsoft,Quantum,samples/algorithms/order-finding/OrderFinding.csproj,"0.28.291394 (#817)

* Build 0.28.291394.
* Enable uploading missing packs from nuget.org to alpha
* GitHub action fix."
SHA:  359e6ae12729bdb182c422e5e9d92f7f1491a075,microsoft,Quantum,samples/algorithms/repeat-until-success/RepeatUntilSuccess.csproj,"0.28.291394 (#817)

* Build 0.28.291394.
* Enable uploading missing packs from nuget.org to alpha
* GitHub action fix."
SHA:  359e6ae12729bdb182c422e5e9d92f7f1491a075,microsoft,Quantum,samples/algorithms/reversible-logic-synthesis/ReversibleLogicSynthesis.csproj,"0.28.291394 (#817)

* Build 0.28.291394.
* Enable uploading missing packs from nuget.org to alpha
* GitHub action fix."
SHA:  359e6ae12729bdb182c422e5e9d92f7f1491a075,microsoft,Quantum,samples/algorithms/simple-grover/SimpleGroverSample.csproj,"0.28.291394 (#817)

* Build 0.28.291394.
* Enable uploading missing packs from nuget.org to alpha
* GitHub action fix."
SHA:  359e6ae12729bdb182c422e5e9d92f7f1491a075,microsoft,Quantum,samples/algorithms/sudoku-grover/SudokuGroverSample.csproj,"0.28.291394 (#817)

* Build 0.28.291394.
* Enable uploading missing packs from nuget.org to alpha
* GitHub action fix."
SHA:  359e6ae12729bdb182c422e5e9d92f7f1491a075,microsoft,Quantum,samples/algorithms/variational-algorithms/VariationalAlgorithms.csproj,"0.28.291394 (#817)

* Build 0.28.291394.
* Enable uploading missing packs from nuget.org to alpha
* GitHub action fix."
SHA:  359e6ae12729bdb182c422e5e9d92f7f1491a075,microsoft,Quantum,samples/algorithms/variational-algorithms/environment.yml,"0.28.291394 (#817)

* Build 0.28.291394.
* Enable uploading missing packs from nuget.org to alpha
* GitHub action fix."
SHA:  359e6ae12729bdb182c422e5e9d92f7f1491a075,microsoft,Quantum,samples/azure-quantum/check-ghz/CheckGHZ.csproj,"0.28.291394 (#817)

* Build 0.28.291394.
* Enable uploading missing packs from nuget.org to alpha
* GitHub action fix."
SHA:  359e6ae12729bdb182c422e5e9d92f7f1491a075,microsoft,Quantum,samples/azure-quantum/grover/Grover.csproj,"0.28.291394 (#817)

* Build 0.28.291394.
* Enable uploading missing packs from nuget.org to alpha
* GitHub action fix."
SHA:  359e6ae12729bdb182c422e5e9d92f7f1491a075,microsoft,Quantum,samples/azure-quantum/hidden-shift/HiddenShift.csproj,"0.28.291394 (#817)

* Build 0.28.291394.
* Enable uploading missing packs from nuget.org to alpha
* GitHub action fix."
SHA:  359e6ae12729bdb182c422e5e9d92f7f1491a075,microsoft,Quantum,samples/azure-quantum/ising-model/IsingModel.csproj,"0.28.291394 (#817)

* Build 0.28.291394.
* Enable uploading missing packs from nuget.org to alpha
* GitHub action fix."
SHA:  359e6ae12729bdb182c422e5e9d92f7f1491a075,microsoft,Quantum,samples/azure-quantum/iterative-phase-estimation/iterative-phase-estimation.csproj,"0.28.291394 (#817)

* Build 0.28.291394.
* Enable uploading missing packs from nuget.org to alpha
* GitHub action fix."
SHA:  359e6ae12729bdb182c422e5e9d92f7f1491a075,microsoft,Quantum,samples/azure-quantum/parallel-qrng/ParallelQrng.csproj,"0.28.291394 (#817)

* Build 0.28.291394.
* Enable uploading missing packs from nuget.org to alpha
* GitHub action fix."
SHA:  359e6ae12729bdb182c422e5e9d92f7f1491a075,microsoft,Quantum,samples/azure-quantum/resource-estimation/integer-factorization-with-cli/integer-factorization.csproj,"0.28.291394 (#817)

* Build 0.28.291394.
* Enable uploading missing packs from nuget.org to alpha
* GitHub action fix."
SHA:  359e6ae12729bdb182c422e5e9d92f7f1491a075,microsoft,Quantum,samples/azure-quantum/teleport/Teleport.csproj,"0.28.291394 (#817)

* Build 0.28.291394.
* Enable uploading missing packs from nuget.org to alpha
* GitHub action fix."
SHA:  359e6ae12729bdb182c422e5e9d92f7f1491a075,microsoft,Quantum,samples/azure-quantum/three-qubit-repetition-code/ThreeQubitRepetitionCode.csproj,"0.28.291394 (#817)

* Build 0.28.291394.
* Enable uploading missing packs from nuget.org to alpha
* GitHub action fix."
SHA:  359e6ae12729bdb182c422e5e9d92f7f1491a075,microsoft,Quantum,samples/characterization/phase-estimation/PhaseEstimationSample.csproj,"0.28.291394 (#817)

* Build 0.28.291394.
* Enable uploading missing packs from nuget.org to alpha
* GitHub action fix."
SHA:  359e6ae12729bdb182c422e5e9d92f7f1491a075,microsoft,Quantum,samples/characterization/process-tomography/environment.yml,"0.28.291394 (#817)

* Build 0.28.291394.
* Enable uploading missing packs from nuget.org to alpha
* GitHub action fix."
SHA:  359e6ae12729bdb182c422e5e9d92f7f1491a075,microsoft,Quantum,samples/characterization/randomized-benchmarking/RandomizedBenchmarking.csproj,"0.28.291394 (#817)

* Build 0.28.291394.
* Enable uploading missing packs from nuget.org to alpha
* GitHub action fix."
SHA:  359e6ae12729bdb182c422e5e9d92f7f1491a075,microsoft,Quantum,samples/characterization/randomized-benchmarking/environment.yml,"0.28.291394 (#817)

* Build 0.28.291394.
* Enable uploading missing packs from nuget.org to alpha
* GitHub action fix."
SHA:  359e6ae12729bdb182c422e5e9d92f7f1491a075,microsoft,Quantum,samples/chemistry/AnalyzeHamiltonian/1-AnalyzeHamiltonian.csproj,"0.28.291394 (#817)

* Build 0.28.291394.
* Enable uploading missing packs from nuget.org to alpha
* GitHub action fix."
SHA:  359e6ae12729bdb182c422e5e9d92f7f1491a075,microsoft,Quantum,samples/chemistry/GetGateCount/3-GetGateCount.csproj,"0.28.291394 (#817)

* Build 0.28.291394.
* Enable uploading missing packs from nuget.org to alpha
* GitHub action fix."
SHA:  359e6ae12729bdb182c422e5e9d92f7f1491a075,microsoft,Quantum,samples/chemistry/LithiumHydrideGUI/LithiumHydrideGUI.csproj,"0.28.291394 (#817)

* Build 0.28.291394.
* Enable uploading missing packs from nuget.org to alpha
* GitHub action fix."
SHA:  359e6ae12729bdb182c422e5e9d92f7f1491a075,microsoft,Quantum,samples/chemistry/MolecularHydrogen/MolecularHydrogen.csproj,"0.28.291394 (#817)

* Build 0.28.291394.
* Enable uploading missing packs from nuget.org to alpha
* GitHub action fix."
SHA:  359e6ae12729bdb182c422e5e9d92f7f1491a075,microsoft,Quantum,samples/chemistry/MolecularHydrogenGUI/MolecularHydrogenGUI.csproj,"0.28.291394 (#817)

* Build 0.28.291394.
* Enable uploading missing packs from nuget.org to alpha
* GitHub action fix."
SHA:  359e6ae12729bdb182c422e5e9d92f7f1491a075,microsoft,Quantum,samples/chemistry/RunSimulation/2-RunSimulation.csproj,"0.28.291394 (#817)

* Build 0.28.291394.
* Enable uploading missing packs from nuget.org to alpha
* GitHub action fix."
SHA:  359e6ae12729bdb182c422e5e9d92f7f1491a075,microsoft,Quantum,samples/chemistry/SimulateHubbardHamiltonian/SimulateHubbardHamiltonian.csproj,"0.28.291394 (#817)

* Build 0.28.291394.
* Enable uploading missing packs from nuget.org to alpha
* GitHub action fix."
SHA:  359e6ae12729bdb182c422e5e9d92f7f1491a075,microsoft,Quantum,samples/error-correction/bit-flip-code/BitFlipCode.csproj,"0.28.291394 (#817)

* Build 0.28.291394.
* Enable uploading missing packs from nuget.org to alpha
* GitHub action fix."
SHA:  359e6ae12729bdb182c422e5e9d92f7f1491a075,microsoft,Quantum,samples/error-correction/syndrome/Syndrome.csproj,"0.28.291394 (#817)

* Build 0.28.291394.
* Enable uploading missing packs from nuget.org to alpha
* GitHub action fix."
SHA:  359e6ae12729bdb182c422e5e9d92f7f1491a075,microsoft,Quantum,samples/getting-started/measurement/Measurement.csproj,"0.28.291394 (#817)

* Build 0.28.291394.
* Enable uploading missing packs from nuget.org to alpha
* GitHub action fix."
SHA:  359e6ae12729bdb182c422e5e9d92f7f1491a075,microsoft,Quantum,samples/getting-started/simple-algorithms/SimpleAlgorithms.csproj,"0.28.291394 (#817)

* Build 0.28.291394.
* Enable uploading missing packs from nuget.org to alpha
* GitHub action fix."
SHA:  359e6ae12729bdb182c422e5e9d92f7f1491a075,microsoft,Quantum,samples/getting-started/teleportation/TeleportationSample.csproj,"0.28.291394 (#817)

* Build 0.28.291394.
* Enable uploading missing packs from nuget.org to alpha
* GitHub action fix."
SHA:  359e6ae12729bdb182c422e5e9d92f7f1491a075,microsoft,Quantum,samples/interoperability/python/environment.yml,"0.28.291394 (#817)

* Build 0.28.291394.
* Enable uploading missing packs from nuget.org to alpha
* GitHub action fix."
SHA:  359e6ae12729bdb182c422e5e9d92f7f1491a075,microsoft,Quantum,samples/interoperability/qrng/Qrng.csproj,"0.28.291394 (#817)

* Build 0.28.291394.
* Enable uploading missing packs from nuget.org to alpha
* GitHub action fix."
SHA:  359e6ae12729bdb182c422e5e9d92f7f1491a075,microsoft,Quantum,samples/machine-learning/half-moons/HalfMoons.ipynb,"0.28.291394 (#817)

* Build 0.28.291394.
* Enable uploading missing packs from nuget.org to alpha
* GitHub action fix."
SHA:  359e6ae12729bdb182c422e5e9d92f7f1491a075,microsoft,Quantum,samples/machine-learning/parallel-half-moons/ParallelHalfMoons.csproj,"0.28.291394 (#817)

* Build 0.28.291394.
* Enable uploading missing packs from nuget.org to alpha
* GitHub action fix."
SHA:  359e6ae12729bdb182c422e5e9d92f7f1491a075,microsoft,Quantum,samples/machine-learning/wine/Wine.csproj,"0.28.291394 (#817)

* Build 0.28.291394.
* Enable uploading missing packs from nuget.org to alpha
* GitHub action fix."
SHA:  359e6ae12729bdb182c422e5e9d92f7f1491a075,microsoft,Quantum,samples/numerics/custom-mod-add/CustomModAdd.csproj,"0.28.291394 (#817)

* Build 0.28.291394.
* Enable uploading missing packs from nuget.org to alpha
* GitHub action fix."
SHA:  359e6ae12729bdb182c422e5e9d92f7f1491a075,microsoft,Quantum,samples/numerics/evaluating-functions/EvaluatingFunctions.csproj,"0.28.291394 (#817)

* Build 0.28.291394.
* Enable uploading missing packs from nuget.org to alpha
* GitHub action fix."
SHA:  359e6ae12729bdb182c422e5e9d92f7f1491a075,microsoft,Quantum,samples/numerics/resource-counting/ResourceCounting.csproj,"0.28.291394 (#817)

* Build 0.28.291394.
* Enable uploading missing packs from nuget.org to alpha
* GitHub action fix."
SHA:  359e6ae12729bdb182c422e5e9d92f7f1491a075,microsoft,Quantum,samples/runtime/autosubstitution/AutoSubstitution.csproj,"0.28.291394 (#817)

* Build 0.28.291394.
* Enable uploading missing packs from nuget.org to alpha
* GitHub action fix."
SHA:  359e6ae12729bdb182c422e5e9d92f7f1491a075,microsoft,Quantum,samples/runtime/oracle-emulation/OracleEmulation.csproj,"0.28.291394 (#817)

* Build 0.28.291394.
* Enable uploading missing packs from nuget.org to alpha
* GitHub action fix."
SHA:  359e6ae12729bdb182c422e5e9d92f7f1491a075,microsoft,Quantum,samples/runtime/qpic-simulator/simulator/simulator.csproj,"0.28.291394 (#817)

* Build 0.28.291394.
* Enable uploading missing packs from nuget.org to alpha
* GitHub action fix."
SHA:  359e6ae12729bdb182c422e5e9d92f7f1491a075,microsoft,Quantum,samples/runtime/reversible-simulator-advanced/host/host.csproj,"0.28.291394 (#817)

* Build 0.28.291394.
* Enable uploading missing packs from nuget.org to alpha
* GitHub action fix."
SHA:  359e6ae12729bdb182c422e5e9d92f7f1491a075,microsoft,Quantum,samples/runtime/reversible-simulator-advanced/simulator/simulator.csproj,"0.28.291394 (#817)

* Build 0.28.291394.
* Enable uploading missing packs from nuget.org to alpha
* GitHub action fix."
SHA:  359e6ae12729bdb182c422e5e9d92f7f1491a075,microsoft,Quantum,samples/runtime/reversible-simulator-simple/ReversibleSimulator.csproj,"0.28.291394 (#817)

* Build 0.28.291394.
* Enable uploading missing packs from nuget.org to alpha
* GitHub action fix."
SHA:  359e6ae12729bdb182c422e5e9d92f7f1491a075,microsoft,Quantum,samples/runtime/simulator-with-overrides/SimulatorWithOverrides.csproj,"0.28.291394 (#817)

* Build 0.28.291394.
* Enable uploading missing packs from nuget.org to alpha
* GitHub action fix."
SHA:  359e6ae12729bdb182c422e5e9d92f7f1491a075,microsoft,Quantum,samples/simulation/gaussian-initial-state/gaussian-initial-state.csproj,"0.28.291394 (#817)

* Build 0.28.291394.
* Enable uploading missing packs from nuget.org to alpha
* GitHub action fix."
SHA:  359e6ae12729bdb182c422e5e9d92f7f1491a075,microsoft,Quantum,samples/simulation/h2/command-line/H2SimulationSampleCmdLine.csproj,"0.28.291394 (#817)

* Build 0.28.291394.
* Enable uploading missing packs from nuget.org to alpha
* GitHub action fix."
SHA:  359e6ae12729bdb182c422e5e9d92f7f1491a075,microsoft,Quantum,samples/simulation/h2/gui/H2SimulationGUI.csproj,"0.28.291394 (#817)

* Build 0.28.291394.
* Enable uploading missing packs from nuget.org to alpha
* GitHub action fix."
SHA:  359e6ae12729bdb182c422e5e9d92f7f1491a075,microsoft,Quantum,samples/simulation/ising/IsingSamples.csproj,"0.28.291394 (#817)

* Build 0.28.291394.
* Enable uploading missing packs from nuget.org to alpha
* GitHub action fix."
SHA:  359e6ae12729bdb182c422e5e9d92f7f1491a075,microsoft,Quantum,samples/tests/sample-tests/SampleTests.csproj,"0.28.291394 (#817)

* Build 0.28.291394.
* Enable uploading missing packs from nuget.org to alpha
* GitHub action fix."
SHA:  b0d9e7498997c88a4cef6ac860b6f82b93371952,microsoft,Quantum,binder-index.md,"Fixed a link. (#805)

* Fixed a link and added notebook to index."
SHA:  cf92445837ea57e0032f8d77d834fe23c45d4dce,microsoft,Quantum,samples/azure-quantum/hello-world/HW-rigetti-qsharp.ipynb,"Remove Aspen M-2 references from Rigetti samples (#803)

* Remove Aspen M-2 references from Rigetti samples

* Fixing the title for the Rigetti Q# sample"
SHA:  08427e3085d1cb64558bc00ab441acc53f78cd34,microsoft,Quantum,samples/azure-quantum/sessions/README.md,"Add Sessions introduction sample (#801)

* Add Sessions basic sample

* Minor

* fix lint

* minor

* Fix manifest

* re-organize

* Rename sample

* minor

* minor"
SHA:  08427e3085d1cb64558bc00ab441acc53f78cd34,microsoft,Quantum,samples/azure-quantum/sessions/introduction-to-sessions.ipynb,"Add Sessions introduction sample (#801)

* Add Sessions basic sample

* Minor

* fix lint

* minor

* Fix manifest

* re-organize

* Rename sample

* minor

* minor"
SHA:  dc16248de43ae45e26257cbdd1b190498d3b0f32,microsoft,Quantum,binder-index.md,"Iterative Phase Estimation Sample (#784)

* Iterative Phase Estimation Sample code

Iterative Phase Estimation for Basic Measurement Feedback targets by KPMG. 

Runnable on targets via the L3 level QIR, using bounded loops, classical function calls at runtime, nested if conditionals, mid circuit measurement and qubit reuse. Uses approximately 150 EHCs for Quantinuum targets and runnable within 5 minutes of opening notebook.

* Revert ""Iterative Phase Estimation Sample code""

* Iterative Phase Estimation

Iterative Phase Estimation for Basic Measurement Feedback targets by KPMG Australia.

Runnable on targets via the L3 level QIR, using bounded loops, classical function calls at runtime, nested if conditionals, mid circuit measurement and qubit reuse. Uses approximately 150 EHCs for Quantinuum targets and runnable within 5 minutes of opening notebook.

* Iterative Phase Estimation link added

* Update README.md

* Metadata added to readme.

* Update README.md

* Update README.md

* Update README.md

* Add files via upload

* Add files via upload

* Updated with license

* Update README.md

* Update README.md

Fixed tree to blob link issue

* Update azure-quantum.sln

Added Iterative Phase Estimation to solution

* Update binder-index.md

Added Iterative Phase Estimation

* Update README.md

Fixed warnings

* Update README.md

* Update README.md

* Update README.md"
SHA:  dc16248de43ae45e26257cbdd1b190498d3b0f32,microsoft,Quantum,samples/azure-quantum/README.md,"Iterative Phase Estimation Sample (#784)

* Iterative Phase Estimation Sample code

Iterative Phase Estimation for Basic Measurement Feedback targets by KPMG. 

Runnable on targets via the L3 level QIR, using bounded loops, classical function calls at runtime, nested if conditionals, mid circuit measurement and qubit reuse. Uses approximately 150 EHCs for Quantinuum targets and runnable within 5 minutes of opening notebook.

* Revert ""Iterative Phase Estimation Sample code""

* Iterative Phase Estimation

Iterative Phase Estimation for Basic Measurement Feedback targets by KPMG Australia.

Runnable on targets via the L3 level QIR, using bounded loops, classical function calls at runtime, nested if conditionals, mid circuit measurement and qubit reuse. Uses approximately 150 EHCs for Quantinuum targets and runnable within 5 minutes of opening notebook.

* Iterative Phase Estimation link added

* Update README.md

* Metadata added to readme.

* Update README.md

* Update README.md

* Update README.md

* Add files via upload

* Add files via upload

* Updated with license

* Update README.md

* Update README.md

Fixed tree to blob link issue

* Update azure-quantum.sln

Added Iterative Phase Estimation to solution

* Update binder-index.md

Added Iterative Phase Estimation

* Update README.md

Fixed warnings

* Update README.md

* Update README.md

* Update README.md"
SHA:  dc16248de43ae45e26257cbdd1b190498d3b0f32,microsoft,Quantum,samples/azure-quantum/azure-quantum.sln,"Iterative Phase Estimation Sample (#784)

* Iterative Phase Estimation Sample code

Iterative Phase Estimation for Basic Measurement Feedback targets by KPMG. 

Runnable on targets via the L3 level QIR, using bounded loops, classical function calls at runtime, nested if conditionals, mid circuit measurement and qubit reuse. Uses approximately 150 EHCs for Quantinuum targets and runnable within 5 minutes of opening notebook.

* Revert ""Iterative Phase Estimation Sample code""

* Iterative Phase Estimation

Iterative Phase Estimation for Basic Measurement Feedback targets by KPMG Australia.

Runnable on targets via the L3 level QIR, using bounded loops, classical function calls at runtime, nested if conditionals, mid circuit measurement and qubit reuse. Uses approximately 150 EHCs for Quantinuum targets and runnable within 5 minutes of opening notebook.

* Iterative Phase Estimation link added

* Update README.md

* Metadata added to readme.

* Update README.md

* Update README.md

* Update README.md

* Add files via upload

* Add files via upload

* Updated with license

* Update README.md

* Update README.md

Fixed tree to blob link issue

* Update azure-quantum.sln

Added Iterative Phase Estimation to solution

* Update binder-index.md

Added Iterative Phase Estimation

* Update README.md

Fixed warnings

* Update README.md

* Update README.md

* Update README.md"
SHA:  dc16248de43ae45e26257cbdd1b190498d3b0f32,microsoft,Quantum,samples/azure-quantum/iterative-phase-estimation/README.md,"Iterative Phase Estimation Sample (#784)

* Iterative Phase Estimation Sample code

Iterative Phase Estimation for Basic Measurement Feedback targets by KPMG. 

Runnable on targets via the L3 level QIR, using bounded loops, classical function calls at runtime, nested if conditionals, mid circuit measurement and qubit reuse. Uses approximately 150 EHCs for Quantinuum targets and runnable within 5 minutes of opening notebook.

* Revert ""Iterative Phase Estimation Sample code""

* Iterative Phase Estimation

Iterative Phase Estimation for Basic Measurement Feedback targets by KPMG Australia.

Runnable on targets via the L3 level QIR, using bounded loops, classical function calls at runtime, nested if conditionals, mid circuit measurement and qubit reuse. Uses approximately 150 EHCs for Quantinuum targets and runnable within 5 minutes of opening notebook.

* Iterative Phase Estimation link added

* Update README.md

* Metadata added to readme.

* Update README.md

* Update README.md

* Update README.md

* Add files via upload

* Add files via upload

* Updated with license

* Update README.md

* Update README.md

Fixed tree to blob link issue

* Update azure-quantum.sln

Added Iterative Phase Estimation to solution

* Update binder-index.md

Added Iterative Phase Estimation

* Update README.md

Fixed warnings

* Update README.md

* Update README.md

* Update README.md"
SHA:  dc16248de43ae45e26257cbdd1b190498d3b0f32,microsoft,Quantum,samples/azure-quantum/iterative-phase-estimation/iterative-phase-estimation.csproj,"Iterative Phase Estimation Sample (#784)

* Iterative Phase Estimation Sample code

Iterative Phase Estimation for Basic Measurement Feedback targets by KPMG. 

Runnable on targets via the L3 level QIR, using bounded loops, classical function calls at runtime, nested if conditionals, mid circuit measurement and qubit reuse. Uses approximately 150 EHCs for Quantinuum targets and runnable within 5 minutes of opening notebook.

* Revert ""Iterative Phase Estimation Sample code""

* Iterative Phase Estimation

Iterative Phase Estimation for Basic Measurement Feedback targets by KPMG Australia.

Runnable on targets via the L3 level QIR, using bounded loops, classical function calls at runtime, nested if conditionals, mid circuit measurement and qubit reuse. Uses approximately 150 EHCs for Quantinuum targets and runnable within 5 minutes of opening notebook.

* Iterative Phase Estimation link added

* Update README.md

* Metadata added to readme.

* Update README.md

* Update README.md

* Update README.md

* Add files via upload

* Add files via upload

* Updated with license

* Update README.md

* Update README.md

Fixed tree to blob link issue

* Update azure-quantum.sln

Added Iterative Phase Estimation to solution

* Update binder-index.md

Added Iterative Phase Estimation

* Update README.md

Fixed warnings

* Update README.md

* Update README.md

* Update README.md"
SHA:  dc16248de43ae45e26257cbdd1b190498d3b0f32,microsoft,Quantum,samples/azure-quantum/iterative-phase-estimation/iterative-phase-estimation.ipynb,"Iterative Phase Estimation Sample (#784)

* Iterative Phase Estimation Sample code

Iterative Phase Estimation for Basic Measurement Feedback targets by KPMG. 

Runnable on targets via the L3 level QIR, using bounded loops, classical function calls at runtime, nested if conditionals, mid circuit measurement and qubit reuse. Uses approximately 150 EHCs for Quantinuum targets and runnable within 5 minutes of opening notebook.

* Revert ""Iterative Phase Estimation Sample code""

* Iterative Phase Estimation

Iterative Phase Estimation for Basic Measurement Feedback targets by KPMG Australia.

Runnable on targets via the L3 level QIR, using bounded loops, classical function calls at runtime, nested if conditionals, mid circuit measurement and qubit reuse. Uses approximately 150 EHCs for Quantinuum targets and runnable within 5 minutes of opening notebook.

* Iterative Phase Estimation link added

* Update README.md

* Metadata added to readme.

* Update README.md

* Update README.md

* Update README.md

* Add files via upload

* Add files via upload

* Updated with license

* Update README.md

* Update README.md

Fixed tree to blob link issue

* Update azure-quantum.sln

Added Iterative Phase Estimation to solution

* Update binder-index.md

Added Iterative Phase Estimation

* Update README.md

Fixed warnings

* Update README.md

* Update README.md

* Update README.md"
SHA:  dc16248de43ae45e26257cbdd1b190498d3b0f32,microsoft,Quantum,samples/azure-quantum/iterative-phase-estimation/iterative-phase-estimation.qs,"Iterative Phase Estimation Sample (#784)

* Iterative Phase Estimation Sample code

Iterative Phase Estimation for Basic Measurement Feedback targets by KPMG. 

Runnable on targets via the L3 level QIR, using bounded loops, classical function calls at runtime, nested if conditionals, mid circuit measurement and qubit reuse. Uses approximately 150 EHCs for Quantinuum targets and runnable within 5 minutes of opening notebook.

* Revert ""Iterative Phase Estimation Sample code""

* Iterative Phase Estimation

Iterative Phase Estimation for Basic Measurement Feedback targets by KPMG Australia.

Runnable on targets via the L3 level QIR, using bounded loops, classical function calls at runtime, nested if conditionals, mid circuit measurement and qubit reuse. Uses approximately 150 EHCs for Quantinuum targets and runnable within 5 minutes of opening notebook.

* Iterative Phase Estimation link added

* Update README.md

* Metadata added to readme.

* Update README.md

* Update README.md

* Update README.md

* Add files via upload

* Add files via upload

* Updated with license

* Update README.md

* Update README.md

Fixed tree to blob link issue

* Update azure-quantum.sln

Added Iterative Phase Estimation to solution

* Update binder-index.md

Added Iterative Phase Estimation

* Update README.md

Fixed warnings

* Update README.md

* Update README.md

* Update README.md"
SHA:  b1e8dcaf98816d30bba0aa046ac8bed0e717de9c,microsoft,Quantum,samples/azure-quantum/resource-estimation/estimation-dynamics.ipynb,"RE batching (#779)

* Use batching in samples.

* Use new API for summary.

* Update application samples.

* Enable batching in Azure CLI sample.

* Advanced estimation.

* Application notebooks.

* Fix linter warning.

* Typo.

* Remove id.

* Update Dockerfile."
SHA:  b1e8dcaf98816d30bba0aa046ac8bed0e717de9c,microsoft,Quantum,samples/azure-quantum/resource-estimation/integer-factorization-with-cli/README.md,"RE batching (#779)

* Use batching in samples.

* Use new API for summary.

* Update application samples.

* Enable batching in Azure CLI sample.

* Advanced estimation.

* Application notebooks.

* Fix linter warning.

* Typo.

* Remove id.

* Update Dockerfile."
SHA:  b1e8dcaf98816d30bba0aa046ac8bed0e717de9c,microsoft,Quantum,samples/azure-quantum/resource-estimation/integer-factorization-with-cli/jobParamsBatching.json,"RE batching (#779)

* Use batching in samples.

* Use new API for summary.

* Update application samples.

* Enable batching in Azure CLI sample.

* Advanced estimation.

* Application notebooks.

* Fix linter warning.

* Typo.

* Remove id.

* Update Dockerfile."
,Qiskit,qiskit-metapackage,docs/intro_tutorial1.rst,"Remove metapackage-specific parts of documentation (#1788)

### Summary

This removes many sections of the documentation that refer to the
metapackage as a whole, the elements of the metapackage, or refer to
Terra as Terra. This is intended to be in line with the new branding
decisions around the Qiskit project.

With the current community management structure still a little up in the
air, we are (at least temporarily) removing the repository-decision
flowchart from the documentation, since this documentation will
primarily be for Qiskit Terra. The contributor flowchart, or something
similar, may end up on the landing pages of the Ecosystem documentation,
or another community hub.

<!--
闂傚倸鍊搁崐椋庣矆娓氣偓閹潡宕惰閺嬫牠鏌￠崶鈺佹瀻闁搞劍妫冮幃妤呮濞戞瑦鍠愮紓 If you do not respect this template, your pull request will be
closed.
闂傚倸鍊搁崐椋庣矆娓氣偓閹潡宕惰閺嬫牠鏌￠崶鈺佹瀻闁搞劍妫冮幃妤呮濞戞瑦鍠愮紓 Your pull request title should be short detailed and understandable
for all.
闂傚倸鍊搁崐椋庣矆娓氣偓閹潡宕惰閺嬫牠鏌￠崶鈺佹瀻闁搞劍妫冮幃妤呮濞戞瑦鍠愮紓 Also, please add it in the CHANGELOG file under Unreleased section.
闂傚倸鍊搁崐椋庣矆娓氣偓閹潡宕惰閺嬫牠鏌￠崶鈺佹瀻闁搞劍妫冮幃妤呮濞戞瑦鍠愮紓 If your pull request fixes an open issue, please link to the issue.

闂 I have added the tests to cover my changes.
闂 I have updated the documentation accordingly.
闂 I have read the CONTRIBUTING document.
-->


### Details and comments

I've left references to ""Terra"" in place, because those should still
logically be removed as part of the general migration in naming within
the Terra repository. I've also left the build processes in place that
`git clone` Terra and the tutorials; we need those to continue having a
working docs build in this repo. They'll get modified as these files get
merge to Terra as well, but they need to stay alive here.

One of the notable removals is the API docs links to Aer and IBMQ from
the main page, since as of the deployed metapackage version (0.44),
those are no longer part of the metapackage.

Fix #1787.
Fix #1778 - mostly; the version logic is _way_ stripped down, and will
now automatically work on Terra at least as much as we need when the
files are merged.
Fix #1667 
Fix #1643"
,Qiskit,qiskit-metapackage,requirements-dev.txt,"Add back tweedledum for Grover tutorial (#1757)

https://qiskit.org/documentation/tutorials/algorithms/07_grover_examples.html
is currently missing its output.

We set `QISKIT_DOCS_BUILD_TUTORIALS` in our docs publishing. So it
should be sufficient to only update this repository to fix the problem."
,Qiskit,qiskit-tutorials,tutorials/circuits/3_summary_of_quantum_operations.ipynb,"Fix unit sphere notation in 3_summary_of_quantum_operations.ipynb (#1493)

Change the unit sphere notation to $\\mathbb{S}^2$

Co-authored-by: Xueyan Niu <63600514+niuxueyan@users.noreply.github.com>"
,Qiskit,qiskit-tutorials,tutorials/circuits_advanced/02_operators_overview.ipynb,"Fixed a code typo in 02_operators_overview.ipynb (#1231)

<!--
闂傚倸鍊搁崐椋庣矆娓氣偓閹潡宕惰閺嬫牠鏌￠崶鈺佹瀻闁搞劍妫冮幃妤呮濞戞瑦鍠愮紓 If you do not respect this template, your pull request will be
closed.
闂傚倸鍊搁崐椋庣矆娓氣偓閹潡宕惰閺嬫牠鏌￠崶鈺佹瀻闁搞劍妫冮幃妤呮濞戞瑦鍠愮紓 Your pull request title should be short detailed and understandable
for all.
闂傚倸鍊搁崐椋庣矆娓氣偓閹潡宕惰閺嬫牠鏌￠崶鈺佹瀻闁搞劍妫冮幃妤呮濞戞瑦鍠愮紓 Also, please add it in the CHANGELOG file under Unreleased section.
闂傚倸鍊搁崐椋庣矆娓氣偓閹潡宕惰閺嬫牠鏌￠崶鈺佹瀻闁搞劍妫冮幃妤呮濞戞瑦鍠愮紓 If your pull request fixes an open issue, please link to the issue.

闂 I have added the tests to cover my changes.
闂 I have updated the documentation accordingly.
闂 I have read the CONTRIBUTING document.
-->

### Summary
Fix a typo, in cell with description ""# Compose YX in front of the
previous operator"". The code compose XZ in front of the previous
operator, while it should be YX.


### Details and comments
`op.compose(XZ, qargs=[0, 2], front=True)` is changed with
`op.compose(YX, qargs=[0, 2], front=True)`, and add the correct output.

---------

Co-authored-by: Eric Arellano <14852634+Eric-Arellano@users.noreply.github.com>"
,Qiskit,qiskit-tutorials,tutorials/circuits/2_plotting_data_in_qiskit.ipynb,"Closes #1189 Replacing 'state matrix' by 'density matrix' (#1196)

<!--
闂傚倸鍊搁崐椋庣矆娓氣偓閹潡宕惰閺嬫牠鏌￠崶鈺佹瀻闁搞劍妫冮幃妤呮濞戞瑦鍠愮紓 If you do not respect this template, your pull request will be
closed.
闂傚倸鍊搁崐椋庣矆娓氣偓閹潡宕惰閺嬫牠鏌￠崶鈺佹瀻闁搞劍妫冮幃妤呮濞戞瑦鍠愮紓 Your pull request title should be short detailed and understandable
for all.
闂傚倸鍊搁崐椋庣矆娓氣偓閹潡宕惰閺嬫牠鏌￠崶鈺佹瀻闁搞劍妫冮幃妤呮濞戞瑦鍠愮紓 Also, please add it in the CHANGELOG file under Unreleased section.
闂傚倸鍊搁崐椋庣矆娓氣偓閹潡宕惰閺嬫牠鏌￠崶鈺佹瀻闁搞劍妫冮幃妤呮濞戞瑦鍠愮紓 If your pull request fixes an open issue, please link to the issue.

闂 I have added the tests to cover my changes.
闂 I have updated the documentation accordingly.
闂 I have read the CONTRIBUTING document.
-->

### Summary
As described in issue #1189, ""state matrix"" has been replaced by
""density matrix"" in `plot_state_city` and
`plot_state_hinton` fotutorials/circuits/2_plotting_data_in_qiskit.html.
Additionally I have also changed it at other plot functions.


### Details and comments
""State matrix"" has a different physical meaning and doesn't go with the
definition given in the documentation. Hence ""density matrix"" seems like
a better option to use instead of ""state matrix"".

Co-authored-by: Eric Arellano <14852634+Eric-Arellano@users.noreply.github.com>"
,Qiskit,qiskit-tutorials,tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb,"Clarify misleading description of a layer of operations. (#1165)

<!--
闂傚倸鍊搁崐椋庣矆娓氣偓閹潡宕惰閺嬫牠鏌￠崶鈺佹瀻闁搞劍妫冮幃妤呮濞戞瑦鍠愮紓 If you do not respect this template, your pull request will be
closed.
闂傚倸鍊搁崐椋庣矆娓氣偓閹潡宕惰閺嬫牠鏌￠崶鈺佹瀻闁搞劍妫冮幃妤呮濞戞瑦鍠愮紓 Your pull request title should be short detailed and understandable
for all.
闂傚倸鍊搁崐椋庣矆娓氣偓閹潡宕惰閺嬫牠鏌￠崶鈺佹瀻闁搞劍妫冮幃妤呮濞戞瑦鍠愮紓 Also, please add it in the CHANGELOG file under Unreleased section.
闂傚倸鍊搁崐椋庣矆娓氣偓閹潡宕惰閺嬫牠鏌￠崶鈺佹瀻闁搞劍妫冮幃妤呮濞戞瑦鍠愮紓 If your pull request fixes an open issue, please link to the issue.

闂 I have added the tests to cover my changes.
闂 I have updated the documentation accordingly.
闂 I have read the CONTRIBUTING document.
-->

### Summary
Fixing layer description in ""Implementing a BasicMapper Pass""


### Details and comments
Original sentence stated ""each layer is a group of operations that does
not act on independent qubits, so in theory all operations in a layer
can be done independently"", which is incorrect. Every layer is a group
of operations specifically acting on separate qubits each. The new
sentence clarifies that with ""each layer is a group of operations acting
on independent qubits...""

Co-authored-by: Eric Arellano <14852634+Eric-Arellano@users.noreply.github.com>"
,Qiskit,qiskit-tutorials,tutorials/algorithms/09_IQPE.ipynb,"Improves IPE Algorithm tutorial (#1484)

<!--
闂傚倸鍊搁崐椋庣矆娓氣偓閹潡宕惰閺嬫牠鏌￠崶鈺佹瀻闁搞劍妫冮幃妤呮濞戞瑦鍠愮紓 If you do not respect this template, your pull request will be
closed.
闂傚倸鍊搁崐椋庣矆娓氣偓閹潡宕惰閺嬫牠鏌￠崶鈺佹瀻闁搞劍妫冮幃妤呮濞戞瑦鍠愮紓 Your pull request title should be short detailed and understandable
for all.
闂傚倸鍊搁崐椋庣矆娓氣偓閹潡宕惰閺嬫牠鏌￠崶鈺佹瀻闁搞劍妫冮幃妤呮濞戞瑦鍠愮紓 If your pull request fixes an open issue, please link to the issue.

闂 I have added the tests to cover my changes.
闂 I have updated the documentation accordingly.
闂 I have read the CONTRIBUTING document.
-->

### Summary
This PR will improve
[tutorials/algorithms/09_IQPE.ipynb](https://github.com/Qiskit/qiskit-tutorials/blob/master/tutorials/algorithms/09_IQPE.ipynb)


### Details and comments
fixes #1410
Part of #1401

---------

Co-authored-by: mergify[bot] <37929162+mergify[bot]@users.noreply.github.com>"
,Qiskit,qiskit-tutorials,tutorials/algorithms/06_grover.ipynb,"Clarification of scope of optimal_num_iterations. (#1475)

<!--
闂傚倸鍊搁崐椋庣矆娓氣偓閹潡宕惰閺嬫牠鏌￠崶鈺佹瀻闁搞劍妫冮幃妤呮濞戞瑦鍠愮紓 If you do not respect this template, your pull request will be
closed.
闂傚倸鍊搁崐椋庣矆娓氣偓閹潡宕惰閺嬫牠鏌￠崶鈺佹瀻闁搞劍妫冮幃妤呮濞戞瑦鍠愮紓 Your pull request title should be short detailed and understandable
for all.
闂傚倸鍊搁崐椋庣矆娓氣偓閹潡宕惰閺嬫牠鏌￠崶鈺佹瀻闁搞劍妫冮幃妤呮濞戞瑦鍠愮紓 If your pull request fixes an open issue, please link to the issue.

闂 I have added the tests to cover my changes.
闂 I have updated the documentation accordingly.
闂 I have read the CONTRIBUTING document.
-->

### Summary

Quick change to Grover's Algorithm tutorial to clarify that
`optimal_num_iterations` is designed for the uniform superposition and
not general state preparations.

### Details and comments

Change was inspired by [this Quantum Computing StackExchange
question](https://quantumcomputing.stackexchange.com/questions/32951/find-the-number-of-iterations-for-amplitude-amplification-to-get-the-correct-sta).

Co-authored-by: mergify[bot] <37929162+mergify[bot]@users.noreply.github.com>"
,PennyLaneAI,pennylane,pennylane/_qubit_device.py,"Eigvals are floats (#5607)

**Context:**
Most eigvals are floats, but specifically for X, Y, Z and Hadamard, they
have been (1, -1). This can make trouble - for example, it caused an
issue with JAX-JIT, because it doesn't know what dtype to anticipate
coming from a sampled observable.

**Description of the Change:**
Main change here is changing eigvals to (1.0, -1.0) so that all
observables have the same dtype for eigenvalues.
There is still some special handling for X, Y, Z and Hadamard, because
it makes things JIT compatible for those operators, but it now pulls
from the `op.eigvals()` property and returns floats.

**Benefits:**

- Sampling of observables is more consistent in how it is processed and
what dtype is returned
- JAX-JIT with samples and an observable works now, see linked issue
below

**Possible Drawbacks:**
If people were doing checks for `int`, or otherwise assuming they would
get integers when returning fx. `qml.sample(qml.X(0))`, this will be a
breaking change for them.

**Related GitHub Issues:**
#5369

---------

Co-authored-by: Mudit Pandey <mudit.pandey@xanadu.ai>
Co-authored-by: Astral Cai <astral.cai@xanadu.ai>
Co-authored-by: Vincent Michaud-Rioux <vincentm@nanoacademic.com>
Co-authored-by: David Wierichs <david.wierichs@xanadu.ai>
Co-authored-by: Thomas R. Bromley <49409390+trbromley@users.noreply.github.com>"
,PennyLaneAI,pennylane,pennylane/measurements/sample.py,"Eigvals are floats (#5607)

**Context:**
Most eigvals are floats, but specifically for X, Y, Z and Hadamard, they
have been (1, -1). This can make trouble - for example, it caused an
issue with JAX-JIT, because it doesn't know what dtype to anticipate
coming from a sampled observable.

**Description of the Change:**
Main change here is changing eigvals to (1.0, -1.0) so that all
observables have the same dtype for eigenvalues.
There is still some special handling for X, Y, Z and Hadamard, because
it makes things JIT compatible for those operators, but it now pulls
from the `op.eigvals()` property and returns floats.

**Benefits:**

- Sampling of observables is more consistent in how it is processed and
what dtype is returned
- JAX-JIT with samples and an observable works now, see linked issue
below

**Possible Drawbacks:**
If people were doing checks for `int`, or otherwise assuming they would
get integers when returning fx. `qml.sample(qml.X(0))`, this will be a
breaking change for them.

**Related GitHub Issues:**
#5369

---------

Co-authored-by: Mudit Pandey <mudit.pandey@xanadu.ai>
Co-authored-by: Astral Cai <astral.cai@xanadu.ai>
Co-authored-by: Vincent Michaud-Rioux <vincentm@nanoacademic.com>
Co-authored-by: David Wierichs <david.wierichs@xanadu.ai>
Co-authored-by: Thomas R. Bromley <49409390+trbromley@users.noreply.github.com>"
,PennyLaneAI,pennylane,pennylane/utils.py,"Eigvals are floats (#5607)

**Context:**
Most eigvals are floats, but specifically for X, Y, Z and Hadamard, they
have been (1, -1). This can make trouble - for example, it caused an
issue with JAX-JIT, because it doesn't know what dtype to anticipate
coming from a sampled observable.

**Description of the Change:**
Main change here is changing eigvals to (1.0, -1.0) so that all
observables have the same dtype for eigenvalues.
There is still some special handling for X, Y, Z and Hadamard, because
it makes things JIT compatible for those operators, but it now pulls
from the `op.eigvals()` property and returns floats.

**Benefits:**

- Sampling of observables is more consistent in how it is processed and
what dtype is returned
- JAX-JIT with samples and an observable works now, see linked issue
below

**Possible Drawbacks:**
If people were doing checks for `int`, or otherwise assuming they would
get integers when returning fx. `qml.sample(qml.X(0))`, this will be a
breaking change for them.

**Related GitHub Issues:**
#5369

---------

Co-authored-by: Mudit Pandey <mudit.pandey@xanadu.ai>
Co-authored-by: Astral Cai <astral.cai@xanadu.ai>
Co-authored-by: Vincent Michaud-Rioux <vincentm@nanoacademic.com>
Co-authored-by: David Wierichs <david.wierichs@xanadu.ai>
Co-authored-by: Thomas R. Bromley <49409390+trbromley@users.noreply.github.com>"
,PennyLaneAI,pennylane,tests/interfaces/test_torch.py,"Eigvals are floats (#5607)

**Context:**
Most eigvals are floats, but specifically for X, Y, Z and Hadamard, they
have been (1, -1). This can make trouble - for example, it caused an
issue with JAX-JIT, because it doesn't know what dtype to anticipate
coming from a sampled observable.

**Description of the Change:**
Main change here is changing eigvals to (1.0, -1.0) so that all
observables have the same dtype for eigenvalues.
There is still some special handling for X, Y, Z and Hadamard, because
it makes things JIT compatible for those operators, but it now pulls
from the `op.eigvals()` property and returns floats.

**Benefits:**

- Sampling of observables is more consistent in how it is processed and
what dtype is returned
- JAX-JIT with samples and an observable works now, see linked issue
below

**Possible Drawbacks:**
If people were doing checks for `int`, or otherwise assuming they would
get integers when returning fx. `qml.sample(qml.X(0))`, this will be a
breaking change for them.

**Related GitHub Issues:**
#5369

---------

Co-authored-by: Mudit Pandey <mudit.pandey@xanadu.ai>
Co-authored-by: Astral Cai <astral.cai@xanadu.ai>
Co-authored-by: Vincent Michaud-Rioux <vincentm@nanoacademic.com>
Co-authored-by: David Wierichs <david.wierichs@xanadu.ai>
Co-authored-by: Thomas R. Bromley <49409390+trbromley@users.noreply.github.com>"
,PennyLaneAI,pennylane,tests/measurements/legacy/test_sample_legacy.py,"Eigvals are floats (#5607)

**Context:**
Most eigvals are floats, but specifically for X, Y, Z and Hadamard, they
have been (1, -1). This can make trouble - for example, it caused an
issue with JAX-JIT, because it doesn't know what dtype to anticipate
coming from a sampled observable.

**Description of the Change:**
Main change here is changing eigvals to (1.0, -1.0) so that all
observables have the same dtype for eigenvalues.
There is still some special handling for X, Y, Z and Hadamard, because
it makes things JIT compatible for those operators, but it now pulls
from the `op.eigvals()` property and returns floats.

**Benefits:**

- Sampling of observables is more consistent in how it is processed and
what dtype is returned
- JAX-JIT with samples and an observable works now, see linked issue
below

**Possible Drawbacks:**
If people were doing checks for `int`, or otherwise assuming they would
get integers when returning fx. `qml.sample(qml.X(0))`, this will be a
breaking change for them.

**Related GitHub Issues:**
#5369

---------

Co-authored-by: Mudit Pandey <mudit.pandey@xanadu.ai>
Co-authored-by: Astral Cai <astral.cai@xanadu.ai>
Co-authored-by: Vincent Michaud-Rioux <vincentm@nanoacademic.com>
Co-authored-by: David Wierichs <david.wierichs@xanadu.ai>
Co-authored-by: Thomas R. Bromley <49409390+trbromley@users.noreply.github.com>"
,PennyLaneAI,pennylane,tests/measurements/test_sample.py,"Eigvals are floats (#5607)

**Context:**
Most eigvals are floats, but specifically for X, Y, Z and Hadamard, they
have been (1, -1). This can make trouble - for example, it caused an
issue with JAX-JIT, because it doesn't know what dtype to anticipate
coming from a sampled observable.

**Description of the Change:**
Main change here is changing eigvals to (1.0, -1.0) so that all
observables have the same dtype for eigenvalues.
There is still some special handling for X, Y, Z and Hadamard, because
it makes things JIT compatible for those operators, but it now pulls
from the `op.eigvals()` property and returns floats.

**Benefits:**

- Sampling of observables is more consistent in how it is processed and
what dtype is returned
- JAX-JIT with samples and an observable works now, see linked issue
below

**Possible Drawbacks:**
If people were doing checks for `int`, or otherwise assuming they would
get integers when returning fx. `qml.sample(qml.X(0))`, this will be a
breaking change for them.

**Related GitHub Issues:**
#5369

---------

Co-authored-by: Mudit Pandey <mudit.pandey@xanadu.ai>
Co-authored-by: Astral Cai <astral.cai@xanadu.ai>
Co-authored-by: Vincent Michaud-Rioux <vincentm@nanoacademic.com>
Co-authored-by: David Wierichs <david.wierichs@xanadu.ai>
Co-authored-by: Thomas R. Bromley <49409390+trbromley@users.noreply.github.com>"
,PennyLaneAI,pennylane,tests/tape/test_qscript.py,"Eigvals are floats (#5607)

**Context:**
Most eigvals are floats, but specifically for X, Y, Z and Hadamard, they
have been (1, -1). This can make trouble - for example, it caused an
issue with JAX-JIT, because it doesn't know what dtype to anticipate
coming from a sampled observable.

**Description of the Change:**
Main change here is changing eigvals to (1.0, -1.0) so that all
observables have the same dtype for eigenvalues.
There is still some special handling for X, Y, Z and Hadamard, because
it makes things JIT compatible for those operators, but it now pulls
from the `op.eigvals()` property and returns floats.

**Benefits:**

- Sampling of observables is more consistent in how it is processed and
what dtype is returned
- JAX-JIT with samples and an observable works now, see linked issue
below

**Possible Drawbacks:**
If people were doing checks for `int`, or otherwise assuming they would
get integers when returning fx. `qml.sample(qml.X(0))`, this will be a
breaking change for them.

**Related GitHub Issues:**
#5369

---------

Co-authored-by: Mudit Pandey <mudit.pandey@xanadu.ai>
Co-authored-by: Astral Cai <astral.cai@xanadu.ai>
Co-authored-by: Vincent Michaud-Rioux <vincentm@nanoacademic.com>
Co-authored-by: David Wierichs <david.wierichs@xanadu.ai>
Co-authored-by: Thomas R. Bromley <49409390+trbromley@users.noreply.github.com>"
,PennyLaneAI,pennylane,tests/tape/test_tape.py,"Eigvals are floats (#5607)

**Context:**
Most eigvals are floats, but specifically for X, Y, Z and Hadamard, they
have been (1, -1). This can make trouble - for example, it caused an
issue with JAX-JIT, because it doesn't know what dtype to anticipate
coming from a sampled observable.

**Description of the Change:**
Main change here is changing eigvals to (1.0, -1.0) so that all
observables have the same dtype for eigenvalues.
There is still some special handling for X, Y, Z and Hadamard, because
it makes things JIT compatible for those operators, but it now pulls
from the `op.eigvals()` property and returns floats.

**Benefits:**

- Sampling of observables is more consistent in how it is processed and
what dtype is returned
- JAX-JIT with samples and an observable works now, see linked issue
below

**Possible Drawbacks:**
If people were doing checks for `int`, or otherwise assuming they would
get integers when returning fx. `qml.sample(qml.X(0))`, this will be a
breaking change for them.

**Related GitHub Issues:**
#5369

---------

Co-authored-by: Mudit Pandey <mudit.pandey@xanadu.ai>
Co-authored-by: Astral Cai <astral.cai@xanadu.ai>
Co-authored-by: Vincent Michaud-Rioux <vincentm@nanoacademic.com>
Co-authored-by: David Wierichs <david.wierichs@xanadu.ai>
Co-authored-by: Thomas R. Bromley <49409390+trbromley@users.noreply.github.com>"
,PennyLaneAI,pennylane,doc/introduction/operations.rst,"Qutrit channel depolarizing (#5502)

**Context:**
`default.qutrit.mixed` device has been added, but no channels have been
added so far, this adds the first channel to the device so that it may
be used for it's intended purpose of simulating noise.

**Description of the Change:**
Adds new channel module to `qml.ops.qutrit` package. Adding the first
qutrit channel `QutritDepolarizingChannel`.

**Benefits:**
Allows for `defualt.qutrit.mixed` to simulate depolarizing noise. Makes
`default.qutrit.mixed`, much more useful.

**Possible Drawbacks:**
N/A

**Related GitHub Issues:**
N/A

---------

Co-authored-by: Gabriel Bottrill <bottrill@student.ubc.ca>
Co-authored-by: Olivia Di Matteo <2068515+glassnotes@users.noreply.github.com>"
,PennyLaneAI,pennylane,doc/releases/changelog-dev.md,"Qutrit channel depolarizing (#5502)

**Context:**
`default.qutrit.mixed` device has been added, but no channels have been
added so far, this adds the first channel to the device so that it may
be used for it's intended purpose of simulating noise.

**Description of the Change:**
Adds new channel module to `qml.ops.qutrit` package. Adding the first
qutrit channel `QutritDepolarizingChannel`.

**Benefits:**
Allows for `defualt.qutrit.mixed` to simulate depolarizing noise. Makes
`default.qutrit.mixed`, much more useful.

**Possible Drawbacks:**
N/A

**Related GitHub Issues:**
N/A

---------

Co-authored-by: Gabriel Bottrill <bottrill@student.ubc.ca>
Co-authored-by: Olivia Di Matteo <2068515+glassnotes@users.noreply.github.com>"
,PennyLaneAI,pennylane,pennylane/devices/default_qutrit_mixed.py,"Qutrit channel depolarizing (#5502)

**Context:**
`default.qutrit.mixed` device has been added, but no channels have been
added so far, this adds the first channel to the device so that it may
be used for it's intended purpose of simulating noise.

**Description of the Change:**
Adds new channel module to `qml.ops.qutrit` package. Adding the first
qutrit channel `QutritDepolarizingChannel`.

**Benefits:**
Allows for `defualt.qutrit.mixed` to simulate depolarizing noise. Makes
`default.qutrit.mixed`, much more useful.

**Possible Drawbacks:**
N/A

**Related GitHub Issues:**
N/A

---------

Co-authored-by: Gabriel Bottrill <bottrill@student.ubc.ca>
Co-authored-by: Olivia Di Matteo <2068515+glassnotes@users.noreply.github.com>"
,PennyLaneAI,pennylane,pennylane/ops/__init__.py,"Qutrit channel depolarizing (#5502)

**Context:**
`default.qutrit.mixed` device has been added, but no channels have been
added so far, this adds the first channel to the device so that it may
be used for it's intended purpose of simulating noise.

**Description of the Change:**
Adds new channel module to `qml.ops.qutrit` package. Adding the first
qutrit channel `QutritDepolarizingChannel`.

**Benefits:**
Allows for `defualt.qutrit.mixed` to simulate depolarizing noise. Makes
`default.qutrit.mixed`, much more useful.

**Possible Drawbacks:**
N/A

**Related GitHub Issues:**
N/A

---------

Co-authored-by: Gabriel Bottrill <bottrill@student.ubc.ca>
Co-authored-by: Olivia Di Matteo <2068515+glassnotes@users.noreply.github.com>"
,PennyLaneAI,pennylane,pennylane/ops/qutrit/__init__.py,"Qutrit channel depolarizing (#5502)

**Context:**
`default.qutrit.mixed` device has been added, but no channels have been
added so far, this adds the first channel to the device so that it may
be used for it's intended purpose of simulating noise.

**Description of the Change:**
Adds new channel module to `qml.ops.qutrit` package. Adding the first
qutrit channel `QutritDepolarizingChannel`.

**Benefits:**
Allows for `defualt.qutrit.mixed` to simulate depolarizing noise. Makes
`default.qutrit.mixed`, much more useful.

**Possible Drawbacks:**
N/A

**Related GitHub Issues:**
N/A

---------

Co-authored-by: Gabriel Bottrill <bottrill@student.ubc.ca>
Co-authored-by: Olivia Di Matteo <2068515+glassnotes@users.noreply.github.com>"
,PennyLaneAI,pennylane,pennylane/ops/qutrit/channel.py,"Qutrit channel depolarizing (#5502)

**Context:**
`default.qutrit.mixed` device has been added, but no channels have been
added so far, this adds the first channel to the device so that it may
be used for it's intended purpose of simulating noise.

**Description of the Change:**
Adds new channel module to `qml.ops.qutrit` package. Adding the first
qutrit channel `QutritDepolarizingChannel`.

**Benefits:**
Allows for `defualt.qutrit.mixed` to simulate depolarizing noise. Makes
`default.qutrit.mixed`, much more useful.

**Possible Drawbacks:**
N/A

**Related GitHub Issues:**
N/A

---------

Co-authored-by: Gabriel Bottrill <bottrill@student.ubc.ca>
Co-authored-by: Olivia Di Matteo <2068515+glassnotes@users.noreply.github.com>"
,PennyLaneAI,pennylane,tests/devices/qutrit_mixed/test_qutrit_mixed_preprocessing.py,"Qutrit channel depolarizing (#5502)

**Context:**
`default.qutrit.mixed` device has been added, but no channels have been
added so far, this adds the first channel to the device so that it may
be used for it's intended purpose of simulating noise.

**Description of the Change:**
Adds new channel module to `qml.ops.qutrit` package. Adding the first
qutrit channel `QutritDepolarizingChannel`.

**Benefits:**
Allows for `defualt.qutrit.mixed` to simulate depolarizing noise. Makes
`default.qutrit.mixed`, much more useful.

**Possible Drawbacks:**
N/A

**Related GitHub Issues:**
N/A

---------

Co-authored-by: Gabriel Bottrill <bottrill@student.ubc.ca>
Co-authored-by: Olivia Di Matteo <2068515+glassnotes@users.noreply.github.com>"
,PennyLaneAI,pennylane,tests/ops/qutrit/test_qutrit_channel_ops.py,"Qutrit channel depolarizing (#5502)

**Context:**
`default.qutrit.mixed` device has been added, but no channels have been
added so far, this adds the first channel to the device so that it may
be used for it's intended purpose of simulating noise.

**Description of the Change:**
Adds new channel module to `qml.ops.qutrit` package. Adding the first
qutrit channel `QutritDepolarizingChannel`.

**Benefits:**
Allows for `defualt.qutrit.mixed` to simulate depolarizing noise. Makes
`default.qutrit.mixed`, much more useful.

**Possible Drawbacks:**
N/A

**Related GitHub Issues:**
N/A

---------

Co-authored-by: Gabriel Bottrill <bottrill@student.ubc.ca>
Co-authored-by: Olivia Di Matteo <2068515+glassnotes@users.noreply.github.com>"
,PennyLaneAI,pennylane,doc/releases/changelog-dev.md,"Add kwargs for equal functions (#5668)

### Before submitting

Please complete the following checklist when submitting a PR:

- [x] All new features must include a unit test.
If you've fixed a bug or added code that should be tested, add a test to
the
      test directory!

- [x] All new functions and code must be clearly commented and
documented.
If you do make documentation changes, make sure that the docs build and
      render correctly by running `make docs`.

- [x] Ensure that the test suite passes, by running `make test`.

- [x] Add a new entry to the `doc/releases/changelog-dev.md` file,
summarizing the
      change, and including a link back to the PR.

- [x] The PennyLane source code conforms to
      [PEP8 standards](https://www.python.org/dev/peps/pep-0008/).
We check all of our code against [Pylint](https://www.pylint.org/).
      To lint modified files, simply `pip install pylint`, and then
      run `pylint pennylane/path/to/file.py`.

When all the above are checked, delete everything above the dashed
line and fill in the pull request template.


------------------------------------------------------------------------------------------------------------

**Context:**
The kwargs (`check_interface`, `check_trainability`, `atol` and `rtol`)
were not available for `_equal_pow`, `_equal_adjoint`, `_equal_exp` and
`_equal_sprod`, which are overrides of `qml.equal`. Therefore,
comparisons that allowed for interfacing and numerical errors were not
possible.

**Description of the Change:**
Changed to allow kwargs to be used in override of `qml.equal`.

**Benefits:**
The following interfaces and comparisons with tolerance for numerical
errors are possible.

```
>>> op1 = qml.RX(1.2, wires=0)
>>> op2 = qml.RX(1.2 + 1e-4, wires=0)
>>> qml.equal(op1 **2, op2 ** 2, atol=1e-3)
True
>>> qml.equal(op1 **2, op2 ** 2, atol=1e-6)
False
>>> qml.equal(qml.adjoint(op1), qml.adjoint(op2), atol=1e-3)
True
>>> qml.equal(qml.adjoint(op1), qml.adjoint(op2), atol=1e-6)
False
>>> op3 = qml.exp( qml.s_prod(2j, qml.X(0)))
>>> op4 = qml.exp(qml.s_prod(qml.numpy.array(2j), qml.X(0)))
>>> qml.equal(op3, op4, check_interface=True)
False
>>> qml.equal(op3, op4, check_interface=False)
True
```

**Possible Drawbacks:**

**Related GitHub Issues:**
https://github.com/PennyLaneAI/pennylane/issues/5408

---------

Co-authored-by: Christina Lee <christina@xanadu.ai>"
,PennyLaneAI,pennylane,tests/ops/functions/test_equal.py,"Add kwargs for equal functions (#5668)

### Before submitting

Please complete the following checklist when submitting a PR:

- [x] All new features must include a unit test.
If you've fixed a bug or added code that should be tested, add a test to
the
      test directory!

- [x] All new functions and code must be clearly commented and
documented.
If you do make documentation changes, make sure that the docs build and
      render correctly by running `make docs`.

- [x] Ensure that the test suite passes, by running `make test`.

- [x] Add a new entry to the `doc/releases/changelog-dev.md` file,
summarizing the
      change, and including a link back to the PR.

- [x] The PennyLane source code conforms to
      [PEP8 standards](https://www.python.org/dev/peps/pep-0008/).
We check all of our code against [Pylint](https://www.pylint.org/).
      To lint modified files, simply `pip install pylint`, and then
      run `pylint pennylane/path/to/file.py`.

When all the above are checked, delete everything above the dashed
line and fill in the pull request template.


------------------------------------------------------------------------------------------------------------

**Context:**
The kwargs (`check_interface`, `check_trainability`, `atol` and `rtol`)
were not available for `_equal_pow`, `_equal_adjoint`, `_equal_exp` and
`_equal_sprod`, which are overrides of `qml.equal`. Therefore,
comparisons that allowed for interfacing and numerical errors were not
possible.

**Description of the Change:**
Changed to allow kwargs to be used in override of `qml.equal`.

**Benefits:**
The following interfaces and comparisons with tolerance for numerical
errors are possible.

```
>>> op1 = qml.RX(1.2, wires=0)
>>> op2 = qml.RX(1.2 + 1e-4, wires=0)
>>> qml.equal(op1 **2, op2 ** 2, atol=1e-3)
True
>>> qml.equal(op1 **2, op2 ** 2, atol=1e-6)
False
>>> qml.equal(qml.adjoint(op1), qml.adjoint(op2), atol=1e-3)
True
>>> qml.equal(qml.adjoint(op1), qml.adjoint(op2), atol=1e-6)
False
>>> op3 = qml.exp( qml.s_prod(2j, qml.X(0)))
>>> op4 = qml.exp(qml.s_prod(qml.numpy.array(2j), qml.X(0)))
>>> qml.equal(op3, op4, check_interface=True)
False
>>> qml.equal(op3, op4, check_interface=False)
True
```

**Possible Drawbacks:**

**Related GitHub Issues:**
https://github.com/PennyLaneAI/pennylane/issues/5408

---------

Co-authored-by: Christina Lee <christina@xanadu.ai>"
,PennyLaneAI,pennylane,tests/ops/functions/test_simplify.py,"Add kwargs for equal functions (#5668)

### Before submitting

Please complete the following checklist when submitting a PR:

- [x] All new features must include a unit test.
If you've fixed a bug or added code that should be tested, add a test to
the
      test directory!

- [x] All new functions and code must be clearly commented and
documented.
If you do make documentation changes, make sure that the docs build and
      render correctly by running `make docs`.

- [x] Ensure that the test suite passes, by running `make test`.

- [x] Add a new entry to the `doc/releases/changelog-dev.md` file,
summarizing the
      change, and including a link back to the PR.

- [x] The PennyLane source code conforms to
      [PEP8 standards](https://www.python.org/dev/peps/pep-0008/).
We check all of our code against [Pylint](https://www.pylint.org/).
      To lint modified files, simply `pip install pylint`, and then
      run `pylint pennylane/path/to/file.py`.

When all the above are checked, delete everything above the dashed
line and fill in the pull request template.


------------------------------------------------------------------------------------------------------------

**Context:**
The kwargs (`check_interface`, `check_trainability`, `atol` and `rtol`)
were not available for `_equal_pow`, `_equal_adjoint`, `_equal_exp` and
`_equal_sprod`, which are overrides of `qml.equal`. Therefore,
comparisons that allowed for interfacing and numerical errors were not
possible.

**Description of the Change:**
Changed to allow kwargs to be used in override of `qml.equal`.

**Benefits:**
The following interfaces and comparisons with tolerance for numerical
errors are possible.

```
>>> op1 = qml.RX(1.2, wires=0)
>>> op2 = qml.RX(1.2 + 1e-4, wires=0)
>>> qml.equal(op1 **2, op2 ** 2, atol=1e-3)
True
>>> qml.equal(op1 **2, op2 ** 2, atol=1e-6)
False
>>> qml.equal(qml.adjoint(op1), qml.adjoint(op2), atol=1e-3)
True
>>> qml.equal(qml.adjoint(op1), qml.adjoint(op2), atol=1e-6)
False
>>> op3 = qml.exp( qml.s_prod(2j, qml.X(0)))
>>> op4 = qml.exp(qml.s_prod(qml.numpy.array(2j), qml.X(0)))
>>> qml.equal(op3, op4, check_interface=True)
False
>>> qml.equal(op3, op4, check_interface=False)
True
```

**Possible Drawbacks:**

**Related GitHub Issues:**
https://github.com/PennyLaneAI/pennylane/issues/5408

---------

Co-authored-by: Christina Lee <christina@xanadu.ai>"
,PennyLaneAI,pennylane,doc/releases/changelog-dev.md,"`transforms.insert`: Update docs, improve decomposition (#5681)

**Context:**
The first example in the docs of `qml.transforms.insert` was reported to
not be working
[here](https://discuss.pennylane.ai/t/qml-device-error-with-qiskit-aer/4556/9).
Other examples also do not work.

**Description of the Change:**
This PR changes the docs examples to work.

It also replicates the change in #5424 to use
`devices.preprocess.decompose` instead of `tape.expand`, adding support
for non-commuting measurements (which is unrelated to the transform
anyways), and removing the need for a custom error to be raised.

**Benefits:**
Docs examples work.
Non-commuting measurements support.

**Possible Drawbacks:**
Similar to #5424, this introduces cross-dependency to the devices
module.

**Related GitHub Issues:**"
,PennyLaneAI,pennylane,pennylane/transforms/insert_ops.py,"`transforms.insert`: Update docs, improve decomposition (#5681)

**Context:**
The first example in the docs of `qml.transforms.insert` was reported to
not be working
[here](https://discuss.pennylane.ai/t/qml-device-error-with-qiskit-aer/4556/9).
Other examples also do not work.

**Description of the Change:**
This PR changes the docs examples to work.

It also replicates the change in #5424 to use
`devices.preprocess.decompose` instead of `tape.expand`, adding support
for non-commuting measurements (which is unrelated to the transform
anyways), and removing the need for a custom error to be raised.

**Benefits:**
Docs examples work.
Non-commuting measurements support.

**Possible Drawbacks:**
Similar to #5424, this introduces cross-dependency to the devices
module.

**Related GitHub Issues:**"
,PennyLaneAI,pennylane,tests/transforms/test_insert_ops.py,"`transforms.insert`: Update docs, improve decomposition (#5681)

**Context:**
The first example in the docs of `qml.transforms.insert` was reported to
not be working
[here](https://discuss.pennylane.ai/t/qml-device-error-with-qiskit-aer/4556/9).
Other examples also do not work.

**Description of the Change:**
This PR changes the docs examples to work.

It also replicates the change in #5424 to use
`devices.preprocess.decompose` instead of `tape.expand`, adding support
for non-commuting measurements (which is unrelated to the transform
anyways), and removing the need for a custom error to be raised.

**Benefits:**
Docs examples work.
Non-commuting measurements support.

**Possible Drawbacks:**
Similar to #5424, this introduces cross-dependency to the devices
module.

**Related GitHub Issues:**"
,PennyLaneAI,pennylane,doc/releases/changelog-dev.md,"Plxpr can capture operations (#5511)

**HIGHLY EXPERIMENTAL FEATURE**

**Context:**

To improve integration with catalyst, we want a way to be able to
natively capture the creation of quantum operations into an intermediate
representation. This is one of the early PR's for this experimental
push.

**Description of the Change:**

This PR adds a `PLXPR` metaclass that `Operator` uses. This allows for
the capture of all `Operator` classes into jaxpr.


```python
qml.capture.enable_plxpr()

def qfunc(a):
    qml.X(0)
    qml.IsingXX(a, wires=range(2))
    qml.ctrl(qml.adjoint(qml.X(0)), 1)

    0.5 * qml.X(0) @ qml.Y(1) + qml.Z(2)
    
jaxpr = jax.make_jaxpr(qfunc)(0)
jaxpr
```

```
{ lambda ; a:i32[]. let
    _:AbstractOperator() = PauliX[n_wires=1] 0
    _:AbstractOperator() = IsingXX[n_wires=2] a 0 1
    b:AbstractOperator() = PauliX[n_wires=1] 0
    c:AbstractOperator() = Adjoint b
    _:AbstractOperator() = Controlled[control_values=None work_wires=None] c 1
    d:AbstractOperator() = PauliX[n_wires=1] 0
    e:AbstractOperator() = SProd[id=None] 0.5 d
    f:AbstractOperator() = PauliY[n_wires=1] 1
    g:AbstractOperator() = Prod[id=None] e f
    h:AbstractOperator() = PauliZ[n_wires=1] 2
    _:AbstractOperator() = Sum[grouping_type=None id=None method=rlf] g h
  in () }
```

We can also return the jaxpr to normal pennylane qfunc behaviour via
`jax.core.eval_jaxpr`:

```python
with qml.queuing.AnnotatedQueue() as q:
    jax.core.eval_jaxpr(jaxpr.jaxpr, jaxpr.consts, 0.1)
q.queue
```
```
[X(0),
 IsingXX(0.1, wires=[0, 1]),
 Controlled(Adjoint(X(0)), control_wires=[1]),
 (0.5 * X(0)) @ Y(1) + Z(2)]
```

**Benefits:**

**Possible Drawbacks:**

* Metaprogramming in python is an edge skill, and often not the best way
to solve a problem. Messing around with things like this can often have
unintended consequences down the line.

* With PLXPR, wires will be restricted to be jax-tracable friendly
labels.

**Related GitHub Issues:**

[sc-61199]

---------

Co-authored-by: dwierichs <david.wierichs@xanadu.ai>
Co-authored-by: Thomas R. Bromley <49409390+trbromley@users.noreply.github.com>
Co-authored-by: David Ittah <dime10@users.noreply.github.com>"
,PennyLaneAI,pennylane,pennylane/capture/__init__.py,"Plxpr can capture operations (#5511)

**HIGHLY EXPERIMENTAL FEATURE**

**Context:**

To improve integration with catalyst, we want a way to be able to
natively capture the creation of quantum operations into an intermediate
representation. This is one of the early PR's for this experimental
push.

**Description of the Change:**

This PR adds a `PLXPR` metaclass that `Operator` uses. This allows for
the capture of all `Operator` classes into jaxpr.


```python
qml.capture.enable_plxpr()

def qfunc(a):
    qml.X(0)
    qml.IsingXX(a, wires=range(2))
    qml.ctrl(qml.adjoint(qml.X(0)), 1)

    0.5 * qml.X(0) @ qml.Y(1) + qml.Z(2)
    
jaxpr = jax.make_jaxpr(qfunc)(0)
jaxpr
```

```
{ lambda ; a:i32[]. let
    _:AbstractOperator() = PauliX[n_wires=1] 0
    _:AbstractOperator() = IsingXX[n_wires=2] a 0 1
    b:AbstractOperator() = PauliX[n_wires=1] 0
    c:AbstractOperator() = Adjoint b
    _:AbstractOperator() = Controlled[control_values=None work_wires=None] c 1
    d:AbstractOperator() = PauliX[n_wires=1] 0
    e:AbstractOperator() = SProd[id=None] 0.5 d
    f:AbstractOperator() = PauliY[n_wires=1] 1
    g:AbstractOperator() = Prod[id=None] e f
    h:AbstractOperator() = PauliZ[n_wires=1] 2
    _:AbstractOperator() = Sum[grouping_type=None id=None method=rlf] g h
  in () }
```

We can also return the jaxpr to normal pennylane qfunc behaviour via
`jax.core.eval_jaxpr`:

```python
with qml.queuing.AnnotatedQueue() as q:
    jax.core.eval_jaxpr(jaxpr.jaxpr, jaxpr.consts, 0.1)
q.queue
```
```
[X(0),
 IsingXX(0.1, wires=[0, 1]),
 Controlled(Adjoint(X(0)), control_wires=[1]),
 (0.5 * X(0)) @ Y(1) + Z(2)]
```

**Benefits:**

**Possible Drawbacks:**

* Metaprogramming in python is an edge skill, and often not the best way
to solve a problem. Messing around with things like this can often have
unintended consequences down the line.

* With PLXPR, wires will be restricted to be jax-tracable friendly
labels.

**Related GitHub Issues:**

[sc-61199]

---------

Co-authored-by: dwierichs <david.wierichs@xanadu.ai>
Co-authored-by: Thomas R. Bromley <49409390+trbromley@users.noreply.github.com>
Co-authored-by: David Ittah <dime10@users.noreply.github.com>"
,PennyLaneAI,pennylane,pennylane/capture/capture_meta.py,"Plxpr can capture operations (#5511)

**HIGHLY EXPERIMENTAL FEATURE**

**Context:**

To improve integration with catalyst, we want a way to be able to
natively capture the creation of quantum operations into an intermediate
representation. This is one of the early PR's for this experimental
push.

**Description of the Change:**

This PR adds a `PLXPR` metaclass that `Operator` uses. This allows for
the capture of all `Operator` classes into jaxpr.


```python
qml.capture.enable_plxpr()

def qfunc(a):
    qml.X(0)
    qml.IsingXX(a, wires=range(2))
    qml.ctrl(qml.adjoint(qml.X(0)), 1)

    0.5 * qml.X(0) @ qml.Y(1) + qml.Z(2)
    
jaxpr = jax.make_jaxpr(qfunc)(0)
jaxpr
```

```
{ lambda ; a:i32[]. let
    _:AbstractOperator() = PauliX[n_wires=1] 0
    _:AbstractOperator() = IsingXX[n_wires=2] a 0 1
    b:AbstractOperator() = PauliX[n_wires=1] 0
    c:AbstractOperator() = Adjoint b
    _:AbstractOperator() = Controlled[control_values=None work_wires=None] c 1
    d:AbstractOperator() = PauliX[n_wires=1] 0
    e:AbstractOperator() = SProd[id=None] 0.5 d
    f:AbstractOperator() = PauliY[n_wires=1] 1
    g:AbstractOperator() = Prod[id=None] e f
    h:AbstractOperator() = PauliZ[n_wires=1] 2
    _:AbstractOperator() = Sum[grouping_type=None id=None method=rlf] g h
  in () }
```

We can also return the jaxpr to normal pennylane qfunc behaviour via
`jax.core.eval_jaxpr`:

```python
with qml.queuing.AnnotatedQueue() as q:
    jax.core.eval_jaxpr(jaxpr.jaxpr, jaxpr.consts, 0.1)
q.queue
```
```
[X(0),
 IsingXX(0.1, wires=[0, 1]),
 Controlled(Adjoint(X(0)), control_wires=[1]),
 (0.5 * X(0)) @ Y(1) + Z(2)]
```

**Benefits:**

**Possible Drawbacks:**

* Metaprogramming in python is an edge skill, and often not the best way
to solve a problem. Messing around with things like this can often have
unintended consequences down the line.

* With PLXPR, wires will be restricted to be jax-tracable friendly
labels.

**Related GitHub Issues:**

[sc-61199]

---------

Co-authored-by: dwierichs <david.wierichs@xanadu.ai>
Co-authored-by: Thomas R. Bromley <49409390+trbromley@users.noreply.github.com>
Co-authored-by: David Ittah <dime10@users.noreply.github.com>"
,PennyLaneAI,pennylane,pennylane/capture/primitives.py,"Plxpr can capture operations (#5511)

**HIGHLY EXPERIMENTAL FEATURE**

**Context:**

To improve integration with catalyst, we want a way to be able to
natively capture the creation of quantum operations into an intermediate
representation. This is one of the early PR's for this experimental
push.

**Description of the Change:**

This PR adds a `PLXPR` metaclass that `Operator` uses. This allows for
the capture of all `Operator` classes into jaxpr.


```python
qml.capture.enable_plxpr()

def qfunc(a):
    qml.X(0)
    qml.IsingXX(a, wires=range(2))
    qml.ctrl(qml.adjoint(qml.X(0)), 1)

    0.5 * qml.X(0) @ qml.Y(1) + qml.Z(2)
    
jaxpr = jax.make_jaxpr(qfunc)(0)
jaxpr
```

```
{ lambda ; a:i32[]. let
    _:AbstractOperator() = PauliX[n_wires=1] 0
    _:AbstractOperator() = IsingXX[n_wires=2] a 0 1
    b:AbstractOperator() = PauliX[n_wires=1] 0
    c:AbstractOperator() = Adjoint b
    _:AbstractOperator() = Controlled[control_values=None work_wires=None] c 1
    d:AbstractOperator() = PauliX[n_wires=1] 0
    e:AbstractOperator() = SProd[id=None] 0.5 d
    f:AbstractOperator() = PauliY[n_wires=1] 1
    g:AbstractOperator() = Prod[id=None] e f
    h:AbstractOperator() = PauliZ[n_wires=1] 2
    _:AbstractOperator() = Sum[grouping_type=None id=None method=rlf] g h
  in () }
```

We can also return the jaxpr to normal pennylane qfunc behaviour via
`jax.core.eval_jaxpr`:

```python
with qml.queuing.AnnotatedQueue() as q:
    jax.core.eval_jaxpr(jaxpr.jaxpr, jaxpr.consts, 0.1)
q.queue
```
```
[X(0),
 IsingXX(0.1, wires=[0, 1]),
 Controlled(Adjoint(X(0)), control_wires=[1]),
 (0.5 * X(0)) @ Y(1) + Z(2)]
```

**Benefits:**

**Possible Drawbacks:**

* Metaprogramming in python is an edge skill, and often not the best way
to solve a problem. Messing around with things like this can often have
unintended consequences down the line.

* With PLXPR, wires will be restricted to be jax-tracable friendly
labels.

**Related GitHub Issues:**

[sc-61199]

---------

Co-authored-by: dwierichs <david.wierichs@xanadu.ai>
Co-authored-by: Thomas R. Bromley <49409390+trbromley@users.noreply.github.com>
Co-authored-by: David Ittah <dime10@users.noreply.github.com>"
,PennyLaneAI,pennylane,pennylane/operation.py,"Plxpr can capture operations (#5511)

**HIGHLY EXPERIMENTAL FEATURE**

**Context:**

To improve integration with catalyst, we want a way to be able to
natively capture the creation of quantum operations into an intermediate
representation. This is one of the early PR's for this experimental
push.

**Description of the Change:**

This PR adds a `PLXPR` metaclass that `Operator` uses. This allows for
the capture of all `Operator` classes into jaxpr.


```python
qml.capture.enable_plxpr()

def qfunc(a):
    qml.X(0)
    qml.IsingXX(a, wires=range(2))
    qml.ctrl(qml.adjoint(qml.X(0)), 1)

    0.5 * qml.X(0) @ qml.Y(1) + qml.Z(2)
    
jaxpr = jax.make_jaxpr(qfunc)(0)
jaxpr
```

```
{ lambda ; a:i32[]. let
    _:AbstractOperator() = PauliX[n_wires=1] 0
    _:AbstractOperator() = IsingXX[n_wires=2] a 0 1
    b:AbstractOperator() = PauliX[n_wires=1] 0
    c:AbstractOperator() = Adjoint b
    _:AbstractOperator() = Controlled[control_values=None work_wires=None] c 1
    d:AbstractOperator() = PauliX[n_wires=1] 0
    e:AbstractOperator() = SProd[id=None] 0.5 d
    f:AbstractOperator() = PauliY[n_wires=1] 1
    g:AbstractOperator() = Prod[id=None] e f
    h:AbstractOperator() = PauliZ[n_wires=1] 2
    _:AbstractOperator() = Sum[grouping_type=None id=None method=rlf] g h
  in () }
```

We can also return the jaxpr to normal pennylane qfunc behaviour via
`jax.core.eval_jaxpr`:

```python
with qml.queuing.AnnotatedQueue() as q:
    jax.core.eval_jaxpr(jaxpr.jaxpr, jaxpr.consts, 0.1)
q.queue
```
```
[X(0),
 IsingXX(0.1, wires=[0, 1]),
 Controlled(Adjoint(X(0)), control_wires=[1]),
 (0.5 * X(0)) @ Y(1) + Z(2)]
```

**Benefits:**

**Possible Drawbacks:**

* Metaprogramming in python is an edge skill, and often not the best way
to solve a problem. Messing around with things like this can often have
unintended consequences down the line.

* With PLXPR, wires will be restricted to be jax-tracable friendly
labels.

**Related GitHub Issues:**

[sc-61199]

---------

Co-authored-by: dwierichs <david.wierichs@xanadu.ai>
Co-authored-by: Thomas R. Bromley <49409390+trbromley@users.noreply.github.com>
Co-authored-by: David Ittah <dime10@users.noreply.github.com>"
,PennyLaneAI,pennylane,pennylane/ops/op_math/adjoint.py,"Plxpr can capture operations (#5511)

**HIGHLY EXPERIMENTAL FEATURE**

**Context:**

To improve integration with catalyst, we want a way to be able to
natively capture the creation of quantum operations into an intermediate
representation. This is one of the early PR's for this experimental
push.

**Description of the Change:**

This PR adds a `PLXPR` metaclass that `Operator` uses. This allows for
the capture of all `Operator` classes into jaxpr.


```python
qml.capture.enable_plxpr()

def qfunc(a):
    qml.X(0)
    qml.IsingXX(a, wires=range(2))
    qml.ctrl(qml.adjoint(qml.X(0)), 1)

    0.5 * qml.X(0) @ qml.Y(1) + qml.Z(2)
    
jaxpr = jax.make_jaxpr(qfunc)(0)
jaxpr
```

```
{ lambda ; a:i32[]. let
    _:AbstractOperator() = PauliX[n_wires=1] 0
    _:AbstractOperator() = IsingXX[n_wires=2] a 0 1
    b:AbstractOperator() = PauliX[n_wires=1] 0
    c:AbstractOperator() = Adjoint b
    _:AbstractOperator() = Controlled[control_values=None work_wires=None] c 1
    d:AbstractOperator() = PauliX[n_wires=1] 0
    e:AbstractOperator() = SProd[id=None] 0.5 d
    f:AbstractOperator() = PauliY[n_wires=1] 1
    g:AbstractOperator() = Prod[id=None] e f
    h:AbstractOperator() = PauliZ[n_wires=1] 2
    _:AbstractOperator() = Sum[grouping_type=None id=None method=rlf] g h
  in () }
```

We can also return the jaxpr to normal pennylane qfunc behaviour via
`jax.core.eval_jaxpr`:

```python
with qml.queuing.AnnotatedQueue() as q:
    jax.core.eval_jaxpr(jaxpr.jaxpr, jaxpr.consts, 0.1)
q.queue
```
```
[X(0),
 IsingXX(0.1, wires=[0, 1]),
 Controlled(Adjoint(X(0)), control_wires=[1]),
 (0.5 * X(0)) @ Y(1) + Z(2)]
```

**Benefits:**

**Possible Drawbacks:**

* Metaprogramming in python is an edge skill, and often not the best way
to solve a problem. Messing around with things like this can often have
unintended consequences down the line.

* With PLXPR, wires will be restricted to be jax-tracable friendly
labels.

**Related GitHub Issues:**

[sc-61199]

---------

Co-authored-by: dwierichs <david.wierichs@xanadu.ai>
Co-authored-by: Thomas R. Bromley <49409390+trbromley@users.noreply.github.com>
Co-authored-by: David Ittah <dime10@users.noreply.github.com>"
,PennyLaneAI,pennylane,pennylane/ops/op_math/composite.py,"Plxpr can capture operations (#5511)

**HIGHLY EXPERIMENTAL FEATURE**

**Context:**

To improve integration with catalyst, we want a way to be able to
natively capture the creation of quantum operations into an intermediate
representation. This is one of the early PR's for this experimental
push.

**Description of the Change:**

This PR adds a `PLXPR` metaclass that `Operator` uses. This allows for
the capture of all `Operator` classes into jaxpr.


```python
qml.capture.enable_plxpr()

def qfunc(a):
    qml.X(0)
    qml.IsingXX(a, wires=range(2))
    qml.ctrl(qml.adjoint(qml.X(0)), 1)

    0.5 * qml.X(0) @ qml.Y(1) + qml.Z(2)
    
jaxpr = jax.make_jaxpr(qfunc)(0)
jaxpr
```

```
{ lambda ; a:i32[]. let
    _:AbstractOperator() = PauliX[n_wires=1] 0
    _:AbstractOperator() = IsingXX[n_wires=2] a 0 1
    b:AbstractOperator() = PauliX[n_wires=1] 0
    c:AbstractOperator() = Adjoint b
    _:AbstractOperator() = Controlled[control_values=None work_wires=None] c 1
    d:AbstractOperator() = PauliX[n_wires=1] 0
    e:AbstractOperator() = SProd[id=None] 0.5 d
    f:AbstractOperator() = PauliY[n_wires=1] 1
    g:AbstractOperator() = Prod[id=None] e f
    h:AbstractOperator() = PauliZ[n_wires=1] 2
    _:AbstractOperator() = Sum[grouping_type=None id=None method=rlf] g h
  in () }
```

We can also return the jaxpr to normal pennylane qfunc behaviour via
`jax.core.eval_jaxpr`:

```python
with qml.queuing.AnnotatedQueue() as q:
    jax.core.eval_jaxpr(jaxpr.jaxpr, jaxpr.consts, 0.1)
q.queue
```
```
[X(0),
 IsingXX(0.1, wires=[0, 1]),
 Controlled(Adjoint(X(0)), control_wires=[1]),
 (0.5 * X(0)) @ Y(1) + Z(2)]
```

**Benefits:**

**Possible Drawbacks:**

* Metaprogramming in python is an edge skill, and often not the best way
to solve a problem. Messing around with things like this can often have
unintended consequences down the line.

* With PLXPR, wires will be restricted to be jax-tracable friendly
labels.

**Related GitHub Issues:**

[sc-61199]

---------

Co-authored-by: dwierichs <david.wierichs@xanadu.ai>
Co-authored-by: Thomas R. Bromley <49409390+trbromley@users.noreply.github.com>
Co-authored-by: David Ittah <dime10@users.noreply.github.com>"
,PennyLaneAI,pennylane,pennylane/ops/op_math/controlled.py,"Plxpr can capture operations (#5511)

**HIGHLY EXPERIMENTAL FEATURE**

**Context:**

To improve integration with catalyst, we want a way to be able to
natively capture the creation of quantum operations into an intermediate
representation. This is one of the early PR's for this experimental
push.

**Description of the Change:**

This PR adds a `PLXPR` metaclass that `Operator` uses. This allows for
the capture of all `Operator` classes into jaxpr.


```python
qml.capture.enable_plxpr()

def qfunc(a):
    qml.X(0)
    qml.IsingXX(a, wires=range(2))
    qml.ctrl(qml.adjoint(qml.X(0)), 1)

    0.5 * qml.X(0) @ qml.Y(1) + qml.Z(2)
    
jaxpr = jax.make_jaxpr(qfunc)(0)
jaxpr
```

```
{ lambda ; a:i32[]. let
    _:AbstractOperator() = PauliX[n_wires=1] 0
    _:AbstractOperator() = IsingXX[n_wires=2] a 0 1
    b:AbstractOperator() = PauliX[n_wires=1] 0
    c:AbstractOperator() = Adjoint b
    _:AbstractOperator() = Controlled[control_values=None work_wires=None] c 1
    d:AbstractOperator() = PauliX[n_wires=1] 0
    e:AbstractOperator() = SProd[id=None] 0.5 d
    f:AbstractOperator() = PauliY[n_wires=1] 1
    g:AbstractOperator() = Prod[id=None] e f
    h:AbstractOperator() = PauliZ[n_wires=1] 2
    _:AbstractOperator() = Sum[grouping_type=None id=None method=rlf] g h
  in () }
```

We can also return the jaxpr to normal pennylane qfunc behaviour via
`jax.core.eval_jaxpr`:

```python
with qml.queuing.AnnotatedQueue() as q:
    jax.core.eval_jaxpr(jaxpr.jaxpr, jaxpr.consts, 0.1)
q.queue
```
```
[X(0),
 IsingXX(0.1, wires=[0, 1]),
 Controlled(Adjoint(X(0)), control_wires=[1]),
 (0.5 * X(0)) @ Y(1) + Z(2)]
```

**Benefits:**

**Possible Drawbacks:**

* Metaprogramming in python is an edge skill, and often not the best way
to solve a problem. Messing around with things like this can often have
unintended consequences down the line.

* With PLXPR, wires will be restricted to be jax-tracable friendly
labels.

**Related GitHub Issues:**

[sc-61199]

---------

Co-authored-by: dwierichs <david.wierichs@xanadu.ai>
Co-authored-by: Thomas R. Bromley <49409390+trbromley@users.noreply.github.com>
Co-authored-by: David Ittah <dime10@users.noreply.github.com>"
,PennyLaneAI,pennylane,pennylane/ops/qubit/parametric_ops_multi_qubit.py,"Plxpr can capture operations (#5511)

**HIGHLY EXPERIMENTAL FEATURE**

**Context:**

To improve integration with catalyst, we want a way to be able to
natively capture the creation of quantum operations into an intermediate
representation. This is one of the early PR's for this experimental
push.

**Description of the Change:**

This PR adds a `PLXPR` metaclass that `Operator` uses. This allows for
the capture of all `Operator` classes into jaxpr.


```python
qml.capture.enable_plxpr()

def qfunc(a):
    qml.X(0)
    qml.IsingXX(a, wires=range(2))
    qml.ctrl(qml.adjoint(qml.X(0)), 1)

    0.5 * qml.X(0) @ qml.Y(1) + qml.Z(2)
    
jaxpr = jax.make_jaxpr(qfunc)(0)
jaxpr
```

```
{ lambda ; a:i32[]. let
    _:AbstractOperator() = PauliX[n_wires=1] 0
    _:AbstractOperator() = IsingXX[n_wires=2] a 0 1
    b:AbstractOperator() = PauliX[n_wires=1] 0
    c:AbstractOperator() = Adjoint b
    _:AbstractOperator() = Controlled[control_values=None work_wires=None] c 1
    d:AbstractOperator() = PauliX[n_wires=1] 0
    e:AbstractOperator() = SProd[id=None] 0.5 d
    f:AbstractOperator() = PauliY[n_wires=1] 1
    g:AbstractOperator() = Prod[id=None] e f
    h:AbstractOperator() = PauliZ[n_wires=1] 2
    _:AbstractOperator() = Sum[grouping_type=None id=None method=rlf] g h
  in () }
```

We can also return the jaxpr to normal pennylane qfunc behaviour via
`jax.core.eval_jaxpr`:

```python
with qml.queuing.AnnotatedQueue() as q:
    jax.core.eval_jaxpr(jaxpr.jaxpr, jaxpr.consts, 0.1)
q.queue
```
```
[X(0),
 IsingXX(0.1, wires=[0, 1]),
 Controlled(Adjoint(X(0)), control_wires=[1]),
 (0.5 * X(0)) @ Y(1) + Z(2)]
```

**Benefits:**

**Possible Drawbacks:**

* Metaprogramming in python is an edge skill, and often not the best way
to solve a problem. Messing around with things like this can often have
unintended consequences down the line.

* With PLXPR, wires will be restricted to be jax-tracable friendly
labels.

**Related GitHub Issues:**

[sc-61199]

---------

Co-authored-by: dwierichs <david.wierichs@xanadu.ai>
Co-authored-by: Thomas R. Bromley <49409390+trbromley@users.noreply.github.com>
Co-authored-by: David Ittah <dime10@users.noreply.github.com>"
,PennyLaneAI,pennylane,pennylane/templates/subroutines/trotter.py,"Plxpr can capture operations (#5511)

**HIGHLY EXPERIMENTAL FEATURE**

**Context:**

To improve integration with catalyst, we want a way to be able to
natively capture the creation of quantum operations into an intermediate
representation. This is one of the early PR's for this experimental
push.

**Description of the Change:**

This PR adds a `PLXPR` metaclass that `Operator` uses. This allows for
the capture of all `Operator` classes into jaxpr.


```python
qml.capture.enable_plxpr()

def qfunc(a):
    qml.X(0)
    qml.IsingXX(a, wires=range(2))
    qml.ctrl(qml.adjoint(qml.X(0)), 1)

    0.5 * qml.X(0) @ qml.Y(1) + qml.Z(2)
    
jaxpr = jax.make_jaxpr(qfunc)(0)
jaxpr
```

```
{ lambda ; a:i32[]. let
    _:AbstractOperator() = PauliX[n_wires=1] 0
    _:AbstractOperator() = IsingXX[n_wires=2] a 0 1
    b:AbstractOperator() = PauliX[n_wires=1] 0
    c:AbstractOperator() = Adjoint b
    _:AbstractOperator() = Controlled[control_values=None work_wires=None] c 1
    d:AbstractOperator() = PauliX[n_wires=1] 0
    e:AbstractOperator() = SProd[id=None] 0.5 d
    f:AbstractOperator() = PauliY[n_wires=1] 1
    g:AbstractOperator() = Prod[id=None] e f
    h:AbstractOperator() = PauliZ[n_wires=1] 2
    _:AbstractOperator() = Sum[grouping_type=None id=None method=rlf] g h
  in () }
```

We can also return the jaxpr to normal pennylane qfunc behaviour via
`jax.core.eval_jaxpr`:

```python
with qml.queuing.AnnotatedQueue() as q:
    jax.core.eval_jaxpr(jaxpr.jaxpr, jaxpr.consts, 0.1)
q.queue
```
```
[X(0),
 IsingXX(0.1, wires=[0, 1]),
 Controlled(Adjoint(X(0)), control_wires=[1]),
 (0.5 * X(0)) @ Y(1) + Z(2)]
```

**Benefits:**

**Possible Drawbacks:**

* Metaprogramming in python is an edge skill, and often not the best way
to solve a problem. Messing around with things like this can often have
unintended consequences down the line.

* With PLXPR, wires will be restricted to be jax-tracable friendly
labels.

**Related GitHub Issues:**

[sc-61199]

---------

Co-authored-by: dwierichs <david.wierichs@xanadu.ai>
Co-authored-by: Thomas R. Bromley <49409390+trbromley@users.noreply.github.com>
Co-authored-by: David Ittah <dime10@users.noreply.github.com>"
,PennyLaneAI,pennylane,tests/capture/test_meta_type.py,"Plxpr can capture operations (#5511)

**HIGHLY EXPERIMENTAL FEATURE**

**Context:**

To improve integration with catalyst, we want a way to be able to
natively capture the creation of quantum operations into an intermediate
representation. This is one of the early PR's for this experimental
push.

**Description of the Change:**

This PR adds a `PLXPR` metaclass that `Operator` uses. This allows for
the capture of all `Operator` classes into jaxpr.


```python
qml.capture.enable_plxpr()

def qfunc(a):
    qml.X(0)
    qml.IsingXX(a, wires=range(2))
    qml.ctrl(qml.adjoint(qml.X(0)), 1)

    0.5 * qml.X(0) @ qml.Y(1) + qml.Z(2)
    
jaxpr = jax.make_jaxpr(qfunc)(0)
jaxpr
```

```
{ lambda ; a:i32[]. let
    _:AbstractOperator() = PauliX[n_wires=1] 0
    _:AbstractOperator() = IsingXX[n_wires=2] a 0 1
    b:AbstractOperator() = PauliX[n_wires=1] 0
    c:AbstractOperator() = Adjoint b
    _:AbstractOperator() = Controlled[control_values=None work_wires=None] c 1
    d:AbstractOperator() = PauliX[n_wires=1] 0
    e:AbstractOperator() = SProd[id=None] 0.5 d
    f:AbstractOperator() = PauliY[n_wires=1] 1
    g:AbstractOperator() = Prod[id=None] e f
    h:AbstractOperator() = PauliZ[n_wires=1] 2
    _:AbstractOperator() = Sum[grouping_type=None id=None method=rlf] g h
  in () }
```

We can also return the jaxpr to normal pennylane qfunc behaviour via
`jax.core.eval_jaxpr`:

```python
with qml.queuing.AnnotatedQueue() as q:
    jax.core.eval_jaxpr(jaxpr.jaxpr, jaxpr.consts, 0.1)
q.queue
```
```
[X(0),
 IsingXX(0.1, wires=[0, 1]),
 Controlled(Adjoint(X(0)), control_wires=[1]),
 (0.5 * X(0)) @ Y(1) + Z(2)]
```

**Benefits:**

**Possible Drawbacks:**

* Metaprogramming in python is an edge skill, and often not the best way
to solve a problem. Messing around with things like this can often have
unintended consequences down the line.

* With PLXPR, wires will be restricted to be jax-tracable friendly
labels.

**Related GitHub Issues:**

[sc-61199]

---------

Co-authored-by: dwierichs <david.wierichs@xanadu.ai>
Co-authored-by: Thomas R. Bromley <49409390+trbromley@users.noreply.github.com>
Co-authored-by: David Ittah <dime10@users.noreply.github.com>"
,PennyLaneAI,pennylane,tests/capture/test_operators.py,"Plxpr can capture operations (#5511)

**HIGHLY EXPERIMENTAL FEATURE**

**Context:**

To improve integration with catalyst, we want a way to be able to
natively capture the creation of quantum operations into an intermediate
representation. This is one of the early PR's for this experimental
push.

**Description of the Change:**

This PR adds a `PLXPR` metaclass that `Operator` uses. This allows for
the capture of all `Operator` classes into jaxpr.


```python
qml.capture.enable_plxpr()

def qfunc(a):
    qml.X(0)
    qml.IsingXX(a, wires=range(2))
    qml.ctrl(qml.adjoint(qml.X(0)), 1)

    0.5 * qml.X(0) @ qml.Y(1) + qml.Z(2)
    
jaxpr = jax.make_jaxpr(qfunc)(0)
jaxpr
```

```
{ lambda ; a:i32[]. let
    _:AbstractOperator() = PauliX[n_wires=1] 0
    _:AbstractOperator() = IsingXX[n_wires=2] a 0 1
    b:AbstractOperator() = PauliX[n_wires=1] 0
    c:AbstractOperator() = Adjoint b
    _:AbstractOperator() = Controlled[control_values=None work_wires=None] c 1
    d:AbstractOperator() = PauliX[n_wires=1] 0
    e:AbstractOperator() = SProd[id=None] 0.5 d
    f:AbstractOperator() = PauliY[n_wires=1] 1
    g:AbstractOperator() = Prod[id=None] e f
    h:AbstractOperator() = PauliZ[n_wires=1] 2
    _:AbstractOperator() = Sum[grouping_type=None id=None method=rlf] g h
  in () }
```

We can also return the jaxpr to normal pennylane qfunc behaviour via
`jax.core.eval_jaxpr`:

```python
with qml.queuing.AnnotatedQueue() as q:
    jax.core.eval_jaxpr(jaxpr.jaxpr, jaxpr.consts, 0.1)
q.queue
```
```
[X(0),
 IsingXX(0.1, wires=[0, 1]),
 Controlled(Adjoint(X(0)), control_wires=[1]),
 (0.5 * X(0)) @ Y(1) + Z(2)]
```

**Benefits:**

**Possible Drawbacks:**

* Metaprogramming in python is an edge skill, and often not the best way
to solve a problem. Messing around with things like this can often have
unintended consequences down the line.

* With PLXPR, wires will be restricted to be jax-tracable friendly
labels.

**Related GitHub Issues:**

[sc-61199]

---------

Co-authored-by: dwierichs <david.wierichs@xanadu.ai>
Co-authored-by: Thomas R. Bromley <49409390+trbromley@users.noreply.github.com>
Co-authored-by: David Ittah <dime10@users.noreply.github.com>"
,PennyLaneAI,pennylane,doc/releases/changelog-dev.md,"Make `Projector` jit compatible (#5595)

**Description of the Change:**

Add some jit-friendly logic to `BasisStateProjector` and
`StateVectorProjector`.

**Benefits:**

Projector is now jit compatible.

We might finally be able to move forward with #4969 if we ever actually
had time to do that.

**Possible Drawbacks:**

Not testing trainability, as it doesn't really make sense.

Could potentially be made more efficient.

**Related GitHub Issues:**

Fixes #4977 [sc-52777]

---------

Co-authored-by: Mudit Pandey <mudit.pandey@xanadu.ai>
Co-authored-by: Astral Cai <astral.cai@xanadu.ai>
Co-authored-by: Vincent Michaud-Rioux <vincentm@nanoacademic.com>
Co-authored-by: David Wierichs <david.wierichs@xanadu.ai>"
,PennyLaneAI,pennylane,tests/ops/qubit/test_observables.py,"Make `Projector` jit compatible (#5595)

**Description of the Change:**

Add some jit-friendly logic to `BasisStateProjector` and
`StateVectorProjector`.

**Benefits:**

Projector is now jit compatible.

We might finally be able to move forward with #4969 if we ever actually
had time to do that.

**Possible Drawbacks:**

Not testing trainability, as it doesn't really make sense.

Could potentially be made more efficient.

**Related GitHub Issues:**

Fixes #4977 [sc-52777]

---------

Co-authored-by: Mudit Pandey <mudit.pandey@xanadu.ai>
Co-authored-by: Astral Cai <astral.cai@xanadu.ai>
Co-authored-by: Vincent Michaud-Rioux <vincentm@nanoacademic.com>
Co-authored-by: David Wierichs <david.wierichs@xanadu.ai>"
,PennyLaneAI,pennylane,doc/releases/changelog-dev.md,"`dynamic_one_shot` uses tapes with shot-vectors and jitting takes advantage of it (#5617)

### Before submitting

Please complete the following checklist when submitting a PR:

- [x] All new features must include a unit test.
If you've fixed a bug or added code that should be tested, add a test to
the
      test directory!

- [x] All new functions and code must be clearly commented and
documented.
If you do make documentation changes, make sure that the docs build and
      render correctly by running `make docs`.

- [ ] Ensure that the test suite passes, by running `make test`.

- [x] Add a new entry to the `doc/releases/changelog-dev.md` file,
summarizing the
      change, and including a link back to the PR.

- [x] The PennyLane source code conforms to
      [PEP8 standards](https://www.python.org/dev/peps/pep-0008/).
We check all of our code against [Pylint](https://www.pylint.org/).
      To lint modified files, simply `pip install pylint`, and then
      run `pylint pennylane/path/to/file.py`.

When all the above are checked, delete everything above the dashed
line and fill in the pull request template.


------------------------------------------------------------------------------------------------------------

**Context:**
`dynamic_one_shot` creates n-shots tapes which is wasteful.

**Description of the Change:**
Create a single tape with a shot-vector which indicates to the device
how many times to repeat the tape execution.

**Benefits:**
For a tape like
```
dev = qml.device(""default.qubit"", shots=2000, seed=jax.random.PRNGKey(123))

@qml.qnode(dev, diff_method=None)
def func(x, y):
    qml.RX(x, wires=0)
    m0 = qml.measure(0, reset=False, postselect=1)
    qml.cond(m0, qml.RY)(y, wires=1)
    return qml.expval(qml.PauliZ(0))


params = np.pi / 4 * np.ones(2)
```
The execution times are as follows (Latitude laptop):
- 12.7 s : vanilla Python
- 8.2 s : jax.vmap
- 11.1 s : jax.jit + jax.vmap + compilation
- 6.89 ms : jax.jit + jax.vmap

**Possible Drawbacks:**

**Related GitHub Issues:**
[sc-62097]

---------

Co-authored-by: Mudit Pandey <mudit.pandey@xanadu.ai>
Co-authored-by: Christina Lee <christina@xanadu.ai>"
,PennyLaneAI,pennylane,pennylane/_qubit_device.py,"`dynamic_one_shot` uses tapes with shot-vectors and jitting takes advantage of it (#5617)

### Before submitting

Please complete the following checklist when submitting a PR:

- [x] All new features must include a unit test.
If you've fixed a bug or added code that should be tested, add a test to
the
      test directory!

- [x] All new functions and code must be clearly commented and
documented.
If you do make documentation changes, make sure that the docs build and
      render correctly by running `make docs`.

- [ ] Ensure that the test suite passes, by running `make test`.

- [x] Add a new entry to the `doc/releases/changelog-dev.md` file,
summarizing the
      change, and including a link back to the PR.

- [x] The PennyLane source code conforms to
      [PEP8 standards](https://www.python.org/dev/peps/pep-0008/).
We check all of our code against [Pylint](https://www.pylint.org/).
      To lint modified files, simply `pip install pylint`, and then
      run `pylint pennylane/path/to/file.py`.

When all the above are checked, delete everything above the dashed
line and fill in the pull request template.


------------------------------------------------------------------------------------------------------------

**Context:**
`dynamic_one_shot` creates n-shots tapes which is wasteful.

**Description of the Change:**
Create a single tape with a shot-vector which indicates to the device
how many times to repeat the tape execution.

**Benefits:**
For a tape like
```
dev = qml.device(""default.qubit"", shots=2000, seed=jax.random.PRNGKey(123))

@qml.qnode(dev, diff_method=None)
def func(x, y):
    qml.RX(x, wires=0)
    m0 = qml.measure(0, reset=False, postselect=1)
    qml.cond(m0, qml.RY)(y, wires=1)
    return qml.expval(qml.PauliZ(0))


params = np.pi / 4 * np.ones(2)
```
The execution times are as follows (Latitude laptop):
- 12.7 s : vanilla Python
- 8.2 s : jax.vmap
- 11.1 s : jax.jit + jax.vmap + compilation
- 6.89 ms : jax.jit + jax.vmap

**Possible Drawbacks:**

**Related GitHub Issues:**
[sc-62097]

---------

Co-authored-by: Mudit Pandey <mudit.pandey@xanadu.ai>
Co-authored-by: Christina Lee <christina@xanadu.ai>"
,PennyLaneAI,pennylane,pennylane/devices/qubit/simulate.py,"`dynamic_one_shot` uses tapes with shot-vectors and jitting takes advantage of it (#5617)

### Before submitting

Please complete the following checklist when submitting a PR:

- [x] All new features must include a unit test.
If you've fixed a bug or added code that should be tested, add a test to
the
      test directory!

- [x] All new functions and code must be clearly commented and
documented.
If you do make documentation changes, make sure that the docs build and
      render correctly by running `make docs`.

- [ ] Ensure that the test suite passes, by running `make test`.

- [x] Add a new entry to the `doc/releases/changelog-dev.md` file,
summarizing the
      change, and including a link back to the PR.

- [x] The PennyLane source code conforms to
      [PEP8 standards](https://www.python.org/dev/peps/pep-0008/).
We check all of our code against [Pylint](https://www.pylint.org/).
      To lint modified files, simply `pip install pylint`, and then
      run `pylint pennylane/path/to/file.py`.

When all the above are checked, delete everything above the dashed
line and fill in the pull request template.


------------------------------------------------------------------------------------------------------------

**Context:**
`dynamic_one_shot` creates n-shots tapes which is wasteful.

**Description of the Change:**
Create a single tape with a shot-vector which indicates to the device
how many times to repeat the tape execution.

**Benefits:**
For a tape like
```
dev = qml.device(""default.qubit"", shots=2000, seed=jax.random.PRNGKey(123))

@qml.qnode(dev, diff_method=None)
def func(x, y):
    qml.RX(x, wires=0)
    m0 = qml.measure(0, reset=False, postselect=1)
    qml.cond(m0, qml.RY)(y, wires=1)
    return qml.expval(qml.PauliZ(0))


params = np.pi / 4 * np.ones(2)
```
The execution times are as follows (Latitude laptop):
- 12.7 s : vanilla Python
- 8.2 s : jax.vmap
- 11.1 s : jax.jit + jax.vmap + compilation
- 6.89 ms : jax.jit + jax.vmap

**Possible Drawbacks:**

**Related GitHub Issues:**
[sc-62097]

---------

Co-authored-by: Mudit Pandey <mudit.pandey@xanadu.ai>
Co-authored-by: Christina Lee <christina@xanadu.ai>"
,PennyLaneAI,pennylane,pennylane/transforms/dynamic_one_shot.py,"`dynamic_one_shot` uses tapes with shot-vectors and jitting takes advantage of it (#5617)

### Before submitting

Please complete the following checklist when submitting a PR:

- [x] All new features must include a unit test.
If you've fixed a bug or added code that should be tested, add a test to
the
      test directory!

- [x] All new functions and code must be clearly commented and
documented.
If you do make documentation changes, make sure that the docs build and
      render correctly by running `make docs`.

- [ ] Ensure that the test suite passes, by running `make test`.

- [x] Add a new entry to the `doc/releases/changelog-dev.md` file,
summarizing the
      change, and including a link back to the PR.

- [x] The PennyLane source code conforms to
      [PEP8 standards](https://www.python.org/dev/peps/pep-0008/).
We check all of our code against [Pylint](https://www.pylint.org/).
      To lint modified files, simply `pip install pylint`, and then
      run `pylint pennylane/path/to/file.py`.

When all the above are checked, delete everything above the dashed
line and fill in the pull request template.


------------------------------------------------------------------------------------------------------------

**Context:**
`dynamic_one_shot` creates n-shots tapes which is wasteful.

**Description of the Change:**
Create a single tape with a shot-vector which indicates to the device
how many times to repeat the tape execution.

**Benefits:**
For a tape like
```
dev = qml.device(""default.qubit"", shots=2000, seed=jax.random.PRNGKey(123))

@qml.qnode(dev, diff_method=None)
def func(x, y):
    qml.RX(x, wires=0)
    m0 = qml.measure(0, reset=False, postselect=1)
    qml.cond(m0, qml.RY)(y, wires=1)
    return qml.expval(qml.PauliZ(0))


params = np.pi / 4 * np.ones(2)
```
The execution times are as follows (Latitude laptop):
- 12.7 s : vanilla Python
- 8.2 s : jax.vmap
- 11.1 s : jax.jit + jax.vmap + compilation
- 6.89 ms : jax.jit + jax.vmap

**Possible Drawbacks:**

**Related GitHub Issues:**
[sc-62097]

---------

Co-authored-by: Mudit Pandey <mudit.pandey@xanadu.ai>
Co-authored-by: Christina Lee <christina@xanadu.ai>"
,PennyLaneAI,pennylane,tests/transforms/test_dynamic_one_shot.py,"`dynamic_one_shot` uses tapes with shot-vectors and jitting takes advantage of it (#5617)

### Before submitting

Please complete the following checklist when submitting a PR:

- [x] All new features must include a unit test.
If you've fixed a bug or added code that should be tested, add a test to
the
      test directory!

- [x] All new functions and code must be clearly commented and
documented.
If you do make documentation changes, make sure that the docs build and
      render correctly by running `make docs`.

- [ ] Ensure that the test suite passes, by running `make test`.

- [x] Add a new entry to the `doc/releases/changelog-dev.md` file,
summarizing the
      change, and including a link back to the PR.

- [x] The PennyLane source code conforms to
      [PEP8 standards](https://www.python.org/dev/peps/pep-0008/).
We check all of our code against [Pylint](https://www.pylint.org/).
      To lint modified files, simply `pip install pylint`, and then
      run `pylint pennylane/path/to/file.py`.

When all the above are checked, delete everything above the dashed
line and fill in the pull request template.


------------------------------------------------------------------------------------------------------------

**Context:**
`dynamic_one_shot` creates n-shots tapes which is wasteful.

**Description of the Change:**
Create a single tape with a shot-vector which indicates to the device
how many times to repeat the tape execution.

**Benefits:**
For a tape like
```
dev = qml.device(""default.qubit"", shots=2000, seed=jax.random.PRNGKey(123))

@qml.qnode(dev, diff_method=None)
def func(x, y):
    qml.RX(x, wires=0)
    m0 = qml.measure(0, reset=False, postselect=1)
    qml.cond(m0, qml.RY)(y, wires=1)
    return qml.expval(qml.PauliZ(0))


params = np.pi / 4 * np.ones(2)
```
The execution times are as follows (Latitude laptop):
- 12.7 s : vanilla Python
- 8.2 s : jax.vmap
- 11.1 s : jax.jit + jax.vmap + compilation
- 6.89 ms : jax.jit + jax.vmap

**Possible Drawbacks:**

**Related GitHub Issues:**
[sc-62097]

---------

Co-authored-by: Mudit Pandey <mudit.pandey@xanadu.ai>
Co-authored-by: Christina Lee <christina@xanadu.ai>"
,PennyLaneAI,pennylane,doc/releases/changelog-dev.md,"`jax.jit` works with `qml.probs` and finite shots (#5619)

### Before submitting

Please complete the following checklist when submitting a PR:

- [x] All new features must include a unit test.
If you've fixed a bug or added code that should be tested, add a test to
the
      test directory!

- [x] All new functions and code must be clearly commented and
documented.
If you do make documentation changes, make sure that the docs build and
      render correctly by running `make docs`.

- [x] Ensure that the test suite passes, by running `make test`.

- [x] Add a new entry to the `doc/releases/changelog-dev.md` file,
summarizing the
      change, and including a link back to the PR.

- [x] The PennyLane source code conforms to
      [PEP8 standards](https://www.python.org/dev/peps/pep-0008/).
We check all of our code against [Pylint](https://www.pylint.org/).
      To lint modified files, simply `pip install pylint`, and then
      run `pylint pennylane/path/to/file.py`.

When all the above are checked, delete everything above the dashed
line and fill in the pull request template.


------------------------------------------------------------------------------------------------------------

**Context:**
`qml.math.unique` cannot be jitted with JAX because the output shape of
`unique` depends on the input values.

**Description of the Change:**
Use an input agnostic way to update the probs.

**Benefits:**
`qml.probs` can be jitted (without Python callbacks).

**Possible Drawbacks:**

**Related GitHub Issues:**

---------

Co-authored-by: Mudit Pandey <mudit.pandey@xanadu.ai>
Co-authored-by: Christina Lee <christina@xanadu.ai>
Co-authored-by: David Wierichs <david.wierichs@xanadu.ai>"
,PennyLaneAI,pennylane,tests/devices/default_qubit/test_default_qubit_native_mcm.py,"`jax.jit` works with `qml.probs` and finite shots (#5619)

### Before submitting

Please complete the following checklist when submitting a PR:

- [x] All new features must include a unit test.
If you've fixed a bug or added code that should be tested, add a test to
the
      test directory!

- [x] All new functions and code must be clearly commented and
documented.
If you do make documentation changes, make sure that the docs build and
      render correctly by running `make docs`.

- [x] Ensure that the test suite passes, by running `make test`.

- [x] Add a new entry to the `doc/releases/changelog-dev.md` file,
summarizing the
      change, and including a link back to the PR.

- [x] The PennyLane source code conforms to
      [PEP8 standards](https://www.python.org/dev/peps/pep-0008/).
We check all of our code against [Pylint](https://www.pylint.org/).
      To lint modified files, simply `pip install pylint`, and then
      run `pylint pennylane/path/to/file.py`.

When all the above are checked, delete everything above the dashed
line and fill in the pull request template.


------------------------------------------------------------------------------------------------------------

**Context:**
`qml.math.unique` cannot be jitted with JAX because the output shape of
`unique` depends on the input values.

**Description of the Change:**
Use an input agnostic way to update the probs.

**Benefits:**
`qml.probs` can be jitted (without Python callbacks).

**Possible Drawbacks:**

**Related GitHub Issues:**

---------

Co-authored-by: Mudit Pandey <mudit.pandey@xanadu.ai>
Co-authored-by: Christina Lee <christina@xanadu.ai>
Co-authored-by: David Wierichs <david.wierichs@xanadu.ai>"
,PennyLaneAI,pennylane,tests/measurements/test_probs.py,"`jax.jit` works with `qml.probs` and finite shots (#5619)

### Before submitting

Please complete the following checklist when submitting a PR:

- [x] All new features must include a unit test.
If you've fixed a bug or added code that should be tested, add a test to
the
      test directory!

- [x] All new functions and code must be clearly commented and
documented.
If you do make documentation changes, make sure that the docs build and
      render correctly by running `make docs`.

- [x] Ensure that the test suite passes, by running `make test`.

- [x] Add a new entry to the `doc/releases/changelog-dev.md` file,
summarizing the
      change, and including a link back to the PR.

- [x] The PennyLane source code conforms to
      [PEP8 standards](https://www.python.org/dev/peps/pep-0008/).
We check all of our code against [Pylint](https://www.pylint.org/).
      To lint modified files, simply `pip install pylint`, and then
      run `pylint pennylane/path/to/file.py`.

When all the above are checked, delete everything above the dashed
line and fill in the pull request template.


------------------------------------------------------------------------------------------------------------

**Context:**
`qml.math.unique` cannot be jitted with JAX because the output shape of
`unique` depends on the input values.

**Description of the Change:**
Use an input agnostic way to update the probs.

**Benefits:**
`qml.probs` can be jitted (without Python callbacks).

**Possible Drawbacks:**

**Related GitHub Issues:**

---------

Co-authored-by: Mudit Pandey <mudit.pandey@xanadu.ai>
Co-authored-by: Christina Lee <christina@xanadu.ai>
Co-authored-by: David Wierichs <david.wierichs@xanadu.ai>"
,PennyLaneAI,pennylane,doc/releases/changelog-dev.md,"Fix a sorting order in parameter-shift terms (#5583)

**Context:**
Currently, `process_shifts` sorts shifts according to the absolute value
of the shift.
It uses `kind=""stable""`, which guarantees to keep inputs in their input
order if they have same absolute value.
While this is stable against repeated calls, the stable order is
somewhat arbitrarily depending on how a user/PennyLane
arrived at the input shifts. 

This is visible in `tests/gradients/core/test_general_shift_rules.py`,
where the expected output values sometimes have positive before negative
shifts with same magnitude, and sometimes the other way around.

**Description of the Change:**
This PR uses `lexsort`, which is like `argsort` but allows us to use the
sign of the shift as a secondary sorting key, producing not only stable
but also well-defined sorting results.

**Benefits:**
Predictable sorting results beyond the absolute value alone.

**Possible Drawbacks:**

**Related GitHub Issues:**

[sc-45043]"
,PennyLaneAI,pennylane,tests/gradients/core/test_general_shift_rules.py,"Fix a sorting order in parameter-shift terms (#5583)

**Context:**
Currently, `process_shifts` sorts shifts according to the absolute value
of the shift.
It uses `kind=""stable""`, which guarantees to keep inputs in their input
order if they have same absolute value.
While this is stable against repeated calls, the stable order is
somewhat arbitrarily depending on how a user/PennyLane
arrived at the input shifts. 

This is visible in `tests/gradients/core/test_general_shift_rules.py`,
where the expected output values sometimes have positive before negative
shifts with same magnitude, and sometimes the other way around.

**Description of the Change:**
This PR uses `lexsort`, which is like `argsort` but allows us to use the
sign of the shift as a secondary sorting key, producing not only stable
but also well-defined sorting results.

**Benefits:**
Predictable sorting results beyond the absolute value alone.

**Possible Drawbacks:**

**Related GitHub Issues:**

[sc-45043]"
,PennyLaneAI,pennylane,tests/gradients/parameter_shift/test_parameter_shift_hessian.py,"Fix a sorting order in parameter-shift terms (#5583)

**Context:**
Currently, `process_shifts` sorts shifts according to the absolute value
of the shift.
It uses `kind=""stable""`, which guarantees to keep inputs in their input
order if they have same absolute value.
While this is stable against repeated calls, the stable order is
somewhat arbitrarily depending on how a user/PennyLane
arrived at the input shifts. 

This is visible in `tests/gradients/core/test_general_shift_rules.py`,
where the expected output values sometimes have positive before negative
shifts with same magnitude, and sometimes the other way around.

**Description of the Change:**
This PR uses `lexsort`, which is like `argsort` but allows us to use the
sign of the shift as a secondary sorting key, producing not only stable
but also well-defined sorting results.

**Benefits:**
Predictable sorting results beyond the absolute value alone.

**Possible Drawbacks:**

**Related GitHub Issues:**

[sc-45043]"
,PennyLaneAI,pennylane,doc/releases/changelog-dev.md,"dynamic_one_shot is compatible with jax.jit  (#5557)

### Before submitting

Please complete the following checklist when submitting a PR:

- [x] All new features must include a unit test.
If you've fixed a bug or added code that should be tested, add a test to
the
      test directory!

- [x] All new functions and code must be clearly commented and
documented.
If you do make documentation changes, make sure that the docs build and
      render correctly by running `make docs`.

- [x] Ensure that the test suite passes, by running `make test`.

- [x] Add a new entry to the `doc/releases/changelog-dev.md` file,
summarizing the
      change, and including a link back to the PR.

- [x] The PennyLane source code conforms to
      [PEP8 standards](https://www.python.org/dev/peps/pep-0008/).
We check all of our code against [Pylint](https://www.pylint.org/).
      To lint modified files, simply `pip install pylint`, and then
      run `pylint pennylane/path/to/file.py`.

When all the above are checked, delete everything above the dashed
line and fill in the pull request template.


------------------------------------------------------------------------------------------------------------

**Context:**
As a first step toward our goal to support `dynamic_one_shot` with
Catalyst, we attempt to support `jax.jit`.

**Description of the Change:**
Make all array shapes static. Perform post-selection as a filtering
operation during the post-processing step of `dynamic_one_shot`. Add
`jax.jit` tests. We also introduce the constant `fillin_value` which is
used as a placeholder for postselection mismatched samples.

**Benefits:**

**Possible Drawbacks:**

**Related GitHub Issues:**
[sc-61173]
[sc-61315]
[sc-62094]

---------

Co-authored-by: Mudit Pandey <mudit.pandey@xanadu.ai>
Co-authored-by: Christina Lee <christina@xanadu.ai>
Co-authored-by: Amintor Dusko <87949283+AmintorDusko@users.noreply.github.com>"
,PennyLaneAI,pennylane,pennylane/devices/qubit/apply_operation.py,"dynamic_one_shot is compatible with jax.jit  (#5557)

### Before submitting

Please complete the following checklist when submitting a PR:

- [x] All new features must include a unit test.
If you've fixed a bug or added code that should be tested, add a test to
the
      test directory!

- [x] All new functions and code must be clearly commented and
documented.
If you do make documentation changes, make sure that the docs build and
      render correctly by running `make docs`.

- [x] Ensure that the test suite passes, by running `make test`.

- [x] Add a new entry to the `doc/releases/changelog-dev.md` file,
summarizing the
      change, and including a link back to the PR.

- [x] The PennyLane source code conforms to
      [PEP8 standards](https://www.python.org/dev/peps/pep-0008/).
We check all of our code against [Pylint](https://www.pylint.org/).
      To lint modified files, simply `pip install pylint`, and then
      run `pylint pennylane/path/to/file.py`.

When all the above are checked, delete everything above the dashed
line and fill in the pull request template.


------------------------------------------------------------------------------------------------------------

**Context:**
As a first step toward our goal to support `dynamic_one_shot` with
Catalyst, we attempt to support `jax.jit`.

**Description of the Change:**
Make all array shapes static. Perform post-selection as a filtering
operation during the post-processing step of `dynamic_one_shot`. Add
`jax.jit` tests. We also introduce the constant `fillin_value` which is
used as a placeholder for postselection mismatched samples.

**Benefits:**

**Possible Drawbacks:**

**Related GitHub Issues:**
[sc-61173]
[sc-61315]
[sc-62094]

---------

Co-authored-by: Mudit Pandey <mudit.pandey@xanadu.ai>
Co-authored-by: Christina Lee <christina@xanadu.ai>
Co-authored-by: Amintor Dusko <87949283+AmintorDusko@users.noreply.github.com>"
,PennyLaneAI,pennylane,pennylane/devices/qubit/sampling.py,"dynamic_one_shot is compatible with jax.jit  (#5557)

### Before submitting

Please complete the following checklist when submitting a PR:

- [x] All new features must include a unit test.
If you've fixed a bug or added code that should be tested, add a test to
the
      test directory!

- [x] All new functions and code must be clearly commented and
documented.
If you do make documentation changes, make sure that the docs build and
      render correctly by running `make docs`.

- [x] Ensure that the test suite passes, by running `make test`.

- [x] Add a new entry to the `doc/releases/changelog-dev.md` file,
summarizing the
      change, and including a link back to the PR.

- [x] The PennyLane source code conforms to
      [PEP8 standards](https://www.python.org/dev/peps/pep-0008/).
We check all of our code against [Pylint](https://www.pylint.org/).
      To lint modified files, simply `pip install pylint`, and then
      run `pylint pennylane/path/to/file.py`.

When all the above are checked, delete everything above the dashed
line and fill in the pull request template.


------------------------------------------------------------------------------------------------------------

**Context:**
As a first step toward our goal to support `dynamic_one_shot` with
Catalyst, we attempt to support `jax.jit`.

**Description of the Change:**
Make all array shapes static. Perform post-selection as a filtering
operation during the post-processing step of `dynamic_one_shot`. Add
`jax.jit` tests. We also introduce the constant `fillin_value` which is
used as a placeholder for postselection mismatched samples.

**Benefits:**

**Possible Drawbacks:**

**Related GitHub Issues:**
[sc-61173]
[sc-61315]
[sc-62094]

---------

Co-authored-by: Mudit Pandey <mudit.pandey@xanadu.ai>
Co-authored-by: Christina Lee <christina@xanadu.ai>
Co-authored-by: Amintor Dusko <87949283+AmintorDusko@users.noreply.github.com>"
,PennyLaneAI,pennylane,pennylane/transforms/dynamic_one_shot.py,"dynamic_one_shot is compatible with jax.jit  (#5557)

### Before submitting

Please complete the following checklist when submitting a PR:

- [x] All new features must include a unit test.
If you've fixed a bug or added code that should be tested, add a test to
the
      test directory!

- [x] All new functions and code must be clearly commented and
documented.
If you do make documentation changes, make sure that the docs build and
      render correctly by running `make docs`.

- [x] Ensure that the test suite passes, by running `make test`.

- [x] Add a new entry to the `doc/releases/changelog-dev.md` file,
summarizing the
      change, and including a link back to the PR.

- [x] The PennyLane source code conforms to
      [PEP8 standards](https://www.python.org/dev/peps/pep-0008/).
We check all of our code against [Pylint](https://www.pylint.org/).
      To lint modified files, simply `pip install pylint`, and then
      run `pylint pennylane/path/to/file.py`.

When all the above are checked, delete everything above the dashed
line and fill in the pull request template.


------------------------------------------------------------------------------------------------------------

**Context:**
As a first step toward our goal to support `dynamic_one_shot` with
Catalyst, we attempt to support `jax.jit`.

**Description of the Change:**
Make all array shapes static. Perform post-selection as a filtering
operation during the post-processing step of `dynamic_one_shot`. Add
`jax.jit` tests. We also introduce the constant `fillin_value` which is
used as a placeholder for postselection mismatched samples.

**Benefits:**

**Possible Drawbacks:**

**Related GitHub Issues:**
[sc-61173]
[sc-61315]
[sc-62094]

---------

Co-authored-by: Mudit Pandey <mudit.pandey@xanadu.ai>
Co-authored-by: Christina Lee <christina@xanadu.ai>
Co-authored-by: Amintor Dusko <87949283+AmintorDusko@users.noreply.github.com>"
,PennyLaneAI,pennylane,tests/transforms/test_dynamic_one_shot.py,"dynamic_one_shot is compatible with jax.jit  (#5557)

### Before submitting

Please complete the following checklist when submitting a PR:

- [x] All new features must include a unit test.
If you've fixed a bug or added code that should be tested, add a test to
the
      test directory!

- [x] All new functions and code must be clearly commented and
documented.
If you do make documentation changes, make sure that the docs build and
      render correctly by running `make docs`.

- [x] Ensure that the test suite passes, by running `make test`.

- [x] Add a new entry to the `doc/releases/changelog-dev.md` file,
summarizing the
      change, and including a link back to the PR.

- [x] The PennyLane source code conforms to
      [PEP8 standards](https://www.python.org/dev/peps/pep-0008/).
We check all of our code against [Pylint](https://www.pylint.org/).
      To lint modified files, simply `pip install pylint`, and then
      run `pylint pennylane/path/to/file.py`.

When all the above are checked, delete everything above the dashed
line and fill in the pull request template.


------------------------------------------------------------------------------------------------------------

**Context:**
As a first step toward our goal to support `dynamic_one_shot` with
Catalyst, we attempt to support `jax.jit`.

**Description of the Change:**
Make all array shapes static. Perform post-selection as a filtering
operation during the post-processing step of `dynamic_one_shot`. Add
`jax.jit` tests. We also introduce the constant `fillin_value` which is
used as a placeholder for postselection mismatched samples.

**Benefits:**

**Possible Drawbacks:**

**Related GitHub Issues:**
[sc-61173]
[sc-61315]
[sc-62094]

---------

Co-authored-by: Mudit Pandey <mudit.pandey@xanadu.ai>
Co-authored-by: Christina Lee <christina@xanadu.ai>
Co-authored-by: Amintor Dusko <87949283+AmintorDusko@users.noreply.github.com>"
,PennyLaneAI,pennylane,pennylane/gradients/finite_difference.py,"Allow specifying error type to be raised by decompose (#5669)

**Context:**
As the `decompose` transform is used in various contexts, it would be
nice to specify the error type that should be raised if its not possible
to get a suitable decomposition for one of the operators (i.e. devices
raise `DeviceError`, transforms and gradients raise
`DecompositionUndefinedError`, catalyst raises `CompileError`)

**Description of the Change:**
An error kwarg is added to `decompose` and its helper function
`_operator_decomposition_gen` so that the error type can be specified.
It continues to default to `DeviceError`

**Benefits:**
We don't have to duplicate many lines of code to get an identical
function with a different error type

**Possible Drawbacks:**
More kwargs

**Related GitHub Issues:**
N/A

**Related Shortcut Stories:**

[[sc-61450]](https://app.shortcut.com/xanaduai/story/61450/catalyst-can-decompose-nested-operations-hybrid-op-part-2)

---------

Co-authored-by: David Wierichs <david.wierichs@xanadu.ai>"
,PennyLaneAI,pennylane,pennylane/gradients/parameter_shift.py,"Allow specifying error type to be raised by decompose (#5669)

**Context:**
As the `decompose` transform is used in various contexts, it would be
nice to specify the error type that should be raised if its not possible
to get a suitable decomposition for one of the operators (i.e. devices
raise `DeviceError`, transforms and gradients raise
`DecompositionUndefinedError`, catalyst raises `CompileError`)

**Description of the Change:**
An error kwarg is added to `decompose` and its helper function
`_operator_decomposition_gen` so that the error type can be specified.
It continues to default to `DeviceError`

**Benefits:**
We don't have to duplicate many lines of code to get an identical
function with a different error type

**Possible Drawbacks:**
More kwargs

**Related GitHub Issues:**
N/A

**Related Shortcut Stories:**

[[sc-61450]](https://app.shortcut.com/xanaduai/story/61450/catalyst-can-decompose-nested-operations-hybrid-op-part-2)

---------

Co-authored-by: David Wierichs <david.wierichs@xanadu.ai>"
,PennyLaneAI,pennylane,pennylane/transforms/compile.py,"Allow specifying error type to be raised by decompose (#5669)

**Context:**
As the `decompose` transform is used in various contexts, it would be
nice to specify the error type that should be raised if its not possible
to get a suitable decomposition for one of the operators (i.e. devices
raise `DeviceError`, transforms and gradients raise
`DecompositionUndefinedError`, catalyst raises `CompileError`)

**Description of the Change:**
An error kwarg is added to `decompose` and its helper function
`_operator_decomposition_gen` so that the error type can be specified.
It continues to default to `DeviceError`

**Benefits:**
We don't have to duplicate many lines of code to get an identical
function with a different error type

**Possible Drawbacks:**
More kwargs

**Related GitHub Issues:**
N/A

**Related Shortcut Stories:**

[[sc-61450]](https://app.shortcut.com/xanaduai/story/61450/catalyst-can-decompose-nested-operations-hybrid-op-part-2)

---------

Co-authored-by: David Wierichs <david.wierichs@xanadu.ai>"
,PennyLaneAI,pennylane,pennylane/transforms/optimization/merge_rotations.py,"Allow specifying error type to be raised by decompose (#5669)

**Context:**
As the `decompose` transform is used in various contexts, it would be
nice to specify the error type that should be raised if its not possible
to get a suitable decomposition for one of the operators (i.e. devices
raise `DeviceError`, transforms and gradients raise
`DecompositionUndefinedError`, catalyst raises `CompileError`)

**Description of the Change:**
An error kwarg is added to `decompose` and its helper function
`_operator_decomposition_gen` so that the error type can be specified.
It continues to default to `DeviceError`

**Benefits:**
We don't have to duplicate many lines of code to get an identical
function with a different error type

**Possible Drawbacks:**
More kwargs

**Related GitHub Issues:**
N/A

**Related Shortcut Stories:**

[[sc-61450]](https://app.shortcut.com/xanaduai/story/61450/catalyst-can-decompose-nested-operations-hybrid-op-part-2)

---------

Co-authored-by: David Wierichs <david.wierichs@xanadu.ai>"
,PennyLaneAI,pennylane,pennylane/transforms/transpile.py,"Allow specifying error type to be raised by decompose (#5669)

**Context:**
As the `decompose` transform is used in various contexts, it would be
nice to specify the error type that should be raised if its not possible
to get a suitable decomposition for one of the operators (i.e. devices
raise `DeviceError`, transforms and gradients raise
`DecompositionUndefinedError`, catalyst raises `CompileError`)

**Description of the Change:**
An error kwarg is added to `decompose` and its helper function
`_operator_decomposition_gen` so that the error type can be specified.
It continues to default to `DeviceError`

**Benefits:**
We don't have to duplicate many lines of code to get an identical
function with a different error type

**Possible Drawbacks:**
More kwargs

**Related GitHub Issues:**
N/A

**Related Shortcut Stories:**

[[sc-61450]](https://app.shortcut.com/xanaduai/story/61450/catalyst-can-decompose-nested-operations-hybrid-op-part-2)

---------

Co-authored-by: David Wierichs <david.wierichs@xanadu.ai>"
,PennyLaneAI,pennylane,tests/devices/test_preprocess.py,"Allow specifying error type to be raised by decompose (#5669)

**Context:**
As the `decompose` transform is used in various contexts, it would be
nice to specify the error type that should be raised if its not possible
to get a suitable decomposition for one of the operators (i.e. devices
raise `DeviceError`, transforms and gradients raise
`DecompositionUndefinedError`, catalyst raises `CompileError`)

**Description of the Change:**
An error kwarg is added to `decompose` and its helper function
`_operator_decomposition_gen` so that the error type can be specified.
It continues to default to `DeviceError`

**Benefits:**
We don't have to duplicate many lines of code to get an identical
function with a different error type

**Possible Drawbacks:**
More kwargs

**Related GitHub Issues:**
N/A

**Related Shortcut Stories:**

[[sc-61450]](https://app.shortcut.com/xanaduai/story/61450/catalyst-can-decompose-nested-operations-hybrid-op-part-2)

---------

Co-authored-by: David Wierichs <david.wierichs@xanadu.ai>"
,PennyLaneAI,pennylane,doc/releases/changelog-dev.md,"[BUG] Fix a fermi sentence bug in bravyi_kitaev (#5671)

**Context:**
There is a wrong call in bravyi_kitaev when the input object is
FermiSentence, which is only observed for some specific inputs that were
not covered by our current tests. The PR fixes the bug and adds an extra
test to check the accuracy.

**Description of the Change:**

**Benefits:**

**Possible Drawbacks:**

**Related GitHub Issues:**"
,PennyLaneAI,pennylane,pennylane/fermi/conversion.py,"[BUG] Fix a fermi sentence bug in bravyi_kitaev (#5671)

**Context:**
There is a wrong call in bravyi_kitaev when the input object is
FermiSentence, which is only observed for some specific inputs that were
not covered by our current tests. The PR fixes the bug and adds an extra
test to check the accuracy.

**Description of the Change:**

**Benefits:**

**Possible Drawbacks:**

**Related GitHub Issues:**"
,PennyLaneAI,pennylane,tests/fermi/test_bravyi_kitaev.py,"[BUG] Fix a fermi sentence bug in bravyi_kitaev (#5671)

**Context:**
There is a wrong call in bravyi_kitaev when the input object is
FermiSentence, which is only observed for some specific inputs that were
not covered by our current tests. The PR fixes the bug and adds an extra
test to check the accuracy.

**Description of the Change:**

**Benefits:**

**Possible Drawbacks:**

**Related GitHub Issues:**"
,PennyLaneAI,pennylane,doc/releases/changelog-dev.md,"Fix transforms that error with non-commuting measurements (#5424)

**Context:**

`tape.expand` will error out if the tape has any non-commuting
measurements present. But multiple transforms that don't care about
measurements at all use it to decompose to a target gate set. Even when
`expand_measurements=False`, `tape.expand` requires measurements to be
commuting, or composite observables. And this is a core behavior of
`tape.expand` that people might rely on. It's not as much a bug as a
problematic feature. AKA load-bearing bug.

Fortunately, we now have `qml.devices.preprocess.decompose`, which is a
transform that is capable of decomposing to a target gateset. While yes,
this transform is in the `devices` module, so using it is introducing a
cross-module dependency in a direction that we do not want, it gets the
job done. I would call this a sign that we should potentially consider
moving it into the `transforms` module and making it's import path more
accessible.

**Description of the Change:**

Use `decompose` instead of `tape.expand` in a variety of transforms.

**Benefits:**

These transforms now allow non-commuting measurements through.

**Possible Drawbacks:**

We still have other transforms still relying on `tape.expand`. But we
can investigate those another day.

Introducing a cross-module dependency in a direction we don't want a
dependency. This could be fixed by moving `decompose` to the transforms
module, but that is a problem for another day.

**Related GitHub Issues:**

Fixes #5401 Fixes #5316 [sc-58086]  [sc-59118]

---------

Co-authored-by: Mudit Pandey <mudit.pandey@xanadu.ai>
Co-authored-by: Astral Cai <astral.cai@xanadu.ai>
Co-authored-by: Vincent Michaud-Rioux <vincentm@nanoacademic.com>
Co-authored-by: David Wierichs <david.wierichs@xanadu.ai>
Co-authored-by: lillian542 <38584660+lillian542@users.noreply.github.com>"
,PennyLaneAI,pennylane,pennylane/devices/default_clifford.py,"Fix transforms that error with non-commuting measurements (#5424)

**Context:**

`tape.expand` will error out if the tape has any non-commuting
measurements present. But multiple transforms that don't care about
measurements at all use it to decompose to a target gate set. Even when
`expand_measurements=False`, `tape.expand` requires measurements to be
commuting, or composite observables. And this is a core behavior of
`tape.expand` that people might rely on. It's not as much a bug as a
problematic feature. AKA load-bearing bug.

Fortunately, we now have `qml.devices.preprocess.decompose`, which is a
transform that is capable of decomposing to a target gateset. While yes,
this transform is in the `devices` module, so using it is introducing a
cross-module dependency in a direction that we do not want, it gets the
job done. I would call this a sign that we should potentially consider
moving it into the `transforms` module and making it's import path more
accessible.

**Description of the Change:**

Use `decompose` instead of `tape.expand` in a variety of transforms.

**Benefits:**

These transforms now allow non-commuting measurements through.

**Possible Drawbacks:**

We still have other transforms still relying on `tape.expand`. But we
can investigate those another day.

Introducing a cross-module dependency in a direction we don't want a
dependency. This could be fixed by moving `decompose` to the transforms
module, but that is a problem for another day.

**Related GitHub Issues:**

Fixes #5401 Fixes #5316 [sc-58086]  [sc-59118]

---------

Co-authored-by: Mudit Pandey <mudit.pandey@xanadu.ai>
Co-authored-by: Astral Cai <astral.cai@xanadu.ai>
Co-authored-by: Vincent Michaud-Rioux <vincentm@nanoacademic.com>
Co-authored-by: David Wierichs <david.wierichs@xanadu.ai>
Co-authored-by: lillian542 <38584660+lillian542@users.noreply.github.com>"
,PennyLaneAI,pennylane,pennylane/devices/preprocess.py,"Fix transforms that error with non-commuting measurements (#5424)

**Context:**

`tape.expand` will error out if the tape has any non-commuting
measurements present. But multiple transforms that don't care about
measurements at all use it to decompose to a target gate set. Even when
`expand_measurements=False`, `tape.expand` requires measurements to be
commuting, or composite observables. And this is a core behavior of
`tape.expand` that people might rely on. It's not as much a bug as a
problematic feature. AKA load-bearing bug.

Fortunately, we now have `qml.devices.preprocess.decompose`, which is a
transform that is capable of decomposing to a target gateset. While yes,
this transform is in the `devices` module, so using it is introducing a
cross-module dependency in a direction that we do not want, it gets the
job done. I would call this a sign that we should potentially consider
moving it into the `transforms` module and making it's import path more
accessible.

**Description of the Change:**

Use `decompose` instead of `tape.expand` in a variety of transforms.

**Benefits:**

These transforms now allow non-commuting measurements through.

**Possible Drawbacks:**

We still have other transforms still relying on `tape.expand`. But we
can investigate those another day.

Introducing a cross-module dependency in a direction we don't want a
dependency. This could be fixed by moving `decompose` to the transforms
module, but that is a problem for another day.

**Related GitHub Issues:**

Fixes #5401 Fixes #5316 [sc-58086]  [sc-59118]

---------

Co-authored-by: Mudit Pandey <mudit.pandey@xanadu.ai>
Co-authored-by: Astral Cai <astral.cai@xanadu.ai>
Co-authored-by: Vincent Michaud-Rioux <vincentm@nanoacademic.com>
Co-authored-by: David Wierichs <david.wierichs@xanadu.ai>
Co-authored-by: lillian542 <38584660+lillian542@users.noreply.github.com>"
,PennyLaneAI,pennylane,pennylane/gradients/finite_difference.py,"Fix transforms that error with non-commuting measurements (#5424)

**Context:**

`tape.expand` will error out if the tape has any non-commuting
measurements present. But multiple transforms that don't care about
measurements at all use it to decompose to a target gate set. Even when
`expand_measurements=False`, `tape.expand` requires measurements to be
commuting, or composite observables. And this is a core behavior of
`tape.expand` that people might rely on. It's not as much a bug as a
problematic feature. AKA load-bearing bug.

Fortunately, we now have `qml.devices.preprocess.decompose`, which is a
transform that is capable of decomposing to a target gateset. While yes,
this transform is in the `devices` module, so using it is introducing a
cross-module dependency in a direction that we do not want, it gets the
job done. I would call this a sign that we should potentially consider
moving it into the `transforms` module and making it's import path more
accessible.

**Description of the Change:**

Use `decompose` instead of `tape.expand` in a variety of transforms.

**Benefits:**

These transforms now allow non-commuting measurements through.

**Possible Drawbacks:**

We still have other transforms still relying on `tape.expand`. But we
can investigate those another day.

Introducing a cross-module dependency in a direction we don't want a
dependency. This could be fixed by moving `decompose` to the transforms
module, but that is a problem for another day.

**Related GitHub Issues:**

Fixes #5401 Fixes #5316 [sc-58086]  [sc-59118]

---------

Co-authored-by: Mudit Pandey <mudit.pandey@xanadu.ai>
Co-authored-by: Astral Cai <astral.cai@xanadu.ai>
Co-authored-by: Vincent Michaud-Rioux <vincentm@nanoacademic.com>
Co-authored-by: David Wierichs <david.wierichs@xanadu.ai>
Co-authored-by: lillian542 <38584660+lillian542@users.noreply.github.com>"
,PennyLaneAI,pennylane,pennylane/gradients/parameter_shift.py,"Fix transforms that error with non-commuting measurements (#5424)

**Context:**

`tape.expand` will error out if the tape has any non-commuting
measurements present. But multiple transforms that don't care about
measurements at all use it to decompose to a target gate set. Even when
`expand_measurements=False`, `tape.expand` requires measurements to be
commuting, or composite observables. And this is a core behavior of
`tape.expand` that people might rely on. It's not as much a bug as a
problematic feature. AKA load-bearing bug.

Fortunately, we now have `qml.devices.preprocess.decompose`, which is a
transform that is capable of decomposing to a target gateset. While yes,
this transform is in the `devices` module, so using it is introducing a
cross-module dependency in a direction that we do not want, it gets the
job done. I would call this a sign that we should potentially consider
moving it into the `transforms` module and making it's import path more
accessible.

**Description of the Change:**

Use `decompose` instead of `tape.expand` in a variety of transforms.

**Benefits:**

These transforms now allow non-commuting measurements through.

**Possible Drawbacks:**

We still have other transforms still relying on `tape.expand`. But we
can investigate those another day.

Introducing a cross-module dependency in a direction we don't want a
dependency. This could be fixed by moving `decompose` to the transforms
module, but that is a problem for another day.

**Related GitHub Issues:**

Fixes #5401 Fixes #5316 [sc-58086]  [sc-59118]

---------

Co-authored-by: Mudit Pandey <mudit.pandey@xanadu.ai>
Co-authored-by: Astral Cai <astral.cai@xanadu.ai>
Co-authored-by: Vincent Michaud-Rioux <vincentm@nanoacademic.com>
Co-authored-by: David Wierichs <david.wierichs@xanadu.ai>
Co-authored-by: lillian542 <38584660+lillian542@users.noreply.github.com>"
,PennyLaneAI,pennylane,pennylane/ops/op_math/pow.py,"Fix transforms that error with non-commuting measurements (#5424)

**Context:**

`tape.expand` will error out if the tape has any non-commuting
measurements present. But multiple transforms that don't care about
measurements at all use it to decompose to a target gate set. Even when
`expand_measurements=False`, `tape.expand` requires measurements to be
commuting, or composite observables. And this is a core behavior of
`tape.expand` that people might rely on. It's not as much a bug as a
problematic feature. AKA load-bearing bug.

Fortunately, we now have `qml.devices.preprocess.decompose`, which is a
transform that is capable of decomposing to a target gateset. While yes,
this transform is in the `devices` module, so using it is introducing a
cross-module dependency in a direction that we do not want, it gets the
job done. I would call this a sign that we should potentially consider
moving it into the `transforms` module and making it's import path more
accessible.

**Description of the Change:**

Use `decompose` instead of `tape.expand` in a variety of transforms.

**Benefits:**

These transforms now allow non-commuting measurements through.

**Possible Drawbacks:**

We still have other transforms still relying on `tape.expand`. But we
can investigate those another day.

Introducing a cross-module dependency in a direction we don't want a
dependency. This could be fixed by moving `decompose` to the transforms
module, but that is a problem for another day.

**Related GitHub Issues:**

Fixes #5401 Fixes #5316 [sc-58086]  [sc-59118]

---------

Co-authored-by: Mudit Pandey <mudit.pandey@xanadu.ai>
Co-authored-by: Astral Cai <astral.cai@xanadu.ai>
Co-authored-by: Vincent Michaud-Rioux <vincentm@nanoacademic.com>
Co-authored-by: David Wierichs <david.wierichs@xanadu.ai>
Co-authored-by: lillian542 <38584660+lillian542@users.noreply.github.com>"
,PennyLaneAI,pennylane,pennylane/transforms/compile.py,"Fix transforms that error with non-commuting measurements (#5424)

**Context:**

`tape.expand` will error out if the tape has any non-commuting
measurements present. But multiple transforms that don't care about
measurements at all use it to decompose to a target gate set. Even when
`expand_measurements=False`, `tape.expand` requires measurements to be
commuting, or composite observables. And this is a core behavior of
`tape.expand` that people might rely on. It's not as much a bug as a
problematic feature. AKA load-bearing bug.

Fortunately, we now have `qml.devices.preprocess.decompose`, which is a
transform that is capable of decomposing to a target gateset. While yes,
this transform is in the `devices` module, so using it is introducing a
cross-module dependency in a direction that we do not want, it gets the
job done. I would call this a sign that we should potentially consider
moving it into the `transforms` module and making it's import path more
accessible.

**Description of the Change:**

Use `decompose` instead of `tape.expand` in a variety of transforms.

**Benefits:**

These transforms now allow non-commuting measurements through.

**Possible Drawbacks:**

We still have other transforms still relying on `tape.expand`. But we
can investigate those another day.

Introducing a cross-module dependency in a direction we don't want a
dependency. This could be fixed by moving `decompose` to the transforms
module, but that is a problem for another day.

**Related GitHub Issues:**

Fixes #5401 Fixes #5316 [sc-58086]  [sc-59118]

---------

Co-authored-by: Mudit Pandey <mudit.pandey@xanadu.ai>
Co-authored-by: Astral Cai <astral.cai@xanadu.ai>
Co-authored-by: Vincent Michaud-Rioux <vincentm@nanoacademic.com>
Co-authored-by: David Wierichs <david.wierichs@xanadu.ai>
Co-authored-by: lillian542 <38584660+lillian542@users.noreply.github.com>"
,PennyLaneAI,pennylane,pennylane/transforms/optimization/merge_rotations.py,"Fix transforms that error with non-commuting measurements (#5424)

**Context:**

`tape.expand` will error out if the tape has any non-commuting
measurements present. But multiple transforms that don't care about
measurements at all use it to decompose to a target gate set. Even when
`expand_measurements=False`, `tape.expand` requires measurements to be
commuting, or composite observables. And this is a core behavior of
`tape.expand` that people might rely on. It's not as much a bug as a
problematic feature. AKA load-bearing bug.

Fortunately, we now have `qml.devices.preprocess.decompose`, which is a
transform that is capable of decomposing to a target gateset. While yes,
this transform is in the `devices` module, so using it is introducing a
cross-module dependency in a direction that we do not want, it gets the
job done. I would call this a sign that we should potentially consider
moving it into the `transforms` module and making it's import path more
accessible.

**Description of the Change:**

Use `decompose` instead of `tape.expand` in a variety of transforms.

**Benefits:**

These transforms now allow non-commuting measurements through.

**Possible Drawbacks:**

We still have other transforms still relying on `tape.expand`. But we
can investigate those another day.

Introducing a cross-module dependency in a direction we don't want a
dependency. This could be fixed by moving `decompose` to the transforms
module, but that is a problem for another day.

**Related GitHub Issues:**

Fixes #5401 Fixes #5316 [sc-58086]  [sc-59118]

---------

Co-authored-by: Mudit Pandey <mudit.pandey@xanadu.ai>
Co-authored-by: Astral Cai <astral.cai@xanadu.ai>
Co-authored-by: Vincent Michaud-Rioux <vincentm@nanoacademic.com>
Co-authored-by: David Wierichs <david.wierichs@xanadu.ai>
Co-authored-by: lillian542 <38584660+lillian542@users.noreply.github.com>"
,PennyLaneAI,pennylane,pennylane/transforms/transpile.py,"Fix transforms that error with non-commuting measurements (#5424)

**Context:**

`tape.expand` will error out if the tape has any non-commuting
measurements present. But multiple transforms that don't care about
measurements at all use it to decompose to a target gate set. Even when
`expand_measurements=False`, `tape.expand` requires measurements to be
commuting, or composite observables. And this is a core behavior of
`tape.expand` that people might rely on. It's not as much a bug as a
problematic feature. AKA load-bearing bug.

Fortunately, we now have `qml.devices.preprocess.decompose`, which is a
transform that is capable of decomposing to a target gateset. While yes,
this transform is in the `devices` module, so using it is introducing a
cross-module dependency in a direction that we do not want, it gets the
job done. I would call this a sign that we should potentially consider
moving it into the `transforms` module and making it's import path more
accessible.

**Description of the Change:**

Use `decompose` instead of `tape.expand` in a variety of transforms.

**Benefits:**

These transforms now allow non-commuting measurements through.

**Possible Drawbacks:**

We still have other transforms still relying on `tape.expand`. But we
can investigate those another day.

Introducing a cross-module dependency in a direction we don't want a
dependency. This could be fixed by moving `decompose` to the transforms
module, but that is a problem for another day.

**Related GitHub Issues:**

Fixes #5401 Fixes #5316 [sc-58086]  [sc-59118]

---------

Co-authored-by: Mudit Pandey <mudit.pandey@xanadu.ai>
Co-authored-by: Astral Cai <astral.cai@xanadu.ai>
Co-authored-by: Vincent Michaud-Rioux <vincentm@nanoacademic.com>
Co-authored-by: David Wierichs <david.wierichs@xanadu.ai>
Co-authored-by: lillian542 <38584660+lillian542@users.noreply.github.com>"
,PennyLaneAI,pennylane,tests/devices/default_qubit/test_default_qubit_preprocessing.py,"Fix transforms that error with non-commuting measurements (#5424)

**Context:**

`tape.expand` will error out if the tape has any non-commuting
measurements present. But multiple transforms that don't care about
measurements at all use it to decompose to a target gate set. Even when
`expand_measurements=False`, `tape.expand` requires measurements to be
commuting, or composite observables. And this is a core behavior of
`tape.expand` that people might rely on. It's not as much a bug as a
problematic feature. AKA load-bearing bug.

Fortunately, we now have `qml.devices.preprocess.decompose`, which is a
transform that is capable of decomposing to a target gateset. While yes,
this transform is in the `devices` module, so using it is introducing a
cross-module dependency in a direction that we do not want, it gets the
job done. I would call this a sign that we should potentially consider
moving it into the `transforms` module and making it's import path more
accessible.

**Description of the Change:**

Use `decompose` instead of `tape.expand` in a variety of transforms.

**Benefits:**

These transforms now allow non-commuting measurements through.

**Possible Drawbacks:**

We still have other transforms still relying on `tape.expand`. But we
can investigate those another day.

Introducing a cross-module dependency in a direction we don't want a
dependency. This could be fixed by moving `decompose` to the transforms
module, but that is a problem for another day.

**Related GitHub Issues:**

Fixes #5401 Fixes #5316 [sc-58086]  [sc-59118]

---------

Co-authored-by: Mudit Pandey <mudit.pandey@xanadu.ai>
Co-authored-by: Astral Cai <astral.cai@xanadu.ai>
Co-authored-by: Vincent Michaud-Rioux <vincentm@nanoacademic.com>
Co-authored-by: David Wierichs <david.wierichs@xanadu.ai>
Co-authored-by: lillian542 <38584660+lillian542@users.noreply.github.com>"
,PennyLaneAI,pennylane,tests/devices/test_default_clifford.py,"Fix transforms that error with non-commuting measurements (#5424)

**Context:**

`tape.expand` will error out if the tape has any non-commuting
measurements present. But multiple transforms that don't care about
measurements at all use it to decompose to a target gate set. Even when
`expand_measurements=False`, `tape.expand` requires measurements to be
commuting, or composite observables. And this is a core behavior of
`tape.expand` that people might rely on. It's not as much a bug as a
problematic feature. AKA load-bearing bug.

Fortunately, we now have `qml.devices.preprocess.decompose`, which is a
transform that is capable of decomposing to a target gateset. While yes,
this transform is in the `devices` module, so using it is introducing a
cross-module dependency in a direction that we do not want, it gets the
job done. I would call this a sign that we should potentially consider
moving it into the `transforms` module and making it's import path more
accessible.

**Description of the Change:**

Use `decompose` instead of `tape.expand` in a variety of transforms.

**Benefits:**

These transforms now allow non-commuting measurements through.

**Possible Drawbacks:**

We still have other transforms still relying on `tape.expand`. But we
can investigate those another day.

Introducing a cross-module dependency in a direction we don't want a
dependency. This could be fixed by moving `decompose` to the transforms
module, but that is a problem for another day.

**Related GitHub Issues:**

Fixes #5401 Fixes #5316 [sc-58086]  [sc-59118]

---------

Co-authored-by: Mudit Pandey <mudit.pandey@xanadu.ai>
Co-authored-by: Astral Cai <astral.cai@xanadu.ai>
Co-authored-by: Vincent Michaud-Rioux <vincentm@nanoacademic.com>
Co-authored-by: David Wierichs <david.wierichs@xanadu.ai>
Co-authored-by: lillian542 <38584660+lillian542@users.noreply.github.com>"
,PennyLaneAI,pennylane,tests/devices/test_preprocess.py,"Fix transforms that error with non-commuting measurements (#5424)

**Context:**

`tape.expand` will error out if the tape has any non-commuting
measurements present. But multiple transforms that don't care about
measurements at all use it to decompose to a target gate set. Even when
`expand_measurements=False`, `tape.expand` requires measurements to be
commuting, or composite observables. And this is a core behavior of
`tape.expand` that people might rely on. It's not as much a bug as a
problematic feature. AKA load-bearing bug.

Fortunately, we now have `qml.devices.preprocess.decompose`, which is a
transform that is capable of decomposing to a target gateset. While yes,
this transform is in the `devices` module, so using it is introducing a
cross-module dependency in a direction that we do not want, it gets the
job done. I would call this a sign that we should potentially consider
moving it into the `transforms` module and making it's import path more
accessible.

**Description of the Change:**

Use `decompose` instead of `tape.expand` in a variety of transforms.

**Benefits:**

These transforms now allow non-commuting measurements through.

**Possible Drawbacks:**

We still have other transforms still relying on `tape.expand`. But we
can investigate those another day.

Introducing a cross-module dependency in a direction we don't want a
dependency. This could be fixed by moving `decompose` to the transforms
module, but that is a problem for another day.

**Related GitHub Issues:**

Fixes #5401 Fixes #5316 [sc-58086]  [sc-59118]

---------

Co-authored-by: Mudit Pandey <mudit.pandey@xanadu.ai>
Co-authored-by: Astral Cai <astral.cai@xanadu.ai>
Co-authored-by: Vincent Michaud-Rioux <vincentm@nanoacademic.com>
Co-authored-by: David Wierichs <david.wierichs@xanadu.ai>
Co-authored-by: lillian542 <38584660+lillian542@users.noreply.github.com>"
,PennyLaneAI,pennylane,tests/gradients/finite_diff/test_finite_difference.py,"Fix transforms that error with non-commuting measurements (#5424)

**Context:**

`tape.expand` will error out if the tape has any non-commuting
measurements present. But multiple transforms that don't care about
measurements at all use it to decompose to a target gate set. Even when
`expand_measurements=False`, `tape.expand` requires measurements to be
commuting, or composite observables. And this is a core behavior of
`tape.expand` that people might rely on. It's not as much a bug as a
problematic feature. AKA load-bearing bug.

Fortunately, we now have `qml.devices.preprocess.decompose`, which is a
transform that is capable of decomposing to a target gateset. While yes,
this transform is in the `devices` module, so using it is introducing a
cross-module dependency in a direction that we do not want, it gets the
job done. I would call this a sign that we should potentially consider
moving it into the `transforms` module and making it's import path more
accessible.

**Description of the Change:**

Use `decompose` instead of `tape.expand` in a variety of transforms.

**Benefits:**

These transforms now allow non-commuting measurements through.

**Possible Drawbacks:**

We still have other transforms still relying on `tape.expand`. But we
can investigate those another day.

Introducing a cross-module dependency in a direction we don't want a
dependency. This could be fixed by moving `decompose` to the transforms
module, but that is a problem for another day.

**Related GitHub Issues:**

Fixes #5401 Fixes #5316 [sc-58086]  [sc-59118]

---------

Co-authored-by: Mudit Pandey <mudit.pandey@xanadu.ai>
Co-authored-by: Astral Cai <astral.cai@xanadu.ai>
Co-authored-by: Vincent Michaud-Rioux <vincentm@nanoacademic.com>
Co-authored-by: David Wierichs <david.wierichs@xanadu.ai>
Co-authored-by: lillian542 <38584660+lillian542@users.noreply.github.com>"
,PennyLaneAI,pennylane,tests/gradients/parameter_shift/test_parameter_shift.py,"Fix transforms that error with non-commuting measurements (#5424)

**Context:**

`tape.expand` will error out if the tape has any non-commuting
measurements present. But multiple transforms that don't care about
measurements at all use it to decompose to a target gate set. Even when
`expand_measurements=False`, `tape.expand` requires measurements to be
commuting, or composite observables. And this is a core behavior of
`tape.expand` that people might rely on. It's not as much a bug as a
problematic feature. AKA load-bearing bug.

Fortunately, we now have `qml.devices.preprocess.decompose`, which is a
transform that is capable of decomposing to a target gateset. While yes,
this transform is in the `devices` module, so using it is introducing a
cross-module dependency in a direction that we do not want, it gets the
job done. I would call this a sign that we should potentially consider
moving it into the `transforms` module and making it's import path more
accessible.

**Description of the Change:**

Use `decompose` instead of `tape.expand` in a variety of transforms.

**Benefits:**

These transforms now allow non-commuting measurements through.

**Possible Drawbacks:**

We still have other transforms still relying on `tape.expand`. But we
can investigate those another day.

Introducing a cross-module dependency in a direction we don't want a
dependency. This could be fixed by moving `decompose` to the transforms
module, but that is a problem for another day.

**Related GitHub Issues:**

Fixes #5401 Fixes #5316 [sc-58086]  [sc-59118]

---------

Co-authored-by: Mudit Pandey <mudit.pandey@xanadu.ai>
Co-authored-by: Astral Cai <astral.cai@xanadu.ai>
Co-authored-by: Vincent Michaud-Rioux <vincentm@nanoacademic.com>
Co-authored-by: David Wierichs <david.wierichs@xanadu.ai>
Co-authored-by: lillian542 <38584660+lillian542@users.noreply.github.com>"
,PennyLaneAI,pennylane,tests/ops/op_math/test_pow_op.py,"Fix transforms that error with non-commuting measurements (#5424)

**Context:**

`tape.expand` will error out if the tape has any non-commuting
measurements present. But multiple transforms that don't care about
measurements at all use it to decompose to a target gate set. Even when
`expand_measurements=False`, `tape.expand` requires measurements to be
commuting, or composite observables. And this is a core behavior of
`tape.expand` that people might rely on. It's not as much a bug as a
problematic feature. AKA load-bearing bug.

Fortunately, we now have `qml.devices.preprocess.decompose`, which is a
transform that is capable of decomposing to a target gateset. While yes,
this transform is in the `devices` module, so using it is introducing a
cross-module dependency in a direction that we do not want, it gets the
job done. I would call this a sign that we should potentially consider
moving it into the `transforms` module and making it's import path more
accessible.

**Description of the Change:**

Use `decompose` instead of `tape.expand` in a variety of transforms.

**Benefits:**

These transforms now allow non-commuting measurements through.

**Possible Drawbacks:**

We still have other transforms still relying on `tape.expand`. But we
can investigate those another day.

Introducing a cross-module dependency in a direction we don't want a
dependency. This could be fixed by moving `decompose` to the transforms
module, but that is a problem for another day.

**Related GitHub Issues:**

Fixes #5401 Fixes #5316 [sc-58086]  [sc-59118]

---------

Co-authored-by: Mudit Pandey <mudit.pandey@xanadu.ai>
Co-authored-by: Astral Cai <astral.cai@xanadu.ai>
Co-authored-by: Vincent Michaud-Rioux <vincentm@nanoacademic.com>
Co-authored-by: David Wierichs <david.wierichs@xanadu.ai>
Co-authored-by: lillian542 <38584660+lillian542@users.noreply.github.com>"
,PennyLaneAI,pennylane,tests/transforms/test_compile.py,"Fix transforms that error with non-commuting measurements (#5424)

**Context:**

`tape.expand` will error out if the tape has any non-commuting
measurements present. But multiple transforms that don't care about
measurements at all use it to decompose to a target gate set. Even when
`expand_measurements=False`, `tape.expand` requires measurements to be
commuting, or composite observables. And this is a core behavior of
`tape.expand` that people might rely on. It's not as much a bug as a
problematic feature. AKA load-bearing bug.

Fortunately, we now have `qml.devices.preprocess.decompose`, which is a
transform that is capable of decomposing to a target gateset. While yes,
this transform is in the `devices` module, so using it is introducing a
cross-module dependency in a direction that we do not want, it gets the
job done. I would call this a sign that we should potentially consider
moving it into the `transforms` module and making it's import path more
accessible.

**Description of the Change:**

Use `decompose` instead of `tape.expand` in a variety of transforms.

**Benefits:**

These transforms now allow non-commuting measurements through.

**Possible Drawbacks:**

We still have other transforms still relying on `tape.expand`. But we
can investigate those another day.

Introducing a cross-module dependency in a direction we don't want a
dependency. This could be fixed by moving `decompose` to the transforms
module, but that is a problem for another day.

**Related GitHub Issues:**

Fixes #5401 Fixes #5316 [sc-58086]  [sc-59118]

---------

Co-authored-by: Mudit Pandey <mudit.pandey@xanadu.ai>
Co-authored-by: Astral Cai <astral.cai@xanadu.ai>
Co-authored-by: Vincent Michaud-Rioux <vincentm@nanoacademic.com>
Co-authored-by: David Wierichs <david.wierichs@xanadu.ai>
Co-authored-by: lillian542 <38584660+lillian542@users.noreply.github.com>"
,PennyLaneAI,pennylane,tests/transforms/test_optimization/test_merge_rotations.py,"Fix transforms that error with non-commuting measurements (#5424)

**Context:**

`tape.expand` will error out if the tape has any non-commuting
measurements present. But multiple transforms that don't care about
measurements at all use it to decompose to a target gate set. Even when
`expand_measurements=False`, `tape.expand` requires measurements to be
commuting, or composite observables. And this is a core behavior of
`tape.expand` that people might rely on. It's not as much a bug as a
problematic feature. AKA load-bearing bug.

Fortunately, we now have `qml.devices.preprocess.decompose`, which is a
transform that is capable of decomposing to a target gateset. While yes,
this transform is in the `devices` module, so using it is introducing a
cross-module dependency in a direction that we do not want, it gets the
job done. I would call this a sign that we should potentially consider
moving it into the `transforms` module and making it's import path more
accessible.

**Description of the Change:**

Use `decompose` instead of `tape.expand` in a variety of transforms.

**Benefits:**

These transforms now allow non-commuting measurements through.

**Possible Drawbacks:**

We still have other transforms still relying on `tape.expand`. But we
can investigate those another day.

Introducing a cross-module dependency in a direction we don't want a
dependency. This could be fixed by moving `decompose` to the transforms
module, but that is a problem for another day.

**Related GitHub Issues:**

Fixes #5401 Fixes #5316 [sc-58086]  [sc-59118]

---------

Co-authored-by: Mudit Pandey <mudit.pandey@xanadu.ai>
Co-authored-by: Astral Cai <astral.cai@xanadu.ai>
Co-authored-by: Vincent Michaud-Rioux <vincentm@nanoacademic.com>
Co-authored-by: David Wierichs <david.wierichs@xanadu.ai>
Co-authored-by: lillian542 <38584660+lillian542@users.noreply.github.com>"
,PennyLaneAI,pennylane,tests/transforms/test_transpile.py,"Fix transforms that error with non-commuting measurements (#5424)

**Context:**

`tape.expand` will error out if the tape has any non-commuting
measurements present. But multiple transforms that don't care about
measurements at all use it to decompose to a target gate set. Even when
`expand_measurements=False`, `tape.expand` requires measurements to be
commuting, or composite observables. And this is a core behavior of
`tape.expand` that people might rely on. It's not as much a bug as a
problematic feature. AKA load-bearing bug.

Fortunately, we now have `qml.devices.preprocess.decompose`, which is a
transform that is capable of decomposing to a target gateset. While yes,
this transform is in the `devices` module, so using it is introducing a
cross-module dependency in a direction that we do not want, it gets the
job done. I would call this a sign that we should potentially consider
moving it into the `transforms` module and making it's import path more
accessible.

**Description of the Change:**

Use `decompose` instead of `tape.expand` in a variety of transforms.

**Benefits:**

These transforms now allow non-commuting measurements through.

**Possible Drawbacks:**

We still have other transforms still relying on `tape.expand`. But we
can investigate those another day.

Introducing a cross-module dependency in a direction we don't want a
dependency. This could be fixed by moving `decompose` to the transforms
module, but that is a problem for another day.

**Related GitHub Issues:**

Fixes #5401 Fixes #5316 [sc-58086]  [sc-59118]

---------

Co-authored-by: Mudit Pandey <mudit.pandey@xanadu.ai>
Co-authored-by: Astral Cai <astral.cai@xanadu.ai>
Co-authored-by: Vincent Michaud-Rioux <vincentm@nanoacademic.com>
Co-authored-by: David Wierichs <david.wierichs@xanadu.ai>
Co-authored-by: lillian542 <38584660+lillian542@users.noreply.github.com>"
,tensorflow,quantum,docs/tutorials/hello_many_worlds.ipynb,"[WIP] Upgrade to tf2.15. (#809)

* [WIP] Upgrade to tf2.15.

* format and wheel test fixes.

* Version bump again for wheel test.

* Back to python3.10

* remove setup.py deps.

* more format fixes.

* yet more format.

* C++ code formats.

* Tutorial fix p1.

* Tutorial fix p2.

* Tutorials p3.

* Add updated install instructions and tutorial install versions.

* final cleanup

* add setup.py

---------

Co-authored-by: root <root@google.com>"
,tensorflow,quantum,docs/tutorials/qcnn.ipynb,"[WIP] Upgrade to tf2.15. (#809)

* [WIP] Upgrade to tf2.15.

* format and wheel test fixes.

* Version bump again for wheel test.

* Back to python3.10

* remove setup.py deps.

* more format fixes.

* yet more format.

* C++ code formats.

* Tutorial fix p1.

* Tutorial fix p2.

* Tutorials p3.

* Add updated install instructions and tutorial install versions.

* final cleanup

* add setup.py

---------

Co-authored-by: root <root@google.com>"
,tensorflow,quantum,tensorflow_quantum/core/ops/circuit_execution_ops_test.py,"[WIP] Upgrade to tf2.15. (#809)

* [WIP] Upgrade to tf2.15.

* format and wheel test fixes.

* Version bump again for wheel test.

* Back to python3.10

* remove setup.py deps.

* more format fixes.

* yet more format.

* C++ code formats.

* Tutorial fix p1.

* Tutorial fix p2.

* Tutorials p3.

* Add updated install instructions and tutorial install versions.

* final cleanup

* add setup.py

---------

Co-authored-by: root <root@google.com>"
,tensorflow,quantum,tensorflow_quantum/core/ops/cirq_ops.py,"[WIP] Upgrade to tf2.15. (#809)

* [WIP] Upgrade to tf2.15.

* format and wheel test fixes.

* Version bump again for wheel test.

* Back to python3.10

* remove setup.py deps.

* more format fixes.

* yet more format.

* C++ code formats.

* Tutorial fix p1.

* Tutorial fix p2.

* Tutorials p3.

* Add updated install instructions and tutorial install versions.

* final cleanup

* add setup.py

---------

Co-authored-by: root <root@google.com>"
,tensorflow,quantum,tensorflow_quantum/core/serialize/op_deserializer_test.py,"[WIP] Upgrade to tf2.15. (#809)

* [WIP] Upgrade to tf2.15.

* format and wheel test fixes.

* Version bump again for wheel test.

* Back to python3.10

* remove setup.py deps.

* more format fixes.

* yet more format.

* C++ code formats.

* Tutorial fix p1.

* Tutorial fix p2.

* Tutorials p3.

* Add updated install instructions and tutorial install versions.

* final cleanup

* add setup.py

---------

Co-authored-by: root <root@google.com>"
,tensorflow,quantum,tensorflow_quantum/core/serialize/op_serializer_test.py,"[WIP] Upgrade to tf2.15. (#809)

* [WIP] Upgrade to tf2.15.

* format and wheel test fixes.

* Version bump again for wheel test.

* Back to python3.10

* remove setup.py deps.

* more format fixes.

* yet more format.

* C++ code formats.

* Tutorial fix p1.

* Tutorial fix p2.

* Tutorials p3.

* Add updated install instructions and tutorial install versions.

* final cleanup

* add setup.py

---------

Co-authored-by: root <root@google.com>"
,tensorflow,quantum,tensorflow_quantum/python/util.py,"[WIP] Upgrade to tf2.15. (#809)

* [WIP] Upgrade to tf2.15.

* format and wheel test fixes.

* Version bump again for wheel test.

* Back to python3.10

* remove setup.py deps.

* more format fixes.

* yet more format.

* C++ code formats.

* Tutorial fix p1.

* Tutorial fix p2.

* Tutorials p3.

* Add updated install instructions and tutorial install versions.

* final cleanup

* add setup.py

---------

Co-authored-by: root <root@google.com>"
,tensorflow,quantum,WORKSPACE,"Roll back to working state. (#780)

* Revert ""Merge pull request #776 from Sinestro38/master""

This reverts commit b4c7ea151275cb75bd75e5c2d35f36abf8679fd8, reversing
changes made to 140277d10ca63b541acb481ecaf899f91c846e5b.

* Revert ""remove release notes md""

This reverts commit 25313f41e8350ef90153bef0f03c9d576d34b1dd.

* Revert ""Merge remote-tracking branch 'forkB/fix_warnings'""

This reverts commit d78931498fd4ee6d06ffba9271f2d948827c58fb, reversing
changes made to fe3a96e24a3001b76547a36bbe3301f8e5a8a255.

* Revert ""Merge pull request #772 from Sinestro38/fix_license""

This reverts commit 140277d10ca63b541acb481ecaf899f91c846e5b, reversing
changes made to 7131f9e4d2d289e51f9705161b29c45159da1921.

* Revert ""fix ubuntu version to 20.04""

This reverts commit 803622aa2f59983b81086dc07d562aca0c955f2b.

* Revert ""[debug] get ubuntu  version of runner""

This reverts commit 8002690bcba9c4bdf28c961f38d2a89cd38f14dc.

* Revert ""update ubuntu github runner from 18.04 to latest""

This reverts commit 471573ae6883f767efe61d20f5fa7a88de60c012.

* Revert ""update > to ~""

This reverts commit fe3a96e24a3001b76547a36bbe3301f8e5a8a255.

* Revert ""update cirq dependency news""

This reverts commit a44ab2659fde41daf73f1abbcca56aa34d78661d.

* Revert ""Update release.md""

This reverts commit a7a67c8afc5f977a8347be0a78001c4c9fbd772a.

* Revert ""add notes""

This reverts commit c7f729a01527bb065bdc5a0e7b1ea43e1330f4ba.

* Revert ""update version num""

This reverts commit f933b6925b7ef673c78dbbb750e0a75e3c70dcd3.

* Revert ""Update release.md""

This reverts commit c2ab0d5e08af1eed85f97e8ab5794bbbc7c20833.

* Revert ""Create release.md""

This reverts commit ac7722ad7da4e529da40e0c2baccdaadf9c2c056.

* Revert ""Merge branch 'master' into master""

This reverts commit 7131f9e4d2d289e51f9705161b29c45159da1921, reversing
changes made to 2c1e7fa4778475040c149b23e2b2f661007a1f8e.

* Revert ""Upgrade bazel version 5.3.0 and fix some typo in tf version (#755)""

This reverts commit 2c1e7fa4778475040c149b23e2b2f661007a1f8e.

* Revert ""Merge pull request #3 from jaeyoo/pavan/remove_compute_small""

This reverts commit 79aae25dc5db7c7e1ae2a83c23a0fb88af2d19c4, reversing
changes made to 46aa1f0eb43473967f81e14b00a706adefc37482.

* Revert ""Fix lint""

This reverts commit 20815bc5f5977f189f467d5726f101b82f1498f1.

* Revert ""Fix lint""

This reverts commit 47e6aaeefffa7d8ce66ea632998dceb2a15be28c.

* Revert ""Update release/BUILD with `if_cuda_is_configured`""

This reverts commit f2cd2552b001004bae0f3d843860e5485b7443a2.

* Revert ""add :tfq_simulate_ops_cuquantum_py target to release BUILD""

This reverts commit 3e8a9a42d16e1b092d29db1af623c2ff8609baf8.

* Revert ""remove computeSmall from cuda and cuquantum kernels""

This reverts commit 5cb7fa153f694e4ae1d1eb94c69b78e5b0d88e4b.

* Revert ""Merge pull request #2 from jaeyoo/cuquantum_support""

This reverts commit 46aa1f0eb43473967f81e14b00a706adefc37482, reversing
changes made to 2a5fd073deecc9c9a07cf2d85e7befb3f3554fcb.

* Revert ""Merge pull request #1 from jaeyoo/cuda_support""

This reverts commit 2a5fd073deecc9c9a07cf2d85e7befb3f3554fcb, reversing
changes made to b0dd7451567fa1a7ad6f0907320344617892c9ea.

* Revert ""Merge branch 'master' into cuda_support""

This reverts commit f19298ccb5bdcbee27b931f43690cad228420f57, reversing
changes made to 4f6290acab99f65733c36aff4f628c1b11ae42a9.

* Revert ""Add cuQuantum test (but failed at numeric diff test)""

This reverts commit f97c496bfd939b2ec5534718618be76274b76e20.

* Revert ""Fix ComputeSmall and enable it.""

This reverts commit 4f6290acab99f65733c36aff4f628c1b11ae42a9.

* Revert ""Fix tfq_simulate_ops_cuda op test.""

This reverts commit 66442482a21fc7139fb2cdc69a36fd2f5e9c207f.

* Revert ""Temporarily turn on ComputeLarge always""

This reverts commit 23dd880224b209430dfda4c3a88a351c64dce28a.

* Revert ""Upgrade TF version from 2.7 to 2.11 (#749)""

This reverts commit 20cfde5eb2f6188d35bab1375c98572ae4571b20.

* Revert ""TFQ simulate expectation CUDA op""

This reverts commit f063417f4b08c6b430c8822bc9cb8ad8a7819ff9.

* Revert ""Update ci_install bazel version, removed duplicated code lines.""

This reverts commit 1317edf584cf978a106ecb657faf3d3fdef67402.

* Revert ""Fix typo""

This reverts commit a765f7ff84e2b7edb19e324b8d6a33171a7d5984.

* Revert ""Upgrade seaborn version to 0.12.0""

This reverts commit 4e7c22dedc2e231d7eab3dd4cd3f0235444e51e0.

* Revert ""Fix tutorial errors""

This reverts commit c185891066ce453dcac56fc19d172bd71150a031.

* Revert ""Fix tutorial error""

This reverts commit c5df061088fc7d69fde7f8f695e0a43fd2a32213.

* Revert ""Upgrade the latest gym for notebook tutorial.""

This reverts commit 9b94ebf2e4ff4cbabacf03bd52eebab4327409f0.

* Revert ""Format optimizers""

This reverts commit 39a811d1a2ba8e854f800ba23157a7cc017a8cf4.

* Revert ""Format""

This reverts commit a22b98fa4fef34a4df9174e33d2c455b675337c4.

* Revert ""Upgrade to TF v2.11""

This reverts commit 26fa2dfda35ab64585d03e20def1dfd42031b123.

* Upgrade TF version from 2.7 to 2.11 (#749)

* Upgrade bazel version to 5.1.0 for building with TFv2.11.0

* Upgrade to TF v2.11

* Bump up the version of numpy to v1.24.2

* Format

* Fix tf.Variable inside tf.while_loop issues inside optimizers

* Format optimizers

* Upgrade the latest gym for notebook tutorial.

* Fix tutorial error

* Fix tutorial errors

* Upgrade seaborn version to 0.12.0

* Fix typo

* Remove debug print

* Update ci_install bazel version, removed duplicated code lines.

* Upgrade bazel version 5.3.0 and fix some typo in tf version (#755)

* fix compatability issues.

* re-trigger kokoro

* re-trigger kokoro

* re-trigger kokoro

* re-trigger kokoro

* re-trigger kokoro

* Lower tolerances.

* Bump CI python version.

---------

Co-authored-by: Jae H. Yoo <40815393+jaeyoo@users.noreply.github.com>"
,tensorflow,quantum,tensorflow_quantum/core/ops/math_ops/simulate_mps_test.py,"Roll back to working state. (#780)

* Revert ""Merge pull request #776 from Sinestro38/master""

This reverts commit b4c7ea151275cb75bd75e5c2d35f36abf8679fd8, reversing
changes made to 140277d10ca63b541acb481ecaf899f91c846e5b.

* Revert ""remove release notes md""

This reverts commit 25313f41e8350ef90153bef0f03c9d576d34b1dd.

* Revert ""Merge remote-tracking branch 'forkB/fix_warnings'""

This reverts commit d78931498fd4ee6d06ffba9271f2d948827c58fb, reversing
changes made to fe3a96e24a3001b76547a36bbe3301f8e5a8a255.

* Revert ""Merge pull request #772 from Sinestro38/fix_license""

This reverts commit 140277d10ca63b541acb481ecaf899f91c846e5b, reversing
changes made to 7131f9e4d2d289e51f9705161b29c45159da1921.

* Revert ""fix ubuntu version to 20.04""

This reverts commit 803622aa2f59983b81086dc07d562aca0c955f2b.

* Revert ""[debug] get ubuntu  version of runner""

This reverts commit 8002690bcba9c4bdf28c961f38d2a89cd38f14dc.

* Revert ""update ubuntu github runner from 18.04 to latest""

This reverts commit 471573ae6883f767efe61d20f5fa7a88de60c012.

* Revert ""update > to ~""

This reverts commit fe3a96e24a3001b76547a36bbe3301f8e5a8a255.

* Revert ""update cirq dependency news""

This reverts commit a44ab2659fde41daf73f1abbcca56aa34d78661d.

* Revert ""Update release.md""

This reverts commit a7a67c8afc5f977a8347be0a78001c4c9fbd772a.

* Revert ""add notes""

This reverts commit c7f729a01527bb065bdc5a0e7b1ea43e1330f4ba.

* Revert ""update version num""

This reverts commit f933b6925b7ef673c78dbbb750e0a75e3c70dcd3.

* Revert ""Update release.md""

This reverts commit c2ab0d5e08af1eed85f97e8ab5794bbbc7c20833.

* Revert ""Create release.md""

This reverts commit ac7722ad7da4e529da40e0c2baccdaadf9c2c056.

* Revert ""Merge branch 'master' into master""

This reverts commit 7131f9e4d2d289e51f9705161b29c45159da1921, reversing
changes made to 2c1e7fa4778475040c149b23e2b2f661007a1f8e.

* Revert ""Upgrade bazel version 5.3.0 and fix some typo in tf version (#755)""

This reverts commit 2c1e7fa4778475040c149b23e2b2f661007a1f8e.

* Revert ""Merge pull request #3 from jaeyoo/pavan/remove_compute_small""

This reverts commit 79aae25dc5db7c7e1ae2a83c23a0fb88af2d19c4, reversing
changes made to 46aa1f0eb43473967f81e14b00a706adefc37482.

* Revert ""Fix lint""

This reverts commit 20815bc5f5977f189f467d5726f101b82f1498f1.

* Revert ""Fix lint""

This reverts commit 47e6aaeefffa7d8ce66ea632998dceb2a15be28c.

* Revert ""Update release/BUILD with `if_cuda_is_configured`""

This reverts commit f2cd2552b001004bae0f3d843860e5485b7443a2.

* Revert ""add :tfq_simulate_ops_cuquantum_py target to release BUILD""

This reverts commit 3e8a9a42d16e1b092d29db1af623c2ff8609baf8.

* Revert ""remove computeSmall from cuda and cuquantum kernels""

This reverts commit 5cb7fa153f694e4ae1d1eb94c69b78e5b0d88e4b.

* Revert ""Merge pull request #2 from jaeyoo/cuquantum_support""

This reverts commit 46aa1f0eb43473967f81e14b00a706adefc37482, reversing
changes made to 2a5fd073deecc9c9a07cf2d85e7befb3f3554fcb.

* Revert ""Merge pull request #1 from jaeyoo/cuda_support""

This reverts commit 2a5fd073deecc9c9a07cf2d85e7befb3f3554fcb, reversing
changes made to b0dd7451567fa1a7ad6f0907320344617892c9ea.

* Revert ""Merge branch 'master' into cuda_support""

This reverts commit f19298ccb5bdcbee27b931f43690cad228420f57, reversing
changes made to 4f6290acab99f65733c36aff4f628c1b11ae42a9.

* Revert ""Add cuQuantum test (but failed at numeric diff test)""

This reverts commit f97c496bfd939b2ec5534718618be76274b76e20.

* Revert ""Fix ComputeSmall and enable it.""

This reverts commit 4f6290acab99f65733c36aff4f628c1b11ae42a9.

* Revert ""Fix tfq_simulate_ops_cuda op test.""

This reverts commit 66442482a21fc7139fb2cdc69a36fd2f5e9c207f.

* Revert ""Temporarily turn on ComputeLarge always""

This reverts commit 23dd880224b209430dfda4c3a88a351c64dce28a.

* Revert ""Upgrade TF version from 2.7 to 2.11 (#749)""

This reverts commit 20cfde5eb2f6188d35bab1375c98572ae4571b20.

* Revert ""TFQ simulate expectation CUDA op""

This reverts commit f063417f4b08c6b430c8822bc9cb8ad8a7819ff9.

* Revert ""Update ci_install bazel version, removed duplicated code lines.""

This reverts commit 1317edf584cf978a106ecb657faf3d3fdef67402.

* Revert ""Fix typo""

This reverts commit a765f7ff84e2b7edb19e324b8d6a33171a7d5984.

* Revert ""Upgrade seaborn version to 0.12.0""

This reverts commit 4e7c22dedc2e231d7eab3dd4cd3f0235444e51e0.

* Revert ""Fix tutorial errors""

This reverts commit c185891066ce453dcac56fc19d172bd71150a031.

* Revert ""Fix tutorial error""

This reverts commit c5df061088fc7d69fde7f8f695e0a43fd2a32213.

* Revert ""Upgrade the latest gym for notebook tutorial.""

This reverts commit 9b94ebf2e4ff4cbabacf03bd52eebab4327409f0.

* Revert ""Format optimizers""

This reverts commit 39a811d1a2ba8e854f800ba23157a7cc017a8cf4.

* Revert ""Format""

This reverts commit a22b98fa4fef34a4df9174e33d2c455b675337c4.

* Revert ""Upgrade to TF v2.11""

This reverts commit 26fa2dfda35ab64585d03e20def1dfd42031b123.

* Upgrade TF version from 2.7 to 2.11 (#749)

* Upgrade bazel version to 5.1.0 for building with TFv2.11.0

* Upgrade to TF v2.11

* Bump up the version of numpy to v1.24.2

* Format

* Fix tf.Variable inside tf.while_loop issues inside optimizers

* Format optimizers

* Upgrade the latest gym for notebook tutorial.

* Fix tutorial error

* Fix tutorial errors

* Upgrade seaborn version to 0.12.0

* Fix typo

* Remove debug print

* Update ci_install bazel version, removed duplicated code lines.

* Upgrade bazel version 5.3.0 and fix some typo in tf version (#755)

* fix compatability issues.

* re-trigger kokoro

* re-trigger kokoro

* re-trigger kokoro

* re-trigger kokoro

* re-trigger kokoro

* Lower tolerances.

* Bump CI python version.

---------

Co-authored-by: Jae H. Yoo <40815393+jaeyoo@users.noreply.github.com>"
,tensorflow,quantum,tensorflow_quantum/core/ops/tfq_simulate_expectation_op_cuda.cu.cc,"Roll back to working state. (#780)

* Revert ""Merge pull request #776 from Sinestro38/master""

This reverts commit b4c7ea151275cb75bd75e5c2d35f36abf8679fd8, reversing
changes made to 140277d10ca63b541acb481ecaf899f91c846e5b.

* Revert ""remove release notes md""

This reverts commit 25313f41e8350ef90153bef0f03c9d576d34b1dd.

* Revert ""Merge remote-tracking branch 'forkB/fix_warnings'""

This reverts commit d78931498fd4ee6d06ffba9271f2d948827c58fb, reversing
changes made to fe3a96e24a3001b76547a36bbe3301f8e5a8a255.

* Revert ""Merge pull request #772 from Sinestro38/fix_license""

This reverts commit 140277d10ca63b541acb481ecaf899f91c846e5b, reversing
changes made to 7131f9e4d2d289e51f9705161b29c45159da1921.

* Revert ""fix ubuntu version to 20.04""

This reverts commit 803622aa2f59983b81086dc07d562aca0c955f2b.

* Revert ""[debug] get ubuntu  version of runner""

This reverts commit 8002690bcba9c4bdf28c961f38d2a89cd38f14dc.

* Revert ""update ubuntu github runner from 18.04 to latest""

This reverts commit 471573ae6883f767efe61d20f5fa7a88de60c012.

* Revert ""update > to ~""

This reverts commit fe3a96e24a3001b76547a36bbe3301f8e5a8a255.

* Revert ""update cirq dependency news""

This reverts commit a44ab2659fde41daf73f1abbcca56aa34d78661d.

* Revert ""Update release.md""

This reverts commit a7a67c8afc5f977a8347be0a78001c4c9fbd772a.

* Revert ""add notes""

This reverts commit c7f729a01527bb065bdc5a0e7b1ea43e1330f4ba.

* Revert ""update version num""

This reverts commit f933b6925b7ef673c78dbbb750e0a75e3c70dcd3.

* Revert ""Update release.md""

This reverts commit c2ab0d5e08af1eed85f97e8ab5794bbbc7c20833.

* Revert ""Create release.md""

This reverts commit ac7722ad7da4e529da40e0c2baccdaadf9c2c056.

* Revert ""Merge branch 'master' into master""

This reverts commit 7131f9e4d2d289e51f9705161b29c45159da1921, reversing
changes made to 2c1e7fa4778475040c149b23e2b2f661007a1f8e.

* Revert ""Upgrade bazel version 5.3.0 and fix some typo in tf version (#755)""

This reverts commit 2c1e7fa4778475040c149b23e2b2f661007a1f8e.

* Revert ""Merge pull request #3 from jaeyoo/pavan/remove_compute_small""

This reverts commit 79aae25dc5db7c7e1ae2a83c23a0fb88af2d19c4, reversing
changes made to 46aa1f0eb43473967f81e14b00a706adefc37482.

* Revert ""Fix lint""

This reverts commit 20815bc5f5977f189f467d5726f101b82f1498f1.

* Revert ""Fix lint""

This reverts commit 47e6aaeefffa7d8ce66ea632998dceb2a15be28c.

* Revert ""Update release/BUILD with `if_cuda_is_configured`""

This reverts commit f2cd2552b001004bae0f3d843860e5485b7443a2.

* Revert ""add :tfq_simulate_ops_cuquantum_py target to release BUILD""

This reverts commit 3e8a9a42d16e1b092d29db1af623c2ff8609baf8.

* Revert ""remove computeSmall from cuda and cuquantum kernels""

This reverts commit 5cb7fa153f694e4ae1d1eb94c69b78e5b0d88e4b.

* Revert ""Merge pull request #2 from jaeyoo/cuquantum_support""

This reverts commit 46aa1f0eb43473967f81e14b00a706adefc37482, reversing
changes made to 2a5fd073deecc9c9a07cf2d85e7befb3f3554fcb.

* Revert ""Merge pull request #1 from jaeyoo/cuda_support""

This reverts commit 2a5fd073deecc9c9a07cf2d85e7befb3f3554fcb, reversing
changes made to b0dd7451567fa1a7ad6f0907320344617892c9ea.

* Revert ""Merge branch 'master' into cuda_support""

This reverts commit f19298ccb5bdcbee27b931f43690cad228420f57, reversing
changes made to 4f6290acab99f65733c36aff4f628c1b11ae42a9.

* Revert ""Add cuQuantum test (but failed at numeric diff test)""

This reverts commit f97c496bfd939b2ec5534718618be76274b76e20.

* Revert ""Fix ComputeSmall and enable it.""

This reverts commit 4f6290acab99f65733c36aff4f628c1b11ae42a9.

* Revert ""Fix tfq_simulate_ops_cuda op test.""

This reverts commit 66442482a21fc7139fb2cdc69a36fd2f5e9c207f.

* Revert ""Temporarily turn on ComputeLarge always""

This reverts commit 23dd880224b209430dfda4c3a88a351c64dce28a.

* Revert ""Upgrade TF version from 2.7 to 2.11 (#749)""

This reverts commit 20cfde5eb2f6188d35bab1375c98572ae4571b20.

* Revert ""TFQ simulate expectation CUDA op""

This reverts commit f063417f4b08c6b430c8822bc9cb8ad8a7819ff9.

* Revert ""Update ci_install bazel version, removed duplicated code lines.""

This reverts commit 1317edf584cf978a106ecb657faf3d3fdef67402.

* Revert ""Fix typo""

This reverts commit a765f7ff84e2b7edb19e324b8d6a33171a7d5984.

* Revert ""Upgrade seaborn version to 0.12.0""

This reverts commit 4e7c22dedc2e231d7eab3dd4cd3f0235444e51e0.

* Revert ""Fix tutorial errors""

This reverts commit c185891066ce453dcac56fc19d172bd71150a031.

* Revert ""Fix tutorial error""

This reverts commit c5df061088fc7d69fde7f8f695e0a43fd2a32213.

* Revert ""Upgrade the latest gym for notebook tutorial.""

This reverts commit 9b94ebf2e4ff4cbabacf03bd52eebab4327409f0.

* Revert ""Format optimizers""

This reverts commit 39a811d1a2ba8e854f800ba23157a7cc017a8cf4.

* Revert ""Format""

This reverts commit a22b98fa4fef34a4df9174e33d2c455b675337c4.

* Revert ""Upgrade to TF v2.11""

This reverts commit 26fa2dfda35ab64585d03e20def1dfd42031b123.

* Upgrade TF version from 2.7 to 2.11 (#749)

* Upgrade bazel version to 5.1.0 for building with TFv2.11.0

* Upgrade to TF v2.11

* Bump up the version of numpy to v1.24.2

* Format

* Fix tf.Variable inside tf.while_loop issues inside optimizers

* Format optimizers

* Upgrade the latest gym for notebook tutorial.

* Fix tutorial error

* Fix tutorial errors

* Upgrade seaborn version to 0.12.0

* Fix typo

* Remove debug print

* Update ci_install bazel version, removed duplicated code lines.

* Upgrade bazel version 5.3.0 and fix some typo in tf version (#755)

* fix compatability issues.

* re-trigger kokoro

* re-trigger kokoro

* re-trigger kokoro

* re-trigger kokoro

* re-trigger kokoro

* Lower tolerances.

* Bump CI python version.

---------

Co-authored-by: Jae H. Yoo <40815393+jaeyoo@users.noreply.github.com>"
,tensorflow,quantum,tensorflow_quantum/core/ops/tfq_simulate_expectation_op_cuquantum.cu.cc,"Roll back to working state. (#780)

* Revert ""Merge pull request #776 from Sinestro38/master""

This reverts commit b4c7ea151275cb75bd75e5c2d35f36abf8679fd8, reversing
changes made to 140277d10ca63b541acb481ecaf899f91c846e5b.

* Revert ""remove release notes md""

This reverts commit 25313f41e8350ef90153bef0f03c9d576d34b1dd.

* Revert ""Merge remote-tracking branch 'forkB/fix_warnings'""

This reverts commit d78931498fd4ee6d06ffba9271f2d948827c58fb, reversing
changes made to fe3a96e24a3001b76547a36bbe3301f8e5a8a255.

* Revert ""Merge pull request #772 from Sinestro38/fix_license""

This reverts commit 140277d10ca63b541acb481ecaf899f91c846e5b, reversing
changes made to 7131f9e4d2d289e51f9705161b29c45159da1921.

* Revert ""fix ubuntu version to 20.04""

This reverts commit 803622aa2f59983b81086dc07d562aca0c955f2b.

* Revert ""[debug] get ubuntu  version of runner""

This reverts commit 8002690bcba9c4bdf28c961f38d2a89cd38f14dc.

* Revert ""update ubuntu github runner from 18.04 to latest""

This reverts commit 471573ae6883f767efe61d20f5fa7a88de60c012.

* Revert ""update > to ~""

This reverts commit fe3a96e24a3001b76547a36bbe3301f8e5a8a255.

* Revert ""update cirq dependency news""

This reverts commit a44ab2659fde41daf73f1abbcca56aa34d78661d.

* Revert ""Update release.md""

This reverts commit a7a67c8afc5f977a8347be0a78001c4c9fbd772a.

* Revert ""add notes""

This reverts commit c7f729a01527bb065bdc5a0e7b1ea43e1330f4ba.

* Revert ""update version num""

This reverts commit f933b6925b7ef673c78dbbb750e0a75e3c70dcd3.

* Revert ""Update release.md""

This reverts commit c2ab0d5e08af1eed85f97e8ab5794bbbc7c20833.

* Revert ""Create release.md""

This reverts commit ac7722ad7da4e529da40e0c2baccdaadf9c2c056.

* Revert ""Merge branch 'master' into master""

This reverts commit 7131f9e4d2d289e51f9705161b29c45159da1921, reversing
changes made to 2c1e7fa4778475040c149b23e2b2f661007a1f8e.

* Revert ""Upgrade bazel version 5.3.0 and fix some typo in tf version (#755)""

This reverts commit 2c1e7fa4778475040c149b23e2b2f661007a1f8e.

* Revert ""Merge pull request #3 from jaeyoo/pavan/remove_compute_small""

This reverts commit 79aae25dc5db7c7e1ae2a83c23a0fb88af2d19c4, reversing
changes made to 46aa1f0eb43473967f81e14b00a706adefc37482.

* Revert ""Fix lint""

This reverts commit 20815bc5f5977f189f467d5726f101b82f1498f1.

* Revert ""Fix lint""

This reverts commit 47e6aaeefffa7d8ce66ea632998dceb2a15be28c.

* Revert ""Update release/BUILD with `if_cuda_is_configured`""

This reverts commit f2cd2552b001004bae0f3d843860e5485b7443a2.

* Revert ""add :tfq_simulate_ops_cuquantum_py target to release BUILD""

This reverts commit 3e8a9a42d16e1b092d29db1af623c2ff8609baf8.

* Revert ""remove computeSmall from cuda and cuquantum kernels""

This reverts commit 5cb7fa153f694e4ae1d1eb94c69b78e5b0d88e4b.

* Revert ""Merge pull request #2 from jaeyoo/cuquantum_support""

This reverts commit 46aa1f0eb43473967f81e14b00a706adefc37482, reversing
changes made to 2a5fd073deecc9c9a07cf2d85e7befb3f3554fcb.

* Revert ""Merge pull request #1 from jaeyoo/cuda_support""

This reverts commit 2a5fd073deecc9c9a07cf2d85e7befb3f3554fcb, reversing
changes made to b0dd7451567fa1a7ad6f0907320344617892c9ea.

* Revert ""Merge branch 'master' into cuda_support""

This reverts commit f19298ccb5bdcbee27b931f43690cad228420f57, reversing
changes made to 4f6290acab99f65733c36aff4f628c1b11ae42a9.

* Revert ""Add cuQuantum test (but failed at numeric diff test)""

This reverts commit f97c496bfd939b2ec5534718618be76274b76e20.

* Revert ""Fix ComputeSmall and enable it.""

This reverts commit 4f6290acab99f65733c36aff4f628c1b11ae42a9.

* Revert ""Fix tfq_simulate_ops_cuda op test.""

This reverts commit 66442482a21fc7139fb2cdc69a36fd2f5e9c207f.

* Revert ""Temporarily turn on ComputeLarge always""

This reverts commit 23dd880224b209430dfda4c3a88a351c64dce28a.

* Revert ""Upgrade TF version from 2.7 to 2.11 (#749)""

This reverts commit 20cfde5eb2f6188d35bab1375c98572ae4571b20.

* Revert ""TFQ simulate expectation CUDA op""

This reverts commit f063417f4b08c6b430c8822bc9cb8ad8a7819ff9.

* Revert ""Update ci_install bazel version, removed duplicated code lines.""

This reverts commit 1317edf584cf978a106ecb657faf3d3fdef67402.

* Revert ""Fix typo""

This reverts commit a765f7ff84e2b7edb19e324b8d6a33171a7d5984.

* Revert ""Upgrade seaborn version to 0.12.0""

This reverts commit 4e7c22dedc2e231d7eab3dd4cd3f0235444e51e0.

* Revert ""Fix tutorial errors""

This reverts commit c185891066ce453dcac56fc19d172bd71150a031.

* Revert ""Fix tutorial error""

This reverts commit c5df061088fc7d69fde7f8f695e0a43fd2a32213.

* Revert ""Upgrade the latest gym for notebook tutorial.""

This reverts commit 9b94ebf2e4ff4cbabacf03bd52eebab4327409f0.

* Revert ""Format optimizers""

This reverts commit 39a811d1a2ba8e854f800ba23157a7cc017a8cf4.

* Revert ""Format""

This reverts commit a22b98fa4fef34a4df9174e33d2c455b675337c4.

* Revert ""Upgrade to TF v2.11""

This reverts commit 26fa2dfda35ab64585d03e20def1dfd42031b123.

* Upgrade TF version from 2.7 to 2.11 (#749)

* Upgrade bazel version to 5.1.0 for building with TFv2.11.0

* Upgrade to TF v2.11

* Bump up the version of numpy to v1.24.2

* Format

* Fix tf.Variable inside tf.while_loop issues inside optimizers

* Format optimizers

* Upgrade the latest gym for notebook tutorial.

* Fix tutorial error

* Fix tutorial errors

* Upgrade seaborn version to 0.12.0

* Fix typo

* Remove debug print

* Update ci_install bazel version, removed duplicated code lines.

* Upgrade bazel version 5.3.0 and fix some typo in tf version (#755)

* fix compatability issues.

* re-trigger kokoro

* re-trigger kokoro

* re-trigger kokoro

* re-trigger kokoro

* re-trigger kokoro

* Lower tolerances.

* Bump CI python version.

---------

Co-authored-by: Jae H. Yoo <40815393+jaeyoo@users.noreply.github.com>"
,tensorflow,quantum,tensorflow_quantum/core/ops/tfq_simulate_ops_cuda.py,"Roll back to working state. (#780)

* Revert ""Merge pull request #776 from Sinestro38/master""

This reverts commit b4c7ea151275cb75bd75e5c2d35f36abf8679fd8, reversing
changes made to 140277d10ca63b541acb481ecaf899f91c846e5b.

* Revert ""remove release notes md""

This reverts commit 25313f41e8350ef90153bef0f03c9d576d34b1dd.

* Revert ""Merge remote-tracking branch 'forkB/fix_warnings'""

This reverts commit d78931498fd4ee6d06ffba9271f2d948827c58fb, reversing
changes made to fe3a96e24a3001b76547a36bbe3301f8e5a8a255.

* Revert ""Merge pull request #772 from Sinestro38/fix_license""

This reverts commit 140277d10ca63b541acb481ecaf899f91c846e5b, reversing
changes made to 7131f9e4d2d289e51f9705161b29c45159da1921.

* Revert ""fix ubuntu version to 20.04""

This reverts commit 803622aa2f59983b81086dc07d562aca0c955f2b.

* Revert ""[debug] get ubuntu  version of runner""

This reverts commit 8002690bcba9c4bdf28c961f38d2a89cd38f14dc.

* Revert ""update ubuntu github runner from 18.04 to latest""

This reverts commit 471573ae6883f767efe61d20f5fa7a88de60c012.

* Revert ""update > to ~""

This reverts commit fe3a96e24a3001b76547a36bbe3301f8e5a8a255.

* Revert ""update cirq dependency news""

This reverts commit a44ab2659fde41daf73f1abbcca56aa34d78661d.

* Revert ""Update release.md""

This reverts commit a7a67c8afc5f977a8347be0a78001c4c9fbd772a.

* Revert ""add notes""

This reverts commit c7f729a01527bb065bdc5a0e7b1ea43e1330f4ba.

* Revert ""update version num""

This reverts commit f933b6925b7ef673c78dbbb750e0a75e3c70dcd3.

* Revert ""Update release.md""

This reverts commit c2ab0d5e08af1eed85f97e8ab5794bbbc7c20833.

* Revert ""Create release.md""

This reverts commit ac7722ad7da4e529da40e0c2baccdaadf9c2c056.

* Revert ""Merge branch 'master' into master""

This reverts commit 7131f9e4d2d289e51f9705161b29c45159da1921, reversing
changes made to 2c1e7fa4778475040c149b23e2b2f661007a1f8e.

* Revert ""Upgrade bazel version 5.3.0 and fix some typo in tf version (#755)""

This reverts commit 2c1e7fa4778475040c149b23e2b2f661007a1f8e.

* Revert ""Merge pull request #3 from jaeyoo/pavan/remove_compute_small""

This reverts commit 79aae25dc5db7c7e1ae2a83c23a0fb88af2d19c4, reversing
changes made to 46aa1f0eb43473967f81e14b00a706adefc37482.

* Revert ""Fix lint""

This reverts commit 20815bc5f5977f189f467d5726f101b82f1498f1.

* Revert ""Fix lint""

This reverts commit 47e6aaeefffa7d8ce66ea632998dceb2a15be28c.

* Revert ""Update release/BUILD with `if_cuda_is_configured`""

This reverts commit f2cd2552b001004bae0f3d843860e5485b7443a2.

* Revert ""add :tfq_simulate_ops_cuquantum_py target to release BUILD""

This reverts commit 3e8a9a42d16e1b092d29db1af623c2ff8609baf8.

* Revert ""remove computeSmall from cuda and cuquantum kernels""

This reverts commit 5cb7fa153f694e4ae1d1eb94c69b78e5b0d88e4b.

* Revert ""Merge pull request #2 from jaeyoo/cuquantum_support""

This reverts commit 46aa1f0eb43473967f81e14b00a706adefc37482, reversing
changes made to 2a5fd073deecc9c9a07cf2d85e7befb3f3554fcb.

* Revert ""Merge pull request #1 from jaeyoo/cuda_support""

This reverts commit 2a5fd073deecc9c9a07cf2d85e7befb3f3554fcb, reversing
changes made to b0dd7451567fa1a7ad6f0907320344617892c9ea.

* Revert ""Merge branch 'master' into cuda_support""

This reverts commit f19298ccb5bdcbee27b931f43690cad228420f57, reversing
changes made to 4f6290acab99f65733c36aff4f628c1b11ae42a9.

* Revert ""Add cuQuantum test (but failed at numeric diff test)""

This reverts commit f97c496bfd939b2ec5534718618be76274b76e20.

* Revert ""Fix ComputeSmall and enable it.""

This reverts commit 4f6290acab99f65733c36aff4f628c1b11ae42a9.

* Revert ""Fix tfq_simulate_ops_cuda op test.""

This reverts commit 66442482a21fc7139fb2cdc69a36fd2f5e9c207f.

* Revert ""Temporarily turn on ComputeLarge always""

This reverts commit 23dd880224b209430dfda4c3a88a351c64dce28a.

* Revert ""Upgrade TF version from 2.7 to 2.11 (#749)""

This reverts commit 20cfde5eb2f6188d35bab1375c98572ae4571b20.

* Revert ""TFQ simulate expectation CUDA op""

This reverts commit f063417f4b08c6b430c8822bc9cb8ad8a7819ff9.

* Revert ""Update ci_install bazel version, removed duplicated code lines.""

This reverts commit 1317edf584cf978a106ecb657faf3d3fdef67402.

* Revert ""Fix typo""

This reverts commit a765f7ff84e2b7edb19e324b8d6a33171a7d5984.

* Revert ""Upgrade seaborn version to 0.12.0""

This reverts commit 4e7c22dedc2e231d7eab3dd4cd3f0235444e51e0.

* Revert ""Fix tutorial errors""

This reverts commit c185891066ce453dcac56fc19d172bd71150a031.

* Revert ""Fix tutorial error""

This reverts commit c5df061088fc7d69fde7f8f695e0a43fd2a32213.

* Revert ""Upgrade the latest gym for notebook tutorial.""

This reverts commit 9b94ebf2e4ff4cbabacf03bd52eebab4327409f0.

* Revert ""Format optimizers""

This reverts commit 39a811d1a2ba8e854f800ba23157a7cc017a8cf4.

* Revert ""Format""

This reverts commit a22b98fa4fef34a4df9174e33d2c455b675337c4.

* Revert ""Upgrade to TF v2.11""

This reverts commit 26fa2dfda35ab64585d03e20def1dfd42031b123.

* Upgrade TF version from 2.7 to 2.11 (#749)

* Upgrade bazel version to 5.1.0 for building with TFv2.11.0

* Upgrade to TF v2.11

* Bump up the version of numpy to v1.24.2

* Format

* Fix tf.Variable inside tf.while_loop issues inside optimizers

* Format optimizers

* Upgrade the latest gym for notebook tutorial.

* Fix tutorial error

* Fix tutorial errors

* Upgrade seaborn version to 0.12.0

* Fix typo

* Remove debug print

* Update ci_install bazel version, removed duplicated code lines.

* Upgrade bazel version 5.3.0 and fix some typo in tf version (#755)

* fix compatability issues.

* re-trigger kokoro

* re-trigger kokoro

* re-trigger kokoro

* re-trigger kokoro

* re-trigger kokoro

* Lower tolerances.

* Bump CI python version.

---------

Co-authored-by: Jae H. Yoo <40815393+jaeyoo@users.noreply.github.com>"
,tensorflow,quantum,tensorflow_quantum/core/ops/tfq_simulate_ops_cuquantum.py,"Roll back to working state. (#780)

* Revert ""Merge pull request #776 from Sinestro38/master""

This reverts commit b4c7ea151275cb75bd75e5c2d35f36abf8679fd8, reversing
changes made to 140277d10ca63b541acb481ecaf899f91c846e5b.

* Revert ""remove release notes md""

This reverts commit 25313f41e8350ef90153bef0f03c9d576d34b1dd.

* Revert ""Merge remote-tracking branch 'forkB/fix_warnings'""

This reverts commit d78931498fd4ee6d06ffba9271f2d948827c58fb, reversing
changes made to fe3a96e24a3001b76547a36bbe3301f8e5a8a255.

* Revert ""Merge pull request #772 from Sinestro38/fix_license""

This reverts commit 140277d10ca63b541acb481ecaf899f91c846e5b, reversing
changes made to 7131f9e4d2d289e51f9705161b29c45159da1921.

* Revert ""fix ubuntu version to 20.04""

This reverts commit 803622aa2f59983b81086dc07d562aca0c955f2b.

* Revert ""[debug] get ubuntu  version of runner""

This reverts commit 8002690bcba9c4bdf28c961f38d2a89cd38f14dc.

* Revert ""update ubuntu github runner from 18.04 to latest""

This reverts commit 471573ae6883f767efe61d20f5fa7a88de60c012.

* Revert ""update > to ~""

This reverts commit fe3a96e24a3001b76547a36bbe3301f8e5a8a255.

* Revert ""update cirq dependency news""

This reverts commit a44ab2659fde41daf73f1abbcca56aa34d78661d.

* Revert ""Update release.md""

This reverts commit a7a67c8afc5f977a8347be0a78001c4c9fbd772a.

* Revert ""add notes""

This reverts commit c7f729a01527bb065bdc5a0e7b1ea43e1330f4ba.

* Revert ""update version num""

This reverts commit f933b6925b7ef673c78dbbb750e0a75e3c70dcd3.

* Revert ""Update release.md""

This reverts commit c2ab0d5e08af1eed85f97e8ab5794bbbc7c20833.

* Revert ""Create release.md""

This reverts commit ac7722ad7da4e529da40e0c2baccdaadf9c2c056.

* Revert ""Merge branch 'master' into master""

This reverts commit 7131f9e4d2d289e51f9705161b29c45159da1921, reversing
changes made to 2c1e7fa4778475040c149b23e2b2f661007a1f8e.

* Revert ""Upgrade bazel version 5.3.0 and fix some typo in tf version (#755)""

This reverts commit 2c1e7fa4778475040c149b23e2b2f661007a1f8e.

* Revert ""Merge pull request #3 from jaeyoo/pavan/remove_compute_small""

This reverts commit 79aae25dc5db7c7e1ae2a83c23a0fb88af2d19c4, reversing
changes made to 46aa1f0eb43473967f81e14b00a706adefc37482.

* Revert ""Fix lint""

This reverts commit 20815bc5f5977f189f467d5726f101b82f1498f1.

* Revert ""Fix lint""

This reverts commit 47e6aaeefffa7d8ce66ea632998dceb2a15be28c.

* Revert ""Update release/BUILD with `if_cuda_is_configured`""

This reverts commit f2cd2552b001004bae0f3d843860e5485b7443a2.

* Revert ""add :tfq_simulate_ops_cuquantum_py target to release BUILD""

This reverts commit 3e8a9a42d16e1b092d29db1af623c2ff8609baf8.

* Revert ""remove computeSmall from cuda and cuquantum kernels""

This reverts commit 5cb7fa153f694e4ae1d1eb94c69b78e5b0d88e4b.

* Revert ""Merge pull request #2 from jaeyoo/cuquantum_support""

This reverts commit 46aa1f0eb43473967f81e14b00a706adefc37482, reversing
changes made to 2a5fd073deecc9c9a07cf2d85e7befb3f3554fcb.

* Revert ""Merge pull request #1 from jaeyoo/cuda_support""

This reverts commit 2a5fd073deecc9c9a07cf2d85e7befb3f3554fcb, reversing
changes made to b0dd7451567fa1a7ad6f0907320344617892c9ea.

* Revert ""Merge branch 'master' into cuda_support""

This reverts commit f19298ccb5bdcbee27b931f43690cad228420f57, reversing
changes made to 4f6290acab99f65733c36aff4f628c1b11ae42a9.

* Revert ""Add cuQuantum test (but failed at numeric diff test)""

This reverts commit f97c496bfd939b2ec5534718618be76274b76e20.

* Revert ""Fix ComputeSmall and enable it.""

This reverts commit 4f6290acab99f65733c36aff4f628c1b11ae42a9.

* Revert ""Fix tfq_simulate_ops_cuda op test.""

This reverts commit 66442482a21fc7139fb2cdc69a36fd2f5e9c207f.

* Revert ""Temporarily turn on ComputeLarge always""

This reverts commit 23dd880224b209430dfda4c3a88a351c64dce28a.

* Revert ""Upgrade TF version from 2.7 to 2.11 (#749)""

This reverts commit 20cfde5eb2f6188d35bab1375c98572ae4571b20.

* Revert ""TFQ simulate expectation CUDA op""

This reverts commit f063417f4b08c6b430c8822bc9cb8ad8a7819ff9.

* Revert ""Update ci_install bazel version, removed duplicated code lines.""

This reverts commit 1317edf584cf978a106ecb657faf3d3fdef67402.

* Revert ""Fix typo""

This reverts commit a765f7ff84e2b7edb19e324b8d6a33171a7d5984.

* Revert ""Upgrade seaborn version to 0.12.0""

This reverts commit 4e7c22dedc2e231d7eab3dd4cd3f0235444e51e0.

* Revert ""Fix tutorial errors""

This reverts commit c185891066ce453dcac56fc19d172bd71150a031.

* Revert ""Fix tutorial error""

This reverts commit c5df061088fc7d69fde7f8f695e0a43fd2a32213.

* Revert ""Upgrade the latest gym for notebook tutorial.""

This reverts commit 9b94ebf2e4ff4cbabacf03bd52eebab4327409f0.

* Revert ""Format optimizers""

This reverts commit 39a811d1a2ba8e854f800ba23157a7cc017a8cf4.

* Revert ""Format""

This reverts commit a22b98fa4fef34a4df9174e33d2c455b675337c4.

* Revert ""Upgrade to TF v2.11""

This reverts commit 26fa2dfda35ab64585d03e20def1dfd42031b123.

* Upgrade TF version from 2.7 to 2.11 (#749)

* Upgrade bazel version to 5.1.0 for building with TFv2.11.0

* Upgrade to TF v2.11

* Bump up the version of numpy to v1.24.2

* Format

* Fix tf.Variable inside tf.while_loop issues inside optimizers

* Format optimizers

* Upgrade the latest gym for notebook tutorial.

* Fix tutorial error

* Fix tutorial errors

* Upgrade seaborn version to 0.12.0

* Fix typo

* Remove debug print

* Update ci_install bazel version, removed duplicated code lines.

* Upgrade bazel version 5.3.0 and fix some typo in tf version (#755)

* fix compatability issues.

* re-trigger kokoro

* re-trigger kokoro

* re-trigger kokoro

* re-trigger kokoro

* re-trigger kokoro

* Lower tolerances.

* Bump CI python version.

---------

Co-authored-by: Jae H. Yoo <40815393+jaeyoo@users.noreply.github.com>"
,tensorflow,quantum,tensorflow_quantum/core/ops/tfq_simulate_ops_gpu_test.py,"Roll back to working state. (#780)

* Revert ""Merge pull request #776 from Sinestro38/master""

This reverts commit b4c7ea151275cb75bd75e5c2d35f36abf8679fd8, reversing
changes made to 140277d10ca63b541acb481ecaf899f91c846e5b.

* Revert ""remove release notes md""

This reverts commit 25313f41e8350ef90153bef0f03c9d576d34b1dd.

* Revert ""Merge remote-tracking branch 'forkB/fix_warnings'""

This reverts commit d78931498fd4ee6d06ffba9271f2d948827c58fb, reversing
changes made to fe3a96e24a3001b76547a36bbe3301f8e5a8a255.

* Revert ""Merge pull request #772 from Sinestro38/fix_license""

This reverts commit 140277d10ca63b541acb481ecaf899f91c846e5b, reversing
changes made to 7131f9e4d2d289e51f9705161b29c45159da1921.

* Revert ""fix ubuntu version to 20.04""

This reverts commit 803622aa2f59983b81086dc07d562aca0c955f2b.

* Revert ""[debug] get ubuntu  version of runner""

This reverts commit 8002690bcba9c4bdf28c961f38d2a89cd38f14dc.

* Revert ""update ubuntu github runner from 18.04 to latest""

This reverts commit 471573ae6883f767efe61d20f5fa7a88de60c012.

* Revert ""update > to ~""

This reverts commit fe3a96e24a3001b76547a36bbe3301f8e5a8a255.

* Revert ""update cirq dependency news""

This reverts commit a44ab2659fde41daf73f1abbcca56aa34d78661d.

* Revert ""Update release.md""

This reverts commit a7a67c8afc5f977a8347be0a78001c4c9fbd772a.

* Revert ""add notes""

This reverts commit c7f729a01527bb065bdc5a0e7b1ea43e1330f4ba.

* Revert ""update version num""

This reverts commit f933b6925b7ef673c78dbbb750e0a75e3c70dcd3.

* Revert ""Update release.md""

This reverts commit c2ab0d5e08af1eed85f97e8ab5794bbbc7c20833.

* Revert ""Create release.md""

This reverts commit ac7722ad7da4e529da40e0c2baccdaadf9c2c056.

* Revert ""Merge branch 'master' into master""

This reverts commit 7131f9e4d2d289e51f9705161b29c45159da1921, reversing
changes made to 2c1e7fa4778475040c149b23e2b2f661007a1f8e.

* Revert ""Upgrade bazel version 5.3.0 and fix some typo in tf version (#755)""

This reverts commit 2c1e7fa4778475040c149b23e2b2f661007a1f8e.

* Revert ""Merge pull request #3 from jaeyoo/pavan/remove_compute_small""

This reverts commit 79aae25dc5db7c7e1ae2a83c23a0fb88af2d19c4, reversing
changes made to 46aa1f0eb43473967f81e14b00a706adefc37482.

* Revert ""Fix lint""

This reverts commit 20815bc5f5977f189f467d5726f101b82f1498f1.

* Revert ""Fix lint""

This reverts commit 47e6aaeefffa7d8ce66ea632998dceb2a15be28c.

* Revert ""Update release/BUILD with `if_cuda_is_configured`""

This reverts commit f2cd2552b001004bae0f3d843860e5485b7443a2.

* Revert ""add :tfq_simulate_ops_cuquantum_py target to release BUILD""

This reverts commit 3e8a9a42d16e1b092d29db1af623c2ff8609baf8.

* Revert ""remove computeSmall from cuda and cuquantum kernels""

This reverts commit 5cb7fa153f694e4ae1d1eb94c69b78e5b0d88e4b.

* Revert ""Merge pull request #2 from jaeyoo/cuquantum_support""

This reverts commit 46aa1f0eb43473967f81e14b00a706adefc37482, reversing
changes made to 2a5fd073deecc9c9a07cf2d85e7befb3f3554fcb.

* Revert ""Merge pull request #1 from jaeyoo/cuda_support""

This reverts commit 2a5fd073deecc9c9a07cf2d85e7befb3f3554fcb, reversing
changes made to b0dd7451567fa1a7ad6f0907320344617892c9ea.

* Revert ""Merge branch 'master' into cuda_support""

This reverts commit f19298ccb5bdcbee27b931f43690cad228420f57, reversing
changes made to 4f6290acab99f65733c36aff4f628c1b11ae42a9.

* Revert ""Add cuQuantum test (but failed at numeric diff test)""

This reverts commit f97c496bfd939b2ec5534718618be76274b76e20.

* Revert ""Fix ComputeSmall and enable it.""

This reverts commit 4f6290acab99f65733c36aff4f628c1b11ae42a9.

* Revert ""Fix tfq_simulate_ops_cuda op test.""

This reverts commit 66442482a21fc7139fb2cdc69a36fd2f5e9c207f.

* Revert ""Temporarily turn on ComputeLarge always""

This reverts commit 23dd880224b209430dfda4c3a88a351c64dce28a.

* Revert ""Upgrade TF version from 2.7 to 2.11 (#749)""

This reverts commit 20cfde5eb2f6188d35bab1375c98572ae4571b20.

* Revert ""TFQ simulate expectation CUDA op""

This reverts commit f063417f4b08c6b430c8822bc9cb8ad8a7819ff9.

* Revert ""Update ci_install bazel version, removed duplicated code lines.""

This reverts commit 1317edf584cf978a106ecb657faf3d3fdef67402.

* Revert ""Fix typo""

This reverts commit a765f7ff84e2b7edb19e324b8d6a33171a7d5984.

* Revert ""Upgrade seaborn version to 0.12.0""

This reverts commit 4e7c22dedc2e231d7eab3dd4cd3f0235444e51e0.

* Revert ""Fix tutorial errors""

This reverts commit c185891066ce453dcac56fc19d172bd71150a031.

* Revert ""Fix tutorial error""

This reverts commit c5df061088fc7d69fde7f8f695e0a43fd2a32213.

* Revert ""Upgrade the latest gym for notebook tutorial.""

This reverts commit 9b94ebf2e4ff4cbabacf03bd52eebab4327409f0.

* Revert ""Format optimizers""

This reverts commit 39a811d1a2ba8e854f800ba23157a7cc017a8cf4.

* Revert ""Format""

This reverts commit a22b98fa4fef34a4df9174e33d2c455b675337c4.

* Revert ""Upgrade to TF v2.11""

This reverts commit 26fa2dfda35ab64585d03e20def1dfd42031b123.

* Upgrade TF version from 2.7 to 2.11 (#749)

* Upgrade bazel version to 5.1.0 for building with TFv2.11.0

* Upgrade to TF v2.11

* Bump up the version of numpy to v1.24.2

* Format

* Fix tf.Variable inside tf.while_loop issues inside optimizers

* Format optimizers

* Upgrade the latest gym for notebook tutorial.

* Fix tutorial error

* Fix tutorial errors

* Upgrade seaborn version to 0.12.0

* Fix typo

* Remove debug print

* Update ci_install bazel version, removed duplicated code lines.

* Upgrade bazel version 5.3.0 and fix some typo in tf version (#755)

* fix compatability issues.

* re-trigger kokoro

* re-trigger kokoro

* re-trigger kokoro

* re-trigger kokoro

* re-trigger kokoro

* Lower tolerances.

* Bump CI python version.

---------

Co-authored-by: Jae H. Yoo <40815393+jaeyoo@users.noreply.github.com>"
,tensorflow,quantum,WORKSPACE,Merge remote-tracking branch 'forkB/fix_warnings'
,tensorflow,quantum,release/BUILD,Merge remote-tracking branch 'forkB/fix_warnings'
,tensorflow,quantum,tensorflow_quantum/core/ops/tfq_simulate_expectation_op_cuda.cu.cc,Merge remote-tracking branch 'forkB/fix_warnings'
,tensorflow,quantum,tensorflow_quantum/core/ops/tfq_simulate_expectation_op_cuquantum.cu.cc,Merge remote-tracking branch 'forkB/fix_warnings'
,tensorflow,quantum,tensorflow_quantum/core/ops/tfq_simulate_ops_cuda.py,Merge remote-tracking branch 'forkB/fix_warnings'
,tensorflow,quantum,tensorflow_quantum/core/ops/tfq_simulate_ops_cuquantum.py,Merge remote-tracking branch 'forkB/fix_warnings'
,tensorflow,quantum,tensorflow_quantum/core/ops/tfq_simulate_ops_gpu_test.py,Merge remote-tracking branch 'forkB/fix_warnings'
,open-quantum-safe,liboqs,.CMake/alg_support.cmake,"Fix for alg_support.cmake (#1716)

* Ensure aliases are activated with cmake
* Updates alg_support fragments: ensure that dependencies (aliases and platform-specific code) are activated after applying filter_algs
* Adds bike_l5 to NIST_R4 algorithms
* add CI test for aliases
* remove ml_kem ipds from STD filter_algs
* decouple name and alias
* fixing vector tests"
,qutip,qutip,qutip/tests/solver/test_mcsolve.py,"Merge pull request #2424 from Ericgig/bug.mcfeedback

Ensure feedback work for all trajectories"
,quantumlib,OpenFermion,dev_tools/requirements/envs/dev.env.txt,"Remove limit on cirq (#867)

* Fix gate equality failure in QuadraticFermionicSimulationGate.

Address #865. Bump cirq version to 1.3.0.

* Remove duplicated env files.

These are now saved under envs/"
,quantumlib,OpenFermion,dev_tools/requirements/envs/format.env.txt,"Remove limit on cirq (#867)

* Fix gate equality failure in QuadraticFermionicSimulationGate.

Address #865. Bump cirq version to 1.3.0.

* Remove duplicated env files.

These are now saved under envs/"
,quantumlib,OpenFermion,dev_tools/requirements/envs/mypy.env.txt,"Remove limit on cirq (#867)

* Fix gate equality failure in QuadraticFermionicSimulationGate.

Address #865. Bump cirq version to 1.3.0.

* Remove duplicated env files.

These are now saved under envs/"
,quantumlib,OpenFermion,dev_tools/requirements/envs/pylint.env.txt,"Remove limit on cirq (#867)

* Fix gate equality failure in QuadraticFermionicSimulationGate.

Address #865. Bump cirq version to 1.3.0.

* Remove duplicated env files.

These are now saved under envs/"
,quantumlib,OpenFermion,dev_tools/requirements/envs/pytest-extra.env.txt,"Remove limit on cirq (#867)

* Fix gate equality failure in QuadraticFermionicSimulationGate.

Address #865. Bump cirq version to 1.3.0.

* Remove duplicated env files.

These are now saved under envs/"
,quantumlib,OpenFermion,dev_tools/requirements/envs/pytest.env.txt,"Remove limit on cirq (#867)

* Fix gate equality failure in QuadraticFermionicSimulationGate.

Address #865. Bump cirq version to 1.3.0.

* Remove duplicated env files.

These are now saved under envs/"
,quantumlib,OpenFermion,src/openfermion/circuits/gates/fermionic_simulation.py,"Remove limit on cirq (#867)

* Fix gate equality failure in QuadraticFermionicSimulationGate.

Address #865. Bump cirq version to 1.3.0.

* Remove duplicated env files.

These are now saved under envs/"
,quantumlib,OpenFermion,src/openfermion/circuits/gates/fermionic_simulation.py,"Fix scipy sqrtm precision issue (#864)

* Use eigendecomposition inplace of la.sqrtm.

* Update envs.

* Upper limit on cirq due to gate equality failure.

* Update dependencies.

* Fix comment typo about sqrt."
,quantumlib,OpenFermion,src/openfermion/circuits/gates/common_gates_test.py,"Reformat src/openfermion using black formatter. (#846)

* Add black / isort configuration to pyproject.toml.

* Fix configuration.

* Reformat using black.

* Ignore reformat for git blame.

* Up max line lenght in pylintrc."
,quantumlib,OpenFermion,src/openfermion/circuits/gates/three_qubit_gates_test.py,"Reformat src/openfermion using black formatter. (#846)

* Add black / isort configuration to pyproject.toml.

* Fix configuration.

* Reformat using black.

* Ignore reformat for git blame.

* Up max line lenght in pylintrc."
,quantumlib,OpenFermion,src/openfermion/circuits/primitives/ffft_test.py,"Reformat src/openfermion using black formatter. (#846)

* Add black / isort configuration to pyproject.toml.

* Fix configuration.

* Reformat using black.

* Ignore reformat for git blame.

* Up max line lenght in pylintrc."
,quantumlib,OpenFermion,src/openfermion/circuits/primitives/optimal_givens_decomposition.py,"Reformat src/openfermion using black formatter. (#846)

* Add black / isort configuration to pyproject.toml.

* Fix configuration.

* Reformat using black.

* Ignore reformat for git blame.

* Up max line lenght in pylintrc."
,quantumlib,OpenFermion,src/openfermion/circuits/primitives/state_preparation.py,"Reformat src/openfermion using black formatter. (#846)

* Add black / isort configuration to pyproject.toml.

* Fix configuration.

* Reformat using black.

* Ignore reformat for git blame.

* Up max line lenght in pylintrc."
,quantumlib,OpenFermion,src/openfermion/circuits/primitives/swap_network_test.py,"Reformat src/openfermion using black formatter. (#846)

* Add black / isort configuration to pyproject.toml.

* Fix configuration.

* Reformat using black.

* Ignore reformat for git blame.

* Up max line lenght in pylintrc."
,quantumlib,OpenFermion,src/openfermion/circuits/trotter/algorithms/low_rank.py,"Reformat src/openfermion using black formatter. (#846)

* Add black / isort configuration to pyproject.toml.

* Fix configuration.

* Reformat using black.

* Ignore reformat for git blame.

* Up max line lenght in pylintrc."
,quantumlib,OpenFermion,src/openfermion/circuits/trotter/simulate_trotter.py,"Reformat src/openfermion using black formatter. (#846)

* Add black / isort configuration to pyproject.toml.

* Fix configuration.

* Reformat using black.

* Ignore reformat for git blame.

* Up max line lenght in pylintrc."
,quantumlib,OpenFermion,src/openfermion/circuits/trotter/trotter_algorithm_test.py,"Reformat src/openfermion using black formatter. (#846)

* Add black / isort configuration to pyproject.toml.

* Fix configuration.

* Reformat using black.

* Ignore reformat for git blame.

* Up max line lenght in pylintrc."
,quantumlib,OpenFermion,src/openfermion/functionals/contextuality.py,"Reformat src/openfermion using black formatter. (#846)

* Add black / isort configuration to pyproject.toml.

* Fix configuration.

* Reformat using black.

* Ignore reformat for git blame.

* Up max line lenght in pylintrc."
,quantumlib,OpenFermion,src/openfermion/hamiltonians/richardson_gaudin_test.py,"Reformat src/openfermion using black formatter. (#846)

* Add black / isort configuration to pyproject.toml.

* Fix configuration.

* Reformat using black.

* Ignore reformat for git blame.

* Up max line lenght in pylintrc."
,quantumlib,OpenFermion,src/openfermion/linalg/rdm_reconstruction_test.py,"Reformat src/openfermion using black formatter. (#846)

* Add black / isort configuration to pyproject.toml.

* Fix configuration.

* Reformat using black.

* Ignore reformat for git blame.

* Up max line lenght in pylintrc."
,quantumlib,OpenFermion,src/openfermion/resource_estimates/pbc/df/compute_df_resources.py,"[PBC Resources Estimates 4/4] Add costing functions (#824)

* Add k-point THC code.

* Add k-thc notebook.

* Add utilities.

* Add reference data.

* Add missing __init__

* Add missing init / skipifs.

* Fix formatting.

* Resolve review comments.

* Address comments.

* Remove utils.

* No more utils.

* More review comments.

* Fix formatting.

* Formatting + add map to gvec_logic.

* Fix import issues.

* Add utility classes to handler different PBC Hamiltonian factorizations.

Add inits.

* No more utils.

* Tidyup.

* Fix formatting.

* Add functionality to compute PBC lambda values.

* Fix formatting and docstrings.

* Fix whitespace.

* Add costing PBC costing notebooks.

* Add utility costing functions.

* Make costing into package and add notebook.

* Add missing utilities.

* Refactor.

* Fix tests.

* Fix imports and whitespace.

* Fix up some merge issues.

* Mark slow test slow.

* Remove file.

* Add missing skipif.

* Add missing import.

* Address comments.

* Fix formatting.

* Fix lint /import errors.

* Fix import."
,quantumlib,OpenFermion,src/openfermion/resource_estimates/pbc/df/generate_costing_table_df.py,"[PBC Resources Estimates 4/4] Add costing functions (#824)

* Add k-point THC code.

* Add k-thc notebook.

* Add utilities.

* Add reference data.

* Add missing __init__

* Add missing init / skipifs.

* Fix formatting.

* Resolve review comments.

* Address comments.

* Remove utils.

* No more utils.

* More review comments.

* Fix formatting.

* Formatting + add map to gvec_logic.

* Fix import issues.

* Add utility classes to handler different PBC Hamiltonian factorizations.

Add inits.

* No more utils.

* Tidyup.

* Fix formatting.

* Add functionality to compute PBC lambda values.

* Fix formatting and docstrings.

* Fix whitespace.

* Add costing PBC costing notebooks.

* Add utility costing functions.

* Make costing into package and add notebook.

* Add missing utilities.

* Refactor.

* Fix tests.

* Fix imports and whitespace.

* Fix up some merge issues.

* Mark slow test slow.

* Remove file.

* Add missing skipif.

* Add missing import.

* Address comments.

* Fix formatting.

* Fix lint /import errors.

* Fix import."
,quantumlib,OpenFermion,src/openfermion/resource_estimates/pbc/df/generate_costing_table_df_test.py,"[PBC Resources Estimates 4/4] Add costing functions (#824)

* Add k-point THC code.

* Add k-thc notebook.

* Add utilities.

* Add reference data.

* Add missing __init__

* Add missing init / skipifs.

* Fix formatting.

* Resolve review comments.

* Address comments.

* Remove utils.

* No more utils.

* More review comments.

* Fix formatting.

* Formatting + add map to gvec_logic.

* Fix import issues.

* Add utility classes to handler different PBC Hamiltonian factorizations.

Add inits.

* No more utils.

* Tidyup.

* Fix formatting.

* Add functionality to compute PBC lambda values.

* Fix formatting and docstrings.

* Fix whitespace.

* Add costing PBC costing notebooks.

* Add utility costing functions.

* Make costing into package and add notebook.

* Add missing utilities.

* Refactor.

* Fix tests.

* Fix imports and whitespace.

* Fix up some merge issues.

* Mark slow test slow.

* Remove file.

* Add missing skipif.

* Add missing import.

* Address comments.

* Fix formatting.

* Fix lint /import errors.

* Fix import."
,quantumlib,OpenFermion,src/openfermion/resource_estimates/pbc/notebooks/resource_estimates.ipynb,"[PBC Resources Estimates 4/4] Add costing functions (#824)

* Add k-point THC code.

* Add k-thc notebook.

* Add utilities.

* Add reference data.

* Add missing __init__

* Add missing init / skipifs.

* Fix formatting.

* Resolve review comments.

* Address comments.

* Remove utils.

* No more utils.

* More review comments.

* Fix formatting.

* Formatting + add map to gvec_logic.

* Fix import issues.

* Add utility classes to handler different PBC Hamiltonian factorizations.

Add inits.

* No more utils.

* Tidyup.

* Fix formatting.

* Add functionality to compute PBC lambda values.

* Fix formatting and docstrings.

* Fix whitespace.

* Add costing PBC costing notebooks.

* Add utility costing functions.

* Make costing into package and add notebook.

* Add missing utilities.

* Refactor.

* Fix tests.

* Fix imports and whitespace.

* Fix up some merge issues.

* Mark slow test slow.

* Remove file.

* Add missing skipif.

* Add missing import.

* Address comments.

* Fix formatting.

* Fix lint /import errors.

* Fix import."
,quantumlib,OpenFermion,src/openfermion/resource_estimates/pbc/resources/__init__.py,"[PBC Resources Estimates 4/4] Add costing functions (#824)

* Add k-point THC code.

* Add k-thc notebook.

* Add utilities.

* Add reference data.

* Add missing __init__

* Add missing init / skipifs.

* Fix formatting.

* Resolve review comments.

* Address comments.

* Remove utils.

* No more utils.

* More review comments.

* Fix formatting.

* Formatting + add map to gvec_logic.

* Fix import issues.

* Add utility classes to handler different PBC Hamiltonian factorizations.

Add inits.

* No more utils.

* Tidyup.

* Fix formatting.

* Add functionality to compute PBC lambda values.

* Fix formatting and docstrings.

* Fix whitespace.

* Add costing PBC costing notebooks.

* Add utility costing functions.

* Make costing into package and add notebook.

* Add missing utilities.

* Refactor.

* Fix tests.

* Fix imports and whitespace.

* Fix up some merge issues.

* Mark slow test slow.

* Remove file.

* Add missing skipif.

* Add missing import.

* Address comments.

* Fix formatting.

* Fix lint /import errors.

* Fix import."
,quantumlib,OpenFermion,src/openfermion/resource_estimates/pbc/resources/data_types.py,"[PBC Resources Estimates 4/4] Add costing functions (#824)

* Add k-point THC code.

* Add k-thc notebook.

* Add utilities.

* Add reference data.

* Add missing __init__

* Add missing init / skipifs.

* Fix formatting.

* Resolve review comments.

* Address comments.

* Remove utils.

* No more utils.

* More review comments.

* Fix formatting.

* Formatting + add map to gvec_logic.

* Fix import issues.

* Add utility classes to handler different PBC Hamiltonian factorizations.

Add inits.

* No more utils.

* Tidyup.

* Fix formatting.

* Add functionality to compute PBC lambda values.

* Fix formatting and docstrings.

* Fix whitespace.

* Add costing PBC costing notebooks.

* Add utility costing functions.

* Make costing into package and add notebook.

* Add missing utilities.

* Refactor.

* Fix tests.

* Fix imports and whitespace.

* Fix up some merge issues.

* Mark slow test slow.

* Remove file.

* Add missing skipif.

* Add missing import.

* Address comments.

* Fix formatting.

* Fix lint /import errors.

* Fix import."
,quantumlib,OpenFermion,src/openfermion/resource_estimates/pbc/resources/data_types_test.py,"[PBC Resources Estimates 4/4] Add costing functions (#824)

* Add k-point THC code.

* Add k-thc notebook.

* Add utilities.

* Add reference data.

* Add missing __init__

* Add missing init / skipifs.

* Fix formatting.

* Resolve review comments.

* Address comments.

* Remove utils.

* No more utils.

* More review comments.

* Fix formatting.

* Formatting + add map to gvec_logic.

* Fix import issues.

* Add utility classes to handler different PBC Hamiltonian factorizations.

Add inits.

* No more utils.

* Tidyup.

* Fix formatting.

* Add functionality to compute PBC lambda values.

* Fix formatting and docstrings.

* Fix whitespace.

* Add costing PBC costing notebooks.

* Add utility costing functions.

* Make costing into package and add notebook.

* Add missing utilities.

* Refactor.

* Fix tests.

* Fix imports and whitespace.

* Fix up some merge issues.

* Mark slow test slow.

* Remove file.

* Add missing skipif.

* Add missing import.

* Address comments.

* Fix formatting.

* Fix lint /import errors.

* Fix import."
,quantumlib,OpenFermion,src/openfermion/resource_estimates/pbc/resources/qrom.py,"[PBC Resources Estimates 4/4] Add costing functions (#824)

* Add k-point THC code.

* Add k-thc notebook.

* Add utilities.

* Add reference data.

* Add missing __init__

* Add missing init / skipifs.

* Fix formatting.

* Resolve review comments.

* Address comments.

* Remove utils.

* No more utils.

* More review comments.

* Fix formatting.

* Formatting + add map to gvec_logic.

* Fix import issues.

* Add utility classes to handler different PBC Hamiltonian factorizations.

Add inits.

* No more utils.

* Tidyup.

* Fix formatting.

* Add functionality to compute PBC lambda values.

* Fix formatting and docstrings.

* Fix whitespace.

* Add costing PBC costing notebooks.

* Add utility costing functions.

* Make costing into package and add notebook.

* Add missing utilities.

* Refactor.

* Fix tests.

* Fix imports and whitespace.

* Fix up some merge issues.

* Mark slow test slow.

* Remove file.

* Add missing skipif.

* Add missing import.

* Address comments.

* Fix formatting.

* Fix lint /import errors.

* Fix import."
,quantumlib,OpenFermion,src/openfermion/resource_estimates/pbc/resources/qrom_test.py,"[PBC Resources Estimates 4/4] Add costing functions (#824)

* Add k-point THC code.

* Add k-thc notebook.

* Add utilities.

* Add reference data.

* Add missing __init__

* Add missing init / skipifs.

* Fix formatting.

* Resolve review comments.

* Address comments.

* Remove utils.

* No more utils.

* More review comments.

* Fix formatting.

* Formatting + add map to gvec_logic.

* Fix import issues.

* Add utility classes to handler different PBC Hamiltonian factorizations.

Add inits.

* No more utils.

* Tidyup.

* Fix formatting.

* Add functionality to compute PBC lambda values.

* Fix formatting and docstrings.

* Fix whitespace.

* Add costing PBC costing notebooks.

* Add utility costing functions.

* Make costing into package and add notebook.

* Add missing utilities.

* Refactor.

* Fix tests.

* Fix imports and whitespace.

* Fix up some merge issues.

* Mark slow test slow.

* Remove file.

* Add missing skipif.

* Add missing import.

* Address comments.

* Fix formatting.

* Fix lint /import errors.

* Fix import."
,quantumlib,OpenFermion,src/openfermion/resource_estimates/pbc/sf/compute_sf_resources.py,"[PBC Resources Estimates 4/4] Add costing functions (#824)

* Add k-point THC code.

* Add k-thc notebook.

* Add utilities.

* Add reference data.

* Add missing __init__

* Add missing init / skipifs.

* Fix formatting.

* Resolve review comments.

* Address comments.

* Remove utils.

* No more utils.

* More review comments.

* Fix formatting.

* Formatting + add map to gvec_logic.

* Fix import issues.

* Add utility classes to handler different PBC Hamiltonian factorizations.

Add inits.

* No more utils.

* Tidyup.

* Fix formatting.

* Add functionality to compute PBC lambda values.

* Fix formatting and docstrings.

* Fix whitespace.

* Add costing PBC costing notebooks.

* Add utility costing functions.

* Make costing into package and add notebook.

* Add missing utilities.

* Refactor.

* Fix tests.

* Fix imports and whitespace.

* Fix up some merge issues.

* Mark slow test slow.

* Remove file.

* Add missing skipif.

* Add missing import.

* Address comments.

* Fix formatting.

* Fix lint /import errors.

* Fix import."
,quantumlib,OpenFermion,src/openfermion/resource_estimates/pbc/sparse/compute_sparse_resources.py,"[PBC Resources Estimates 4/4] Add costing functions (#824)

* Add k-point THC code.

* Add k-thc notebook.

* Add utilities.

* Add reference data.

* Add missing __init__

* Add missing init / skipifs.

* Fix formatting.

* Resolve review comments.

* Address comments.

* Remove utils.

* No more utils.

* More review comments.

* Fix formatting.

* Formatting + add map to gvec_logic.

* Fix import issues.

* Add utility classes to handler different PBC Hamiltonian factorizations.

Add inits.

* No more utils.

* Tidyup.

* Fix formatting.

* Add functionality to compute PBC lambda values.

* Fix formatting and docstrings.

* Fix whitespace.

* Add costing PBC costing notebooks.

* Add utility costing functions.

* Make costing into package and add notebook.

* Add missing utilities.

* Refactor.

* Fix tests.

* Fix imports and whitespace.

* Fix up some merge issues.

* Mark slow test slow.

* Remove file.

* Add missing skipif.

* Add missing import.

* Address comments.

* Fix formatting.

* Fix lint /import errors.

* Fix import."
,quantumlib,OpenFermion,src/openfermion/resource_estimates/pbc/sparse/compute_sparse_resources_test.py,"[PBC Resources Estimates 4/4] Add costing functions (#824)

* Add k-point THC code.

* Add k-thc notebook.

* Add utilities.

* Add reference data.

* Add missing __init__

* Add missing init / skipifs.

* Fix formatting.

* Resolve review comments.

* Address comments.

* Remove utils.

* No more utils.

* More review comments.

* Fix formatting.

* Formatting + add map to gvec_logic.

* Fix import issues.

* Add utility classes to handler different PBC Hamiltonian factorizations.

Add inits.

* No more utils.

* Tidyup.

* Fix formatting.

* Add functionality to compute PBC lambda values.

* Fix formatting and docstrings.

* Fix whitespace.

* Add costing PBC costing notebooks.

* Add utility costing functions.

* Make costing into package and add notebook.

* Add missing utilities.

* Refactor.

* Fix tests.

* Fix imports and whitespace.

* Fix up some merge issues.

* Mark slow test slow.

* Remove file.

* Add missing skipif.

* Add missing import.

* Address comments.

* Fix formatting.

* Fix lint /import errors.

* Fix import."
,quantumlib,OpenFermion,src/openfermion/resource_estimates/pbc/sparse/generate_costing_table_sparse.py,"[PBC Resources Estimates 4/4] Add costing functions (#824)

* Add k-point THC code.

* Add k-thc notebook.

* Add utilities.

* Add reference data.

* Add missing __init__

* Add missing init / skipifs.

* Fix formatting.

* Resolve review comments.

* Address comments.

* Remove utils.

* No more utils.

* More review comments.

* Fix formatting.

* Formatting + add map to gvec_logic.

* Fix import issues.

* Add utility classes to handler different PBC Hamiltonian factorizations.

Add inits.

* No more utils.

* Tidyup.

* Fix formatting.

* Add functionality to compute PBC lambda values.

* Fix formatting and docstrings.

* Fix whitespace.

* Add costing PBC costing notebooks.

* Add utility costing functions.

* Make costing into package and add notebook.

* Add missing utilities.

* Refactor.

* Fix tests.

* Fix imports and whitespace.

* Fix up some merge issues.

* Mark slow test slow.

* Remove file.

* Add missing skipif.

* Add missing import.

* Address comments.

* Fix formatting.

* Fix lint /import errors.

* Fix import."
,quantumlib,OpenFermion,src/openfermion/resource_estimates/pbc/sparse/generate_costing_table_sparse_test.py,"[PBC Resources Estimates 4/4] Add costing functions (#824)

* Add k-point THC code.

* Add k-thc notebook.

* Add utilities.

* Add reference data.

* Add missing __init__

* Add missing init / skipifs.

* Fix formatting.

* Resolve review comments.

* Address comments.

* Remove utils.

* No more utils.

* More review comments.

* Fix formatting.

* Formatting + add map to gvec_logic.

* Fix import issues.

* Add utility classes to handler different PBC Hamiltonian factorizations.

Add inits.

* No more utils.

* Tidyup.

* Fix formatting.

* Add functionality to compute PBC lambda values.

* Fix formatting and docstrings.

* Fix whitespace.

* Add costing PBC costing notebooks.

* Add utility costing functions.

* Make costing into package and add notebook.

* Add missing utilities.

* Refactor.

* Fix tests.

* Fix imports and whitespace.

* Fix up some merge issues.

* Mark slow test slow.

* Remove file.

* Add missing skipif.

* Add missing import.

* Address comments.

* Fix formatting.

* Fix lint /import errors.

* Fix import."
,quantumlib,OpenFermion,src/openfermion/resource_estimates/pbc/thc/__init__.py,"[PBC Resources Estimates 4/4] Add costing functions (#824)

* Add k-point THC code.

* Add k-thc notebook.

* Add utilities.

* Add reference data.

* Add missing __init__

* Add missing init / skipifs.

* Fix formatting.

* Resolve review comments.

* Address comments.

* Remove utils.

* No more utils.

* More review comments.

* Fix formatting.

* Formatting + add map to gvec_logic.

* Fix import issues.

* Add utility classes to handler different PBC Hamiltonian factorizations.

Add inits.

* No more utils.

* Tidyup.

* Fix formatting.

* Add functionality to compute PBC lambda values.

* Fix formatting and docstrings.

* Fix whitespace.

* Add costing PBC costing notebooks.

* Add utility costing functions.

* Make costing into package and add notebook.

* Add missing utilities.

* Refactor.

* Fix tests.

* Fix imports and whitespace.

* Fix up some merge issues.

* Mark slow test slow.

* Remove file.

* Add missing skipif.

* Add missing import.

* Address comments.

* Fix formatting.

* Fix lint /import errors.

* Fix import."
,quantumlib,OpenFermion,src/openfermion/resource_estimates/pbc/thc/compute_thc_resources.py,"[PBC Resources Estimates 4/4] Add costing functions (#824)

* Add k-point THC code.

* Add k-thc notebook.

* Add utilities.

* Add reference data.

* Add missing __init__

* Add missing init / skipifs.

* Fix formatting.

* Resolve review comments.

* Address comments.

* Remove utils.

* No more utils.

* More review comments.

* Fix formatting.

* Formatting + add map to gvec_logic.

* Fix import issues.

* Add utility classes to handler different PBC Hamiltonian factorizations.

Add inits.

* No more utils.

* Tidyup.

* Fix formatting.

* Add functionality to compute PBC lambda values.

* Fix formatting and docstrings.

* Fix whitespace.

* Add costing PBC costing notebooks.

* Add utility costing functions.

* Make costing into package and add notebook.

* Add missing utilities.

* Refactor.

* Fix tests.

* Fix imports and whitespace.

* Fix up some merge issues.

* Mark slow test slow.

* Remove file.

* Add missing skipif.

* Add missing import.

* Address comments.

* Fix formatting.

* Fix lint /import errors.

* Fix import."
,quantumlib,OpenFermion,src/openfermion/resource_estimates/pbc/thc/compute_thc_resources_test.py,"[PBC Resources Estimates 4/4] Add costing functions (#824)

* Add k-point THC code.

* Add k-thc notebook.

* Add utilities.

* Add reference data.

* Add missing __init__

* Add missing init / skipifs.

* Fix formatting.

* Resolve review comments.

* Address comments.

* Remove utils.

* No more utils.

* More review comments.

* Fix formatting.

* Formatting + add map to gvec_logic.

* Fix import issues.

* Add utility classes to handler different PBC Hamiltonian factorizations.

Add inits.

* No more utils.

* Tidyup.

* Fix formatting.

* Add functionality to compute PBC lambda values.

* Fix formatting and docstrings.

* Fix whitespace.

* Add costing PBC costing notebooks.

* Add utility costing functions.

* Make costing into package and add notebook.

* Add missing utilities.

* Refactor.

* Fix tests.

* Fix imports and whitespace.

* Fix up some merge issues.

* Mark slow test slow.

* Remove file.

* Add missing skipif.

* Add missing import.

* Address comments.

* Fix formatting.

* Fix lint /import errors.

* Fix import."
,quantumlib,OpenFermion,src/openfermion/resource_estimates/pbc/thc/generate_costing_table_thc.py,"[PBC Resources Estimates 4/4] Add costing functions (#824)

* Add k-point THC code.

* Add k-thc notebook.

* Add utilities.

* Add reference data.

* Add missing __init__

* Add missing init / skipifs.

* Fix formatting.

* Resolve review comments.

* Address comments.

* Remove utils.

* No more utils.

* More review comments.

* Fix formatting.

* Formatting + add map to gvec_logic.

* Fix import issues.

* Add utility classes to handler different PBC Hamiltonian factorizations.

Add inits.

* No more utils.

* Tidyup.

* Fix formatting.

* Add functionality to compute PBC lambda values.

* Fix formatting and docstrings.

* Fix whitespace.

* Add costing PBC costing notebooks.

* Add utility costing functions.

* Make costing into package and add notebook.

* Add missing utilities.

* Refactor.

* Fix tests.

* Fix imports and whitespace.

* Fix up some merge issues.

* Mark slow test slow.

* Remove file.

* Add missing skipif.

* Add missing import.

* Address comments.

* Fix formatting.

* Fix lint /import errors.

* Fix import."
,quantumlib,OpenFermion,src/openfermion/resource_estimates/pbc/df/compute_lambda_df.py,"[PBC Resources Estimates 3/4] Add computation of lambda (#823)

* Add k-point THC code.

* Add k-thc notebook.

* Add utilities.

* Add reference data.

* Add missing __init__

* Add missing init / skipifs.

* Fix formatting.

* Resolve review comments.

* Address comments.

* Remove utils.

* No more utils.

* More review comments.

* Fix formatting.

* Formatting + add map to gvec_logic.

* Fix import issues.

* Add utility classes to handler different PBC Hamiltonian factorizations.

Add inits.

* No more utils.

* Tidyup.

* Fix formatting.

* Add functionality to compute PBC lambda values.

* Fix formatting and docstrings.

* Fix whitespace.

* Update tests.

* Fix import and mark slow.

* Fix test failures.

* Fix docstrings.

* Revert change.

* Address review comments.

* Fix format."
,quantumlib,OpenFermion,src/openfermion/resource_estimates/pbc/df/compute_lambda_df_test.py,"[PBC Resources Estimates 3/4] Add computation of lambda (#823)

* Add k-point THC code.

* Add k-thc notebook.

* Add utilities.

* Add reference data.

* Add missing __init__

* Add missing init / skipifs.

* Fix formatting.

* Resolve review comments.

* Address comments.

* Remove utils.

* No more utils.

* More review comments.

* Fix formatting.

* Formatting + add map to gvec_logic.

* Fix import issues.

* Add utility classes to handler different PBC Hamiltonian factorizations.

Add inits.

* No more utils.

* Tidyup.

* Fix formatting.

* Add functionality to compute PBC lambda values.

* Fix formatting and docstrings.

* Fix whitespace.

* Update tests.

* Fix import and mark slow.

* Fix test failures.

* Fix docstrings.

* Revert change.

* Address review comments.

* Fix format."
,quantumlib,OpenFermion,src/openfermion/resource_estimates/pbc/hamiltonian/__init__.py,"[PBC Resources Estimates 3/4] Add computation of lambda (#823)

* Add k-point THC code.

* Add k-thc notebook.

* Add utilities.

* Add reference data.

* Add missing __init__

* Add missing init / skipifs.

* Fix formatting.

* Resolve review comments.

* Address comments.

* Remove utils.

* No more utils.

* More review comments.

* Fix formatting.

* Formatting + add map to gvec_logic.

* Fix import issues.

* Add utility classes to handler different PBC Hamiltonian factorizations.

Add inits.

* No more utils.

* Tidyup.

* Fix formatting.

* Add functionality to compute PBC lambda values.

* Fix formatting and docstrings.

* Fix whitespace.

* Update tests.

* Fix import and mark slow.

* Fix test failures.

* Fix docstrings.

* Revert change.

* Address review comments.

* Fix format."
,quantumlib,OpenFermion,src/openfermion/resource_estimates/pbc/sf/compute_lambda_sf.py,"[PBC Resources Estimates 3/4] Add computation of lambda (#823)

* Add k-point THC code.

* Add k-thc notebook.

* Add utilities.

* Add reference data.

* Add missing __init__

* Add missing init / skipifs.

* Fix formatting.

* Resolve review comments.

* Address comments.

* Remove utils.

* No more utils.

* More review comments.

* Fix formatting.

* Formatting + add map to gvec_logic.

* Fix import issues.

* Add utility classes to handler different PBC Hamiltonian factorizations.

Add inits.

* No more utils.

* Tidyup.

* Fix formatting.

* Add functionality to compute PBC lambda values.

* Fix formatting and docstrings.

* Fix whitespace.

* Update tests.

* Fix import and mark slow.

* Fix test failures.

* Fix docstrings.

* Revert change.

* Address review comments.

* Fix format."
,quantumlib,OpenFermion,src/openfermion/resource_estimates/pbc/thc/compute_lambda_thc.py,"[PBC Resources Estimates 3/4] Add computation of lambda (#823)

* Add k-point THC code.

* Add k-thc notebook.

* Add utilities.

* Add reference data.

* Add missing __init__

* Add missing init / skipifs.

* Fix formatting.

* Resolve review comments.

* Address comments.

* Remove utils.

* No more utils.

* More review comments.

* Fix formatting.

* Formatting + add map to gvec_logic.

* Fix import issues.

* Add utility classes to handler different PBC Hamiltonian factorizations.

Add inits.

* No more utils.

* Tidyup.

* Fix formatting.

* Add functionality to compute PBC lambda values.

* Fix formatting and docstrings.

* Fix whitespace.

* Update tests.

* Fix import and mark slow.

* Fix test failures.

* Fix docstrings.

* Revert change.

* Address review comments.

* Fix format."
,quantumlib,OpenFermion,src/openfermion/resource_estimates/pbc/thc/compute_lambda_thc_test.py,"[PBC Resources Estimates 3/4] Add computation of lambda (#823)

* Add k-point THC code.

* Add k-thc notebook.

* Add utilities.

* Add reference data.

* Add missing __init__

* Add missing init / skipifs.

* Fix formatting.

* Resolve review comments.

* Address comments.

* Remove utils.

* No more utils.

* More review comments.

* Fix formatting.

* Formatting + add map to gvec_logic.

* Fix import issues.

* Add utility classes to handler different PBC Hamiltonian factorizations.

Add inits.

* No more utils.

* Tidyup.

* Fix formatting.

* Add functionality to compute PBC lambda values.

* Fix formatting and docstrings.

* Fix whitespace.

* Update tests.

* Fix import and mark slow.

* Fix test failures.

* Fix docstrings.

* Revert change.

* Address review comments.

* Fix format."
,quantumlib,OpenFermion,src/openfermion/resource_estimates/pbc/df/df_integrals_test.py,"[PBC Resources Estimates 2/4] Add Integral Factorization Helpers (#822)

* Add k-point THC code.

* Add k-thc notebook.

* Add utilities.

* Add reference data.

* Add missing __init__

* Add missing init / skipifs.

* Fix formatting.

* Resolve review comments.

* Address comments.

* Remove utils.

* No more utils.

* More review comments.

* Fix formatting.

* Formatting + add map to gvec_logic.

* Fix import issues.

* Add utility classes to handler different PBC Hamiltonian factorizations.

Add inits.

* No more utils.

* Tidyup.

* Fix formatting.

* Add include guards.

* Fix inits.

* Fix import.

* Remove test systems.

* Fix format.

* Address review comments.

* Fixes for checks."
,quantumlib,OpenFermion,src/openfermion/resource_estimates/pbc/hamiltonian/cc_extensions_test.py,"[PBC Resources Estimates 2/4] Add Integral Factorization Helpers (#822)

* Add k-point THC code.

* Add k-thc notebook.

* Add utilities.

* Add reference data.

* Add missing __init__

* Add missing init / skipifs.

* Fix formatting.

* Resolve review comments.

* Address comments.

* Remove utils.

* No more utils.

* More review comments.

* Fix formatting.

* Formatting + add map to gvec_logic.

* Fix import issues.

* Add utility classes to handler different PBC Hamiltonian factorizations.

Add inits.

* No more utils.

* Tidyup.

* Fix formatting.

* Add include guards.

* Fix inits.

* Fix import.

* Remove test systems.

* Fix format.

* Address review comments.

* Fixes for checks."
,quantumlib,OpenFermion,src/openfermion/resource_estimates/pbc/sparse/sparse_integrals_test.py,"[PBC Resources Estimates 2/4] Add Integral Factorization Helpers (#822)

* Add k-point THC code.

* Add k-thc notebook.

* Add utilities.

* Add reference data.

* Add missing __init__

* Add missing init / skipifs.

* Fix formatting.

* Resolve review comments.

* Address comments.

* Remove utils.

* No more utils.

* More review comments.

* Fix formatting.

* Formatting + add map to gvec_logic.

* Fix import issues.

* Add utility classes to handler different PBC Hamiltonian factorizations.

Add inits.

* No more utils.

* Tidyup.

* Fix formatting.

* Add include guards.

* Fix inits.

* Fix import.

* Remove test systems.

* Fix format.

* Address review comments.

* Fixes for checks."
,rigetti,pyquil,pyquil/control_flow_graph.py,"feat: Add Program#control_flow_graph() method (#1770)

* feat: Add Program#control_flow_graph() method

* Use inheritance for CFG class

* update qcs-sdk-python

* fix doc links

* needs to be fully qualified for link to navigate

* NoneType not available in all python versions

* update qcs-sdk-python"
,rigetti,pyquil,pyquil/quil.py,"feat: Add Program#control_flow_graph() method (#1770)

* feat: Add Program#control_flow_graph() method

* Use inheritance for CFG class

* update qcs-sdk-python

* fix doc links

* needs to be fully qualified for link to navigate

* NoneType not available in all python versions

* update qcs-sdk-python"
,rigetti,pyquil,test/unit/test_control_flow_graph.py,"feat: Add Program#control_flow_graph() method (#1770)

* feat: Add Program#control_flow_graph() method

* Use inheritance for CFG class

* update qcs-sdk-python

* fix doc links

* needs to be fully qualified for link to navigate

* NoneType not available in all python versions

* update qcs-sdk-python"
,rigetti,pyquil,docs/source/advanced_usage.rst,"fix: Program serialization is deterministic, and program equality checks have been corrected. (#1767)

* fix: Programs with the same set of calibrations compare as equal, regardless of their order

* Add test

* formatting

* formatting

* note for correctness

* update qcs-sdk-python/quil, update test

* update lockfile

* fix tests"
,rigetti,pyquil,test/unit/test_quil.py,"fix: Program serialization is deterministic, and program equality checks have been corrected. (#1767)

* fix: Programs with the same set of calibrations compare as equal, regardless of their order

* Add test

* formatting

* formatting

* note for correctness

* update qcs-sdk-python/quil, update test

* update lockfile

* fix tests"
,rigetti,pyquil,test/unit/test_rewrite_arithmetic.py,"fix: Program serialization is deterministic, and program equality checks have been corrected. (#1767)

* fix: Programs with the same set of calibrations compare as equal, regardless of their order

* Add test

* formatting

* formatting

* note for correctness

* update qcs-sdk-python/quil, update test

* update lockfile

* fix tests"
,rigetti,pyquil,test/unit/test_quilatom.py,"fix: Expression arithmetic does not error when a numpy type is on the left hand side. (#1769)

* fix: Expression arithmetic does not error when a numpy type is on the
left hand side.

* add comment"
,rigetti,pyquil,pyquil/quil.py,"fix: Program#out(calibrations=False) will not expand calibrations (#1758)

* fix: Program#out(calibrations=False) will not expand matching calibrations

* remove debug print

* dont filter all quil-t instructions

* add more instructions to test"
,rigetti,pyquil,test/unit/test_quil.py,"fix: Program#out(calibrations=False) will not expand calibrations (#1758)

* fix: Program#out(calibrations=False) will not expand matching calibrations

* remove debug print

* dont filter all quil-t instructions

* add more instructions to test"
,rigetti,pyquil,docs/source/programs_and_gates.rst,"feat: Add run_with_memory_map_batch method for more efficient execution of parameter batches (#1750)

* feat: Add execute_with_memory_map_batch method for QPUs

* return the responses

* update unit tests

* add to interface and update docs

* fix qpu signature

* Update pyquil/api/_qam.py

Co-authored-by: Kalan <22137047+kalzoo@users.noreply.github.com>

* fix comprehension

* bubble up the API to QuantumComputer

---------

Co-authored-by: Kalan <22137047+kalzoo@users.noreply.github.com>"
,rigetti,pyquil,pyquil/api/_qam.py,"feat: Add run_with_memory_map_batch method for more efficient execution of parameter batches (#1750)

* feat: Add execute_with_memory_map_batch method for QPUs

* return the responses

* update unit tests

* add to interface and update docs

* fix qpu signature

* Update pyquil/api/_qam.py

Co-authored-by: Kalan <22137047+kalzoo@users.noreply.github.com>

* fix comprehension

* bubble up the API to QuantumComputer

---------

Co-authored-by: Kalan <22137047+kalzoo@users.noreply.github.com>"
,rigetti,pyquil,pyquil/api/_qpu.py,"feat: Add run_with_memory_map_batch method for more efficient execution of parameter batches (#1750)

* feat: Add execute_with_memory_map_batch method for QPUs

* return the responses

* update unit tests

* add to interface and update docs

* fix qpu signature

* Update pyquil/api/_qam.py

Co-authored-by: Kalan <22137047+kalzoo@users.noreply.github.com>

* fix comprehension

* bubble up the API to QuantumComputer

---------

Co-authored-by: Kalan <22137047+kalzoo@users.noreply.github.com>"
,rigetti,pyquil,pyquil/api/_quantum_computer.py,"feat: Add run_with_memory_map_batch method for more efficient execution of parameter batches (#1750)

* feat: Add execute_with_memory_map_batch method for QPUs

* return the responses

* update unit tests

* add to interface and update docs

* fix qpu signature

* Update pyquil/api/_qam.py

Co-authored-by: Kalan <22137047+kalzoo@users.noreply.github.com>

* fix comprehension

* bubble up the API to QuantumComputer

---------

Co-authored-by: Kalan <22137047+kalzoo@users.noreply.github.com>"
,rigetti,pyquil,pyquil/pyqvm.py,"feat: Add run_with_memory_map_batch method for more efficient execution of parameter batches (#1750)

* feat: Add execute_with_memory_map_batch method for QPUs

* return the responses

* update unit tests

* add to interface and update docs

* fix qpu signature

* Update pyquil/api/_qam.py

Co-authored-by: Kalan <22137047+kalzoo@users.noreply.github.com>

* fix comprehension

* bubble up the API to QuantumComputer

---------

Co-authored-by: Kalan <22137047+kalzoo@users.noreply.github.com>"
,rigetti,pyquil,test/unit/test_graph.py,"fix: CompilerISA.dict() now uses the correct default field names: qubits and edges (#1746)

* fix: CompilerISA.dict() now uses the correct default field names: qubits and edges

* ci: update poetry rtd config

* with doesn't work

* new poetry is borked"
,mit-han-lab,torchquantum,.github/workflows/functional_tests.yaml,"Merge pull request #236 from GenericP3rson/test_branch

Test Updates + Bug Fixes (Updated Version of #206)"
,mit-han-lab,torchquantum,examples/mnist/mnist.py,"Merge pull request #236 from GenericP3rson/test_branch

Test Updates + Bug Fixes (Updated Version of #206)"
,mit-han-lab,torchquantum,torchquantum/__init__.py,"Merge pull request #236 from GenericP3rson/test_branch

Test Updates + Bug Fixes (Updated Version of #206)"
,mit-han-lab,torchquantum,torchquantum/algorithm/__init__.py,"Merge pull request #236 from GenericP3rson/test_branch

Test Updates + Bug Fixes (Updated Version of #206)"
,mit-han-lab,torchquantum,torchquantum/functional/sx.py,"Merge pull request #236 from GenericP3rson/test_branch

Test Updates + Bug Fixes (Updated Version of #206)"
,mit-han-lab,torchquantum,torchquantum/layer/layers/seth_layer.py,"Merge pull request #236 from GenericP3rson/test_branch

Test Updates + Bug Fixes (Updated Version of #206)"
,mit-han-lab,torchquantum,torchquantum/layer/layers/u3_layer.py,"Merge pull request #236 from GenericP3rson/test_branch

Test Updates + Bug Fixes (Updated Version of #206)"
,mit-han-lab,torchquantum,torchquantum/pulse/__init__.py,"Merge pull request #236 from GenericP3rson/test_branch

Test Updates + Bug Fixes (Updated Version of #206)"
,mit-han-lab,torchquantum,.github/workflows/functional_tests.yaml,"Merge pull request #239 from mit-han-lab/tq_bugfix

Tq bugfix"
,mit-han-lab,torchquantum,torchquantum/util/utils.py,"Merge pull request #239 from mit-han-lab/tq_bugfix

Tq bugfix"
,mit-han-lab,torchquantum,torchquantum/util/utils.py,"Merge pull request #14 from mit-han-lab/tq_bugfix

Tq bugfix"
,mit-han-lab,torchquantum,torchquantum/device/__init__.py,"Merge pull request #12 from GenericP3rson/fix_test

fix_test to test_branch"
,mit-han-lab,torchquantum,torchquantum/device/noisedevices.py,"Merge pull request #12 from GenericP3rson/fix_test

fix_test to test_branch"
,mit-han-lab,torchquantum,torchquantum/functional/gate_wrapper.py,"Merge pull request #12 from GenericP3rson/fix_test

fix_test to test_branch"
,mit-han-lab,torchquantum,torchquantum/measurement/measurements.py,"Merge pull request #12 from GenericP3rson/fix_test

fix_test to test_branch"
,mit-han-lab,torchquantum,examples/mnist/mnist.py,Merge branch 'test_branch' into fix_test
,mit-han-lab,torchquantum,torchquantum/__init__.py,Merge branch 'test_branch' into fix_test
,mit-han-lab,torchquantum,torchquantum/algorithm/__init__.py,Merge branch 'test_branch' into fix_test
,mit-han-lab,torchquantum,torchquantum/functional/sx.py,Merge branch 'test_branch' into fix_test
,mit-han-lab,torchquantum,torchquantum/layer/layers/seth_layer.py,Merge branch 'test_branch' into fix_test
,mit-han-lab,torchquantum,torchquantum/layer/layers/u3_layer.py,Merge branch 'test_branch' into fix_test
,mit-han-lab,torchquantum,torchquantum/pulse/__init__.py,Merge branch 'test_branch' into fix_test
,openqasm,openqasm,releasenotes/notes/fix-broadcast-example-ffb53ef1af8d8435.yaml,"Fix incorrect syntax in broadcasting example. (#536)

* Fix incorrect syntax in broadcasting example.

* Add release note

---------

Co-authored-by: Jake Lishman <jake.lishman@ibm.com>"
,openqasm,openqasm,source/language/gates.rst,"Fix incorrect syntax in broadcasting example. (#536)

* Fix incorrect syntax in broadcasting example.

* Add release note

---------

Co-authored-by: Jake Lishman <jake.lishman@ibm.com>"
,openqasm,openqasm,examples/stdgates.inc,Merge branch 'openqasm:main' into fixes
,openqasm,openqasm,releasenotes/notes/document-stdgates.inc-ff6b02348c1c2594.yaml,Merge branch 'openqasm:main' into fixes
,openqasm,openqasm,releasenotes/notes/pow-stdgates-3adfb62d8f08b1f8.yaml,Merge branch 'openqasm:main' into fixes
,openqasm,openqasm,releasenotes/notes/remove-incorrect-stdgates-file-d6a93fe18dbe669e.yaml,Merge branch 'openqasm:main' into fixes
,openqasm,openqasm,requirements.txt,Merge branch 'openqasm:main' into fixes
,openqasm,openqasm,source/conf.py,Merge branch 'openqasm:main' into fixes
,openqasm,openqasm,source/grammar/tests/reference/gate/gate_modifiers.yaml,Merge branch 'openqasm:main' into fixes
,openqasm,openqasm,source/language/comments.rst,Merge branch 'openqasm:main' into fixes
,openqasm,openqasm,source/language/gates.rst,Merge branch 'openqasm:main' into fixes
,openqasm,openqasm,source/language/index.rst,Merge branch 'openqasm:main' into fixes
,openqasm,openqasm,source/language/standard_library.rst,Merge branch 'openqasm:main' into fixes
,openqasm,openqasm,requirements.txt,Fix incorrect dependency
,openqasm,openqasm,releasenotes/notes/remove-incorrect-stdgates-file-d6a93fe18dbe669e.yaml,"Replace an occurrence of stdgates.qasm with stdgates.inc (#523)

* Replace an occurrence of stdgates.qasm with stdgates.inc

In another PR We are adding behavior around stdgates.inc to the spec, and the name of the
file is fixed. The appearance of `include ""stdgates.qasm""` here is confusing because
it looks like it is including the standard library declarations, but in fact is
not.

* Add release note for the previous commit"
,openqasm,openqasm,source/language/comments.rst,"Replace an occurrence of stdgates.qasm with stdgates.inc (#523)

* Replace an occurrence of stdgates.qasm with stdgates.inc

In another PR We are adding behavior around stdgates.inc to the spec, and the name of the
file is fixed. The appearance of `include ""stdgates.qasm""` here is confusing because
it looks like it is including the standard library declarations, but in fact is
not.

* Add release note for the previous commit"
,openqasm,openqasm,source/language/standard_library.rst,"Fix typo

Co-authored-by: John Lapeyre <jlapeyre@users.noreply.github.com>"
,OriginQ,QPanda-2,Applications/HHL_Algorithm/BasicFunctionByOrigin.h,<fix> update 2.1.17
,OriginQ,QPanda-2,Components/ChemiQ/ChemiqUtil.cpp,<fix> update 2.1.17
,OriginQ,QPanda-2,Components/Operator/PauliOperator.cpp,<fix> update 2.1.17
,OriginQ,QPanda-2,Core/QuantumCircuit/QuantumGate.cpp,<fix> update 2.1.17
,OriginQ,QPanda-2,Core/QuantumCloud/QCloudMachine.cpp,<fix> update 2.1.17
,OriginQ,QPanda-2,Core/QuantumMachine/PartialAmplitudeQVM.cpp,<fix> update 2.1.17
,OriginQ,QPanda-2,Core/Utilities/QProgInfo/QCircuitInfo.cpp,<fix> update 2.1.17
,OriginQ,QPanda-2,Core/Utilities/QProgInfo/RandomizedBenchmarking.cpp,<fix> update 2.1.17
,OriginQ,QPanda-2,Core/Utilities/QProgInfo/Visualization/DrawTextPic.cpp,<fix> update 2.1.17
,OriginQ,QPanda-2,Core/Utilities/Tools/Utils.cpp,<fix> update 2.1.17
,OriginQ,QPanda-2,Core/VirtualQuantumProcessor/CPUImplQPUSingleThread.cpp,<fix> update 2.1.17
,OriginQ,QPanda-2,Core/VirtualQuantumProcessor/DensityMatrix/DensityMatrixNoise.cpp,<fix> update 2.1.17
,OriginQ,QPanda-2,Core/VirtualQuantumProcessor/DensityMatrix/DensityMatrixSimulator.cpp,<fix> update 2.1.17
,OriginQ,QPanda-2,Core/VirtualQuantumProcessor/MPSQVM/MPSQVM.cpp,<fix> update 2.1.17
,OriginQ,QPanda-2,Core/VirtualQuantumProcessor/PartialAmplitude/PartialAmplitudeGraph.cpp,<fix> update 2.1.17
,OriginQ,QPanda-2,Core/VirtualQuantumProcessor/SparesQVM/SparseQVM.cpp,<fix> update 2.1.17
,OriginQ,QPanda-2,Core/VirtualQuantumProcessor/Stabilizer/Clifford.cpp,<fix> update 2.1.17
,OriginQ,QPanda-2,Core/VirtualQuantumProcessor/Stabilizer/Stabilizer.cpp,<fix> update 2.1.17
,OriginQ,QPanda-2,CHANGELOG.md,<fix> update 2.1.16
,OriginQ,QPanda-2,CMakeSettings.json,<fix> update 2.1.16
,OriginQ,QPanda-2,Components/ChemiQ/ChemiqUtil.cpp,<fix> update 2.1.16
,OriginQ,QPanda-2,Components/HamiltonianSimulation/HamiltonianSimulation.cpp,<fix> update 2.1.16
,OriginQ,QPanda-2,Components/Operator/PauliOperator.cpp,<fix> update 2.1.16
,OriginQ,QPanda-2,Core/Core.cpp,<fix> update 2.1.16
,OriginQ,QPanda-2,Core/Module/Ansatz.cpp,<fix> update 2.1.16
,OriginQ,QPanda-2,Core/QuantumCircuit/QGate.cpp,<fix> update 2.1.16
,OriginQ,QPanda-2,Core/QuantumCircuit/QuantumGate.cpp,<fix> update 2.1.16
,OriginQ,QPanda-2,Core/QuantumMachine/NoiseQVM.cpp,<fix> update 2.1.16
,OriginQ,QPanda-2,Core/QuantumMachine/OriginQVM.cpp,<fix> update 2.1.16
,OriginQ,QPanda-2,Core/QuantumMachine/PartialAmplitudeQVM.cpp,<fix> update 2.1.16
,OriginQ,QPanda-2,Core/QuantumMachine/QProgCheck.cpp,<fix> update 2.1.16
,OriginQ,QPanda-2,Core/QuantumMachine/SingleAmplitudeQVM.cpp,<fix> update 2.1.16
,OriginQ,QPanda-2,Core/QuantumNoise/NoiseModelV2.cpp,<fix> update 2.1.16
,OriginQ,QPanda-2,Core/Utilities/Compiler/QProgToOriginIR.cpp,<fix> update 2.1.16
,OriginQ,QPanda-2,Core/Utilities/QProgInfo/KAK.cpp,<fix> update 2.1.16
,OriginQ,QPanda-2,Core/Utilities/QProgInfo/QCircuitInfo.cpp,<fix> update 2.1.16
,OriginQ,QPanda-2,Core/Utilities/QProgInfo/QProgClockCycle.cpp,<fix> update 2.1.16
,OriginQ,QPanda-2,Core/Utilities/QProgTransform/TransformDecomposition.cpp,<fix> update 2.1.16
,OriginQ,QPanda-2,Core/Utilities/Tools/JsonConfigParam.cpp,<fix> update 2.1.16
,OriginQ,QPanda-2,Core/Utilities/Tools/MatrixDecomposition.cpp,<fix> update 2.1.16
,OriginQ,QPanda-2,Core/Utilities/Tools/MultiControlGateDecomposition.cpp,<fix> update 2.1.16
,OriginQ,QPanda-2,Core/Utilities/Tools/ProcessOnTraversing.cpp,<fix> update 2.1.16
,OriginQ,QPanda-2,Core/Utilities/Tools/QCircuitFusion.cpp,<fix> update 2.1.16
,OriginQ,QPanda-2,Core/Utilities/Tools/QStatMatrix.cpp,<fix> update 2.1.16
,OriginQ,QPanda-2,Core/Utilities/Tools/RemapQProg.cpp,<fix> update 2.1.16
,OriginQ,QPanda-2,Core/Utilities/UnitaryDecomposer/IsometryDecomposition.cpp,<fix> update 2.1.16
,OriginQ,QPanda-2,Core/Utilities/UnitaryDecomposer/QSDecomposition.cpp,<fix> update 2.1.16
,OriginQ,QPanda-2,Core/Utilities/UnitaryDecomposer/UniformlyControlledGates.cpp,<fix> update 2.1.16
,OriginQ,QPanda-2,Core/Variational/var.cpp,<fix> update 2.1.16
,OriginQ,QPanda-2,Core/VirtualQuantumProcessor/DensityMatrix/DensityMatrix.cpp,<fix> update 2.1.16
,OriginQ,QPanda-2,Core/VirtualQuantumProcessor/DensityMatrix/DensityMatrixNoise.cpp,<fix> update 2.1.16
,OriginQ,QPanda-2,Core/VirtualQuantumProcessor/DensityMatrix/DensityMatrixSimulator.cpp,<fix> update 2.1.16
,OriginQ,QPanda-2,Core/VirtualQuantumProcessor/DensityMatrix/VectorMatrix.cpp,<fix> update 2.1.16
,OriginQ,QPanda-2,Core/VirtualQuantumProcessor/MPSQVM/NoiseDefinition.cpp,<fix> update 2.1.16
,OriginQ,QPanda-2,Core/VirtualQuantumProcessor/MPSQVM/NoiseSimulator.cpp,<fix> update 2.1.16
,OriginQ,QPanda-2,Core/VirtualQuantumProcessor/NoiseQPU/NoiseCPUImplQPU.cpp,<fix> update 2.1.16
,OriginQ,QPanda-2,Core/VirtualQuantumProcessor/NoiseQPU/NoiseModel.cpp,<fix> update 2.1.16
,OriginQ,QPanda-2,Core/VirtualQuantumProcessor/SparesQVM/SparseQVM.cpp,<fix> update 2.1.16
,psi4,psi4,samples/cookbook/rohf-orb-rot/input.dat,"pre v1.9 misc (#3095)

* autogen samples

* new docs env. remove old variable fns

* fix up

* allow running grid calculations through qcschema"
,psi4,psi4,samples/dfmp2-5/input.dat,"pre v1.9 misc (#3095)

* autogen samples

* new docs env. remove old variable fns

* fix up

* allow running grid calculations through qcschema"
,psi4,psi4,samples/dfmp2-5/test.in,"pre v1.9 misc (#3095)

* autogen samples

* new docs env. remove old variable fns

* fix up

* allow running grid calculations through qcschema"
,psi4,psi4,samples/extern4/test.in,"pre v1.9 misc (#3095)

* autogen samples

* new docs env. remove old variable fns

* fix up

* allow running grid calculations through qcschema"
,qiskit-community,qiskit-textbook,content/ch-algorithms/deutsch-jozsa.ipynb,fixes_composing_problem_issue #1562
,qiskit-community,qiskit-textbook,content/ch-labs/Lab01_QuantumCircuits.ipynb,"Merge pull request #1548 from william-cutler/main

Fix typos in exercise function docstring"
,qiskit-community,qiskit-textbook,content/ch-algorithms/quantum-counting.ipynb,"Merge pull request #1550 from lucasvanmol/patch-1

[3.9] Fix qft function"
,qiskit-community,qiskit-textbook,content/ch-algorithms/quantum-counting.ipynb,[3.9] Fix qft function
,qiskit-community,qiskit-textbook,content/ch-states/representing-qubit-states.ipynb,"Merge pull request #1538 from RahulGopan0/patch-2

[1.3] Fixed save_statevector() error representing-qubit-states.ipynb"
,QuantumBFS,Yao.jl,ext/CuYao/src/CuYao.jl,"Fix CUDA extension - Project.toml (#506)

* update

* fix CUDA weakdeps

* fix tests"
,QuantumBFS,Yao.jl,ext/CuYao/test/yao2einsum.jl,"Fix CUDA extension - Project.toml (#506)

* update

* fix CUDA weakdeps

* fix tests"
,QuantumBFS,Yao.jl,.github/workflows/CI.yml,"Make YaoToEinsum a component package (#502)

* polish docs

* fix doctests"
,QuantumBFS,Yao.jl,Project.toml,"Make YaoToEinsum a component package (#502)

* polish docs

* fix doctests"
,QuantumBFS,Yao.jl,docs/src/man/yao2einsum.md,"Make YaoToEinsum a component package (#502)

* polish docs

* fix doctests"
,QuantumBFS,Yao.jl,lib/YaoToEinsum/CITATION.bib,"Make YaoToEinsum a component package (#502)

* polish docs

* fix doctests"
,QuantumBFS,Yao.jl,lib/YaoToEinsum/src/YaoToEinsum.jl,"Make YaoToEinsum a component package (#502)

* polish docs

* fix doctests"
,QuantumBFS,Yao.jl,lib/YaoToEinsum/src/circuitmap.jl,"Make YaoToEinsum a component package (#502)

* polish docs

* fix doctests"
,QuantumBFS,Yao.jl,lib/YaoToEinsum/test/circuitmap.jl,"Make YaoToEinsum a component package (#502)

* polish docs

* fix doctests"
,QuantumBFS,Yao.jl,lib/YaoToEinsum/test/runtests.jl,"Make YaoToEinsum a component package (#502)

* polish docs

* fix doctests"
,QuantumBFS,Yao.jl,src/Yao.jl,"Make YaoToEinsum a component package (#502)

* polish docs

* fix doctests"
,QuantumBFS,Yao.jl,lib/YaoAPI/src/blocks.jl,"fix issue 432 (#435)

* fix issue 432

* update

* Update lib/YaoArrayRegister/src/operations.jl

Co-authored-by: Rogerluo <rogerluo.rl18@gmail.com>

---------

Co-authored-by: Rogerluo <rogerluo.rl18@gmail.com>"
,QuantumBFS,Yao.jl,lib/YaoArrayRegister/src/operations.jl,"fix issue 432 (#435)

* fix issue 432

* update

* Update lib/YaoArrayRegister/src/operations.jl

Co-authored-by: Rogerluo <rogerluo.rl18@gmail.com>

---------

Co-authored-by: Rogerluo <rogerluo.rl18@gmail.com>"
,QuantumBFS,Yao.jl,lib/YaoArrayRegister/test/operations.jl,"fix issue 432 (#435)

* fix issue 432

* update

* Update lib/YaoArrayRegister/src/operations.jl

Co-authored-by: Rogerluo <rogerluo.rl18@gmail.com>

---------

Co-authored-by: Rogerluo <rogerluo.rl18@gmail.com>"
,QuantumBFS,Yao.jl,lib/YaoBlocks/src/blocktools.jl,"fix issue 432 (#435)

* fix issue 432

* update

* Update lib/YaoArrayRegister/src/operations.jl

Co-authored-by: Rogerluo <rogerluo.rl18@gmail.com>

---------

Co-authored-by: Rogerluo <rogerluo.rl18@gmail.com>"
,QuantumBFS,Yao.jl,lib/YaoBlocks/test/measure_ops.jl,"fix issue 432 (#435)

* fix issue 432

* update

* Update lib/YaoArrayRegister/src/operations.jl

Co-authored-by: Rogerluo <rogerluo.rl18@gmail.com>

---------

Co-authored-by: Rogerluo <rogerluo.rl18@gmail.com>"
,QuantumBFS,Yao.jl,test/easybuild/hadamardtest.jl,"fix issue 432 (#435)

* fix issue 432

* update

* Update lib/YaoArrayRegister/src/operations.jl

Co-authored-by: Rogerluo <rogerluo.rl18@gmail.com>

---------

Co-authored-by: Rogerluo <rogerluo.rl18@gmail.com>"
,Strilanc,Quirk,src/gates/ComparisonGates.js,"Fix alternates of comparison gates (#460)

<'s alternate is >= instead of >"
,Strilanc,Quirk,src/circuit/Gate.js,Fix X and Y parity controls not being blocked on measured qubits
,Strilanc,Quirk,src/gates/Controls.js,Fix X and Y parity controls not being blocked on measured qubits
,Strilanc,Quirk,test/gates/AllGates.test.js,Fix X and Y parity controls not being blocked on measured qubits
,Strilanc,Quirk,test/gates/Controls.test.js,Fix X and Y parity controls not being blocked on measured qubits
,Strilanc,Quirk,src/gates/DensityMatrixDisplay.js,Fix transposition of displayed values in single qubit density matrix display
,ProjectQ-Framework,ProjectQ,README.rst,"Update README.rst (#467)

* Update README.rst

fix imports in README example

* Update CHANGELOG.md"
,ProjectQ-Framework,ProjectQ,projectq/backends/_sim/_pysim.py,"[pre-commit.ci] pre-commit autoupdate (#458)

* [pre-commit.ci] pre-commit autoupdate

updates:
- [github.com/psf/black: 22.12.0 闂 23.1.0](https://github.com/psf/black/compare/22.12.0...23.1.0)
- [github.com/PyCQA/flake8: 5.0.4 闂 6.0.0](https://github.com/PyCQA/flake8/compare/5.0.4...6.0.0)

* Update CHANGELOG and keep flake8 5.0.4 for pre-commit hooks

* [pre-commit.ci] auto fixes from pre-commit.com hooks

for more information, see https://pre-commit.ci

---------

Co-authored-by: pre-commit-ci[bot] <66853113+pre-commit-ci[bot]@users.noreply.github.com>
Co-authored-by: Damien Nguyen <ngn.damien@gmail.com>"
,ProjectQ-Framework,ProjectQ,.codespell.allow,"Prepare the introduction of pre-commit CI + repository configuration updates (#453)

* Remove pre-commit from GitHub workflows in favour of pre-commit CI

* Remove manual tag for pre-commit hooks

* Update CHANGELOG

* Update pre-commit configuration file + add .yamllint

- Added new pre-commit hooks
  + codespell
  + pydocstyle
  + doc8
  + yamllint
- Update pre-commit hook versions
- Add .yamllint configuration file
- Add .codespell.allow file for codespell

* Delete .travis.yml file since not used anymore

* Update YAML files to satisfy yamllint

* Update Markdown files to fix linter/formatter warnings

* Update ReST files to fix linter/formatter warnings

* Update Python files to fix linter/formatter warnings

* Rename CI jobs

* Install pybind11 earlier in CI build

* Update CHANGELOG

* Address pre-commit CI virtualenv size limitations"
,ProjectQ-Framework,ProjectQ,projectq/setups/decompositions/phaseestimation.py,"Prepare the introduction of pre-commit CI + repository configuration updates (#453)

* Remove pre-commit from GitHub workflows in favour of pre-commit CI

* Remove manual tag for pre-commit hooks

* Update CHANGELOG

* Update pre-commit configuration file + add .yamllint

- Added new pre-commit hooks
  + codespell
  + pydocstyle
  + doc8
  + yamllint
- Update pre-commit hook versions
- Add .yamllint configuration file
- Add .codespell.allow file for codespell

* Delete .travis.yml file since not used anymore

* Update YAML files to satisfy yamllint

* Update Markdown files to fix linter/formatter warnings

* Update ReST files to fix linter/formatter warnings

* Update Python files to fix linter/formatter warnings

* Rename CI jobs

* Install pybind11 earlier in CI build

* Update CHANGELOG

* Address pre-commit CI virtualenv size limitations"
,ProjectQ-Framework,ProjectQ,projectq/setups/grid.py,"Prepare the introduction of pre-commit CI + repository configuration updates (#453)

* Remove pre-commit from GitHub workflows in favour of pre-commit CI

* Remove manual tag for pre-commit hooks

* Update CHANGELOG

* Update pre-commit configuration file + add .yamllint

- Added new pre-commit hooks
  + codespell
  + pydocstyle
  + doc8
  + yamllint
- Update pre-commit hook versions
- Add .yamllint configuration file
- Add .codespell.allow file for codespell

* Delete .travis.yml file since not used anymore

* Update YAML files to satisfy yamllint

* Update Markdown files to fix linter/formatter warnings

* Update ReST files to fix linter/formatter warnings

* Update Python files to fix linter/formatter warnings

* Rename CI jobs

* Install pybind11 earlier in CI build

* Update CHANGELOG

* Address pre-commit CI virtualenv size limitations"
,ProjectQ-Framework,ProjectQ,projectq/setups/linear.py,"Prepare the introduction of pre-commit CI + repository configuration updates (#453)

* Remove pre-commit from GitHub workflows in favour of pre-commit CI

* Remove manual tag for pre-commit hooks

* Update CHANGELOG

* Update pre-commit configuration file + add .yamllint

- Added new pre-commit hooks
  + codespell
  + pydocstyle
  + doc8
  + yamllint
- Update pre-commit hook versions
- Add .yamllint configuration file
- Add .codespell.allow file for codespell

* Delete .travis.yml file since not used anymore

* Update YAML files to satisfy yamllint

* Update Markdown files to fix linter/formatter warnings

* Update ReST files to fix linter/formatter warnings

* Update Python files to fix linter/formatter warnings

* Rename CI jobs

* Install pybind11 earlier in CI build

* Update CHANGELOG

* Address pre-commit CI virtualenv size limitations"
,ProjectQ-Framework,ProjectQ,CHANGELOG.md,"Context Manager: with flushing(MainEngine()) as eng: (#449)

* Context Manager: with flushing(MainEngine()) as eng:

Simplify the creation, use, and flushing of any Engine using a Python context manager.

When exiting the `with` block, the engine is _automatically_ flushed.

Modeled after https://docs.python.org/3/library/contextlib.html#contextlib.closing
```python
from projectq import MainEngine, flushing  # import the main compiler engine
from projectq.ops import (
    H,
    Measure,
)  # import the operations we want to perform (Hadamard and measurement)

with flushing(MainEngine()) as eng:  # create a default compiler (the back-end is a simulator)
    qubit = eng.allocate_qubit()  # allocate a quantum register with 1 qubit

    H | qubit  # apply a Hadamard gate
    Measure | qubit  # measure the qubit

    # This line is no longer required... eng.flush()

print(f""Measured {int(qubit)}"")  # converting a qubit to int or bool gives access to the measurement result

* Add tests

* Run linters/formatters on code

* Fix isort comment pragmas

* Really fix isort issues in cengines/__init__.py

Co-authored-by: Damien Nguyen <ngn.damien@gmail.com>"
,ProjectQ-Framework,ProjectQ,.travis.yml,"Release version v0.8.0 (#446)

* Merge master into develop branch (#436)

* Preparing release vv0.7.2

* Fix missed bug in optimize.py

* Fix typo in _optimize.py

* Fix linters/formatters warnings

* Update missed hooks

* Hotfix: fix GitHub action workflows

* Release version v0.7.3 (#435)

* Merge master into develop branch (#431)

* Preparing release vv0.7.2

* Fix missed bug in optimize.py

* Fix typo in _optimize.py

* Fix linters/formatters warnings

* Update missed hooks

* Hotfix: fix GitHub action workflows

Co-authored-by: GitHub actions <noreply@github.com>
Co-authored-by: Nguyen Damien <ngn.damien@gmail.com>

* IonQ API: Move to v0.2, and fixup backends path (#433)

* Move to v0.2, and fixup backends path

The previous path was mistakenly incorrect, could we release this as a patch release of project-Q? Happy to help how I can.

* changelog

* fix

* One more fixup

* remove urljoin

* fmt

* Preparing release v0.7.3

Co-authored-by: github-actions[bot] <41898282+github-actions[bot]@users.noreply.github.com>
Co-authored-by: GitHub actions <noreply@github.com>
Co-authored-by: Nguyen Damien <ngn.damien@gmail.com>
Co-authored-by: Jon Donovan <donovan@ionq.co>

Co-authored-by: GitHub actions <noreply@github.com>
Co-authored-by: Nguyen Damien <ngn.damien@gmail.com>
Co-authored-by: github-actions[bot] <41898282+github-actions[bot]@users.noreply.github.com>
Co-authored-by: Jon Donovan <donovan@ionq.co>

* Bump docker/setup-qemu-action from 1 to 2 (#437)

* Bump docker/setup-qemu-action from 1 to 2

Bumps [docker/setup-qemu-action](https://github.com/docker/setup-qemu-action) from 1 to 2.
- [Release notes](https://github.com/docker/setup-qemu-action/releases)
- [Commits](https://github.com/docker/setup-qemu-action/compare/v1...v2)

---
updated-dependencies:
- dependency-name: docker/setup-qemu-action
  dependency-type: direct:production
  update-type: version-update:semver-major
...

Signed-off-by: dependabot[bot] <support@github.com>

* Update CHANGELOG

* Fix CentOS 7 build

Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Co-authored-by: Nguyen Damien <ngn.damien@gmail.com>

* Fix setuptools-scm version for Python 3.6 (#440)

* Add `blacken-docs` and `pyupgrade` to pre-commit configuration (#441)

* Add `blacken-docs` and `pyupgrade` to pre-commit configuration

* Apply new pre-commit hooks and fix related issues.

* Update CHANGELOG

* Fix unit tests failures

* Fix pre-commit failure

* Generalise the use of f-strings

* Fix IonQ tests

* Run `pyupgrade` before `isort` and `black`

* Deprecate support for Python 3.6 (#442)

* Azure Quantum backend (#439)

* Add Azure Quantum backend template files

* Add implementation of Azure Quantum

* Add support for Honeywell and improve exception handling

* Fixes and reformatting

* Fixes and Improvements

* Fixes and Improvements

* Fixes and Improvements

* Fixes and Improvements

* Fix QASM transulation

* Fixes and Improvements

* Documentation related changes

* Fix typos

* Add docstrings to util methods

* Fix typos

* Add Unittests

* Add Unittests

* Add Unittests & rename honeywell to quantinuum

* Fixes for QSAM convector

* Add Unittests

* Add Unittests

* Add Unittests

* Add Unittests

* Fix Quantinuum Backend for Azure Quantum

* Add Unittests

* Add Unittests

* Add Unittests

* Add Unittests

* Fix Vdag gate for IonQ backend

* Minor updates

* Update Docs

* Add Azure Quantum example

* Update README.rst

* Update Docs

* Update Docs

* Update Unittests

* Azure Quantum: CI Fixes (#4)

* Azure Quantum: CI Fixes

* Fix optional dependency problem

* Update pre-commit reformatting

* Fix pylint issues

* Fix pylint issues

* Update CHANGELOG.md

* Update CHANGELOG.md

* Update CHANGELOG.md

* Resolve comments (#5)

* Resolve comments

* Remove rearrange_result method from _utils.py

* Update with pytest.approx for assert floating numbers

* Pytest skipif testcases for Azure Quantum (#6)

* Pytest skipif testcases for Azure Quantum

* Fix projectq.backends._azure._exceptions import

* Add common utils module (#7)

* Create common utils module

* Optimize _rearrange_result method

* Make sure pip, setuptools and wheel packages are up to date on CI

* Fix formatting issues from latest changes in develop branch

* Improve coveralls (#8)

* Improve coveralls

* Improve coveralls

* Rename util.py to utils.py

* Minor fixes

* Update testcases

* Update testcases

* Improve coveralls (#9)

* Improve coveralls

* Improve coveralls

* Precommit reformatting

* Improve coveralls (#10)

* Improve coveralls

* Precommit formatting

* Fix CI failures

* Avoid a few more #pragma: no cover

* Fix flake8 warning

* Remove one more # pragma: no cover

* Reformat file

Co-authored-by: Nguyen Damien <ngn.damien@gmail.com>

* Fix installation on Apple Silicon and older Python versions (#444)

* Preparing release v0.8.0

Co-authored-by: github-actions[bot] <41898282+github-actions[bot]@users.noreply.github.com>
Co-authored-by: GitHub actions <noreply@github.com>
Co-authored-by: Nguyen Damien <ngn.damien@gmail.com>
Co-authored-by: Jon Donovan <donovan@ionq.co>
Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Co-authored-by: Sai Seshu Chadaram <ssc1729@outlook.com>"
,ProjectQ-Framework,ProjectQ,examples/azure-quantum.ipynb,"Release version v0.8.0 (#446)

* Merge master into develop branch (#436)

* Preparing release vv0.7.2

* Fix missed bug in optimize.py

* Fix typo in _optimize.py

* Fix linters/formatters warnings

* Update missed hooks

* Hotfix: fix GitHub action workflows

* Release version v0.7.3 (#435)

* Merge master into develop branch (#431)

* Preparing release vv0.7.2

* Fix missed bug in optimize.py

* Fix typo in _optimize.py

* Fix linters/formatters warnings

* Update missed hooks

* Hotfix: fix GitHub action workflows

Co-authored-by: GitHub actions <noreply@github.com>
Co-authored-by: Nguyen Damien <ngn.damien@gmail.com>

* IonQ API: Move to v0.2, and fixup backends path (#433)

* Move to v0.2, and fixup backends path

The previous path was mistakenly incorrect, could we release this as a patch release of project-Q? Happy to help how I can.

* changelog

* fix

* One more fixup

* remove urljoin

* fmt

* Preparing release v0.7.3

Co-authored-by: github-actions[bot] <41898282+github-actions[bot]@users.noreply.github.com>
Co-authored-by: GitHub actions <noreply@github.com>
Co-authored-by: Nguyen Damien <ngn.damien@gmail.com>
Co-authored-by: Jon Donovan <donovan@ionq.co>

Co-authored-by: GitHub actions <noreply@github.com>
Co-authored-by: Nguyen Damien <ngn.damien@gmail.com>
Co-authored-by: github-actions[bot] <41898282+github-actions[bot]@users.noreply.github.com>
Co-authored-by: Jon Donovan <donovan@ionq.co>

* Bump docker/setup-qemu-action from 1 to 2 (#437)

* Bump docker/setup-qemu-action from 1 to 2

Bumps [docker/setup-qemu-action](https://github.com/docker/setup-qemu-action) from 1 to 2.
- [Release notes](https://github.com/docker/setup-qemu-action/releases)
- [Commits](https://github.com/docker/setup-qemu-action/compare/v1...v2)

---
updated-dependencies:
- dependency-name: docker/setup-qemu-action
  dependency-type: direct:production
  update-type: version-update:semver-major
...

Signed-off-by: dependabot[bot] <support@github.com>

* Update CHANGELOG

* Fix CentOS 7 build

Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Co-authored-by: Nguyen Damien <ngn.damien@gmail.com>

* Fix setuptools-scm version for Python 3.6 (#440)

* Add `blacken-docs` and `pyupgrade` to pre-commit configuration (#441)

* Add `blacken-docs` and `pyupgrade` to pre-commit configuration

* Apply new pre-commit hooks and fix related issues.

* Update CHANGELOG

* Fix unit tests failures

* Fix pre-commit failure

* Generalise the use of f-strings

* Fix IonQ tests

* Run `pyupgrade` before `isort` and `black`

* Deprecate support for Python 3.6 (#442)

* Azure Quantum backend (#439)

* Add Azure Quantum backend template files

* Add implementation of Azure Quantum

* Add support for Honeywell and improve exception handling

* Fixes and reformatting

* Fixes and Improvements

* Fixes and Improvements

* Fixes and Improvements

* Fixes and Improvements

* Fix QASM transulation

* Fixes and Improvements

* Documentation related changes

* Fix typos

* Add docstrings to util methods

* Fix typos

* Add Unittests

* Add Unittests

* Add Unittests & rename honeywell to quantinuum

* Fixes for QSAM convector

* Add Unittests

* Add Unittests

* Add Unittests

* Add Unittests

* Fix Quantinuum Backend for Azure Quantum

* Add Unittests

* Add Unittests

* Add Unittests

* Add Unittests

* Fix Vdag gate for IonQ backend

* Minor updates

* Update Docs

* Add Azure Quantum example

* Update README.rst

* Update Docs

* Update Docs

* Update Unittests

* Azure Quantum: CI Fixes (#4)

* Azure Quantum: CI Fixes

* Fix optional dependency problem

* Update pre-commit reformatting

* Fix pylint issues

* Fix pylint issues

* Update CHANGELOG.md

* Update CHANGELOG.md

* Update CHANGELOG.md

* Resolve comments (#5)

* Resolve comments

* Remove rearrange_result method from _utils.py

* Update with pytest.approx for assert floating numbers

* Pytest skipif testcases for Azure Quantum (#6)

* Pytest skipif testcases for Azure Quantum

* Fix projectq.backends._azure._exceptions import

* Add common utils module (#7)

* Create common utils module

* Optimize _rearrange_result method

* Make sure pip, setuptools and wheel packages are up to date on CI

* Fix formatting issues from latest changes in develop branch

* Improve coveralls (#8)

* Improve coveralls

* Improve coveralls

* Rename util.py to utils.py

* Minor fixes

* Update testcases

* Update testcases

* Improve coveralls (#9)

* Improve coveralls

* Improve coveralls

* Precommit reformatting

* Improve coveralls (#10)

* Improve coveralls

* Precommit formatting

* Fix CI failures

* Avoid a few more #pragma: no cover

* Fix flake8 warning

* Remove one more # pragma: no cover

* Reformat file

Co-authored-by: Nguyen Damien <ngn.damien@gmail.com>

* Fix installation on Apple Silicon and older Python versions (#444)

* Preparing release v0.8.0

Co-authored-by: github-actions[bot] <41898282+github-actions[bot]@users.noreply.github.com>
Co-authored-by: GitHub actions <noreply@github.com>
Co-authored-by: Nguyen Damien <ngn.damien@gmail.com>
Co-authored-by: Jon Donovan <donovan@ionq.co>
Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Co-authored-by: Sai Seshu Chadaram <ssc1729@outlook.com>"
,ProjectQ-Framework,ProjectQ,projectq/backends/__init__.py,"Release version v0.8.0 (#446)

* Merge master into develop branch (#436)

* Preparing release vv0.7.2

* Fix missed bug in optimize.py

* Fix typo in _optimize.py

* Fix linters/formatters warnings

* Update missed hooks

* Hotfix: fix GitHub action workflows

* Release version v0.7.3 (#435)

* Merge master into develop branch (#431)

* Preparing release vv0.7.2

* Fix missed bug in optimize.py

* Fix typo in _optimize.py

* Fix linters/formatters warnings

* Update missed hooks

* Hotfix: fix GitHub action workflows

Co-authored-by: GitHub actions <noreply@github.com>
Co-authored-by: Nguyen Damien <ngn.damien@gmail.com>

* IonQ API: Move to v0.2, and fixup backends path (#433)

* Move to v0.2, and fixup backends path

The previous path was mistakenly incorrect, could we release this as a patch release of project-Q? Happy to help how I can.

* changelog

* fix

* One more fixup

* remove urljoin

* fmt

* Preparing release v0.7.3

Co-authored-by: github-actions[bot] <41898282+github-actions[bot]@users.noreply.github.com>
Co-authored-by: GitHub actions <noreply@github.com>
Co-authored-by: Nguyen Damien <ngn.damien@gmail.com>
Co-authored-by: Jon Donovan <donovan@ionq.co>

Co-authored-by: GitHub actions <noreply@github.com>
Co-authored-by: Nguyen Damien <ngn.damien@gmail.com>
Co-authored-by: github-actions[bot] <41898282+github-actions[bot]@users.noreply.github.com>
Co-authored-by: Jon Donovan <donovan@ionq.co>

* Bump docker/setup-qemu-action from 1 to 2 (#437)

* Bump docker/setup-qemu-action from 1 to 2

Bumps [docker/setup-qemu-action](https://github.com/docker/setup-qemu-action) from 1 to 2.
- [Release notes](https://github.com/docker/setup-qemu-action/releases)
- [Commits](https://github.com/docker/setup-qemu-action/compare/v1...v2)

---
updated-dependencies:
- dependency-name: docker/setup-qemu-action
  dependency-type: direct:production
  update-type: version-update:semver-major
...

Signed-off-by: dependabot[bot] <support@github.com>

* Update CHANGELOG

* Fix CentOS 7 build

Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Co-authored-by: Nguyen Damien <ngn.damien@gmail.com>

* Fix setuptools-scm version for Python 3.6 (#440)

* Add `blacken-docs` and `pyupgrade` to pre-commit configuration (#441)

* Add `blacken-docs` and `pyupgrade` to pre-commit configuration

* Apply new pre-commit hooks and fix related issues.

* Update CHANGELOG

* Fix unit tests failures

* Fix pre-commit failure

* Generalise the use of f-strings

* Fix IonQ tests

* Run `pyupgrade` before `isort` and `black`

* Deprecate support for Python 3.6 (#442)

* Azure Quantum backend (#439)

* Add Azure Quantum backend template files

* Add implementation of Azure Quantum

* Add support for Honeywell and improve exception handling

* Fixes and reformatting

* Fixes and Improvements

* Fixes and Improvements

* Fixes and Improvements

* Fixes and Improvements

* Fix QASM transulation

* Fixes and Improvements

* Documentation related changes

* Fix typos

* Add docstrings to util methods

* Fix typos

* Add Unittests

* Add Unittests

* Add Unittests & rename honeywell to quantinuum

* Fixes for QSAM convector

* Add Unittests

* Add Unittests

* Add Unittests

* Add Unittests

* Fix Quantinuum Backend for Azure Quantum

* Add Unittests

* Add Unittests

* Add Unittests

* Add Unittests

* Fix Vdag gate for IonQ backend

* Minor updates

* Update Docs

* Add Azure Quantum example

* Update README.rst

* Update Docs

* Update Docs

* Update Unittests

* Azure Quantum: CI Fixes (#4)

* Azure Quantum: CI Fixes

* Fix optional dependency problem

* Update pre-commit reformatting

* Fix pylint issues

* Fix pylint issues

* Update CHANGELOG.md

* Update CHANGELOG.md

* Update CHANGELOG.md

* Resolve comments (#5)

* Resolve comments

* Remove rearrange_result method from _utils.py

* Update with pytest.approx for assert floating numbers

* Pytest skipif testcases for Azure Quantum (#6)

* Pytest skipif testcases for Azure Quantum

* Fix projectq.backends._azure._exceptions import

* Add common utils module (#7)

* Create common utils module

* Optimize _rearrange_result method

* Make sure pip, setuptools and wheel packages are up to date on CI

* Fix formatting issues from latest changes in develop branch

* Improve coveralls (#8)

* Improve coveralls

* Improve coveralls

* Rename util.py to utils.py

* Minor fixes

* Update testcases

* Update testcases

* Improve coveralls (#9)

* Improve coveralls

* Improve coveralls

* Precommit reformatting

* Improve coveralls (#10)

* Improve coveralls

* Precommit formatting

* Fix CI failures

* Avoid a few more #pragma: no cover

* Fix flake8 warning

* Remove one more # pragma: no cover

* Reformat file

Co-authored-by: Nguyen Damien <ngn.damien@gmail.com>

* Fix installation on Apple Silicon and older Python versions (#444)

* Preparing release v0.8.0

Co-authored-by: github-actions[bot] <41898282+github-actions[bot]@users.noreply.github.com>
Co-authored-by: GitHub actions <noreply@github.com>
Co-authored-by: Nguyen Damien <ngn.damien@gmail.com>
Co-authored-by: Jon Donovan <donovan@ionq.co>
Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Co-authored-by: Sai Seshu Chadaram <ssc1729@outlook.com>"
,ProjectQ-Framework,ProjectQ,projectq/backends/_azure/_azure_quantum.py,"Release version v0.8.0 (#446)

* Merge master into develop branch (#436)

* Preparing release vv0.7.2

* Fix missed bug in optimize.py

* Fix typo in _optimize.py

* Fix linters/formatters warnings

* Update missed hooks

* Hotfix: fix GitHub action workflows

* Release version v0.7.3 (#435)

* Merge master into develop branch (#431)

* Preparing release vv0.7.2

* Fix missed bug in optimize.py

* Fix typo in _optimize.py

* Fix linters/formatters warnings

* Update missed hooks

* Hotfix: fix GitHub action workflows

Co-authored-by: GitHub actions <noreply@github.com>
Co-authored-by: Nguyen Damien <ngn.damien@gmail.com>

* IonQ API: Move to v0.2, and fixup backends path (#433)

* Move to v0.2, and fixup backends path

The previous path was mistakenly incorrect, could we release this as a patch release of project-Q? Happy to help how I can.

* changelog

* fix

* One more fixup

* remove urljoin

* fmt

* Preparing release v0.7.3

Co-authored-by: github-actions[bot] <41898282+github-actions[bot]@users.noreply.github.com>
Co-authored-by: GitHub actions <noreply@github.com>
Co-authored-by: Nguyen Damien <ngn.damien@gmail.com>
Co-authored-by: Jon Donovan <donovan@ionq.co>

Co-authored-by: GitHub actions <noreply@github.com>
Co-authored-by: Nguyen Damien <ngn.damien@gmail.com>
Co-authored-by: github-actions[bot] <41898282+github-actions[bot]@users.noreply.github.com>
Co-authored-by: Jon Donovan <donovan@ionq.co>

* Bump docker/setup-qemu-action from 1 to 2 (#437)

* Bump docker/setup-qemu-action from 1 to 2

Bumps [docker/setup-qemu-action](https://github.com/docker/setup-qemu-action) from 1 to 2.
- [Release notes](https://github.com/docker/setup-qemu-action/releases)
- [Commits](https://github.com/docker/setup-qemu-action/compare/v1...v2)

---
updated-dependencies:
- dependency-name: docker/setup-qemu-action
  dependency-type: direct:production
  update-type: version-update:semver-major
...

Signed-off-by: dependabot[bot] <support@github.com>

* Update CHANGELOG

* Fix CentOS 7 build

Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Co-authored-by: Nguyen Damien <ngn.damien@gmail.com>

* Fix setuptools-scm version for Python 3.6 (#440)

* Add `blacken-docs` and `pyupgrade` to pre-commit configuration (#441)

* Add `blacken-docs` and `pyupgrade` to pre-commit configuration

* Apply new pre-commit hooks and fix related issues.

* Update CHANGELOG

* Fix unit tests failures

* Fix pre-commit failure

* Generalise the use of f-strings

* Fix IonQ tests

* Run `pyupgrade` before `isort` and `black`

* Deprecate support for Python 3.6 (#442)

* Azure Quantum backend (#439)

* Add Azure Quantum backend template files

* Add implementation of Azure Quantum

* Add support for Honeywell and improve exception handling

* Fixes and reformatting

* Fixes and Improvements

* Fixes and Improvements

* Fixes and Improvements

* Fixes and Improvements

* Fix QASM transulation

* Fixes and Improvements

* Documentation related changes

* Fix typos

* Add docstrings to util methods

* Fix typos

* Add Unittests

* Add Unittests

* Add Unittests & rename honeywell to quantinuum

* Fixes for QSAM convector

* Add Unittests

* Add Unittests

* Add Unittests

* Add Unittests

* Fix Quantinuum Backend for Azure Quantum

* Add Unittests

* Add Unittests

* Add Unittests

* Add Unittests

* Fix Vdag gate for IonQ backend

* Minor updates

* Update Docs

* Add Azure Quantum example

* Update README.rst

* Update Docs

* Update Docs

* Update Unittests

* Azure Quantum: CI Fixes (#4)

* Azure Quantum: CI Fixes

* Fix optional dependency problem

* Update pre-commit reformatting

* Fix pylint issues

* Fix pylint issues

* Update CHANGELOG.md

* Update CHANGELOG.md

* Update CHANGELOG.md

* Resolve comments (#5)

* Resolve comments

* Remove rearrange_result method from _utils.py

* Update with pytest.approx for assert floating numbers

* Pytest skipif testcases for Azure Quantum (#6)

* Pytest skipif testcases for Azure Quantum

* Fix projectq.backends._azure._exceptions import

* Add common utils module (#7)

* Create common utils module

* Optimize _rearrange_result method

* Make sure pip, setuptools and wheel packages are up to date on CI

* Fix formatting issues from latest changes in develop branch

* Improve coveralls (#8)

* Improve coveralls

* Improve coveralls

* Rename util.py to utils.py

* Minor fixes

* Update testcases

* Update testcases

* Improve coveralls (#9)

* Improve coveralls

* Improve coveralls

* Precommit reformatting

* Improve coveralls (#10)

* Improve coveralls

* Precommit formatting

* Fix CI failures

* Avoid a few more #pragma: no cover

* Fix flake8 warning

* Remove one more # pragma: no cover

* Reformat file

Co-authored-by: Nguyen Damien <ngn.damien@gmail.com>

* Fix installation on Apple Silicon and older Python versions (#444)

* Preparing release v0.8.0

Co-authored-by: github-actions[bot] <41898282+github-actions[bot]@users.noreply.github.com>
Co-authored-by: GitHub actions <noreply@github.com>
Co-authored-by: Nguyen Damien <ngn.damien@gmail.com>
Co-authored-by: Jon Donovan <donovan@ionq.co>
Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Co-authored-by: Sai Seshu Chadaram <ssc1729@outlook.com>"
,ProjectQ-Framework,ProjectQ,projectq/backends/_azure/_azure_quantum_test.py,"Release version v0.8.0 (#446)

* Merge master into develop branch (#436)

* Preparing release vv0.7.2

* Fix missed bug in optimize.py

* Fix typo in _optimize.py

* Fix linters/formatters warnings

* Update missed hooks

* Hotfix: fix GitHub action workflows

* Release version v0.7.3 (#435)

* Merge master into develop branch (#431)

* Preparing release vv0.7.2

* Fix missed bug in optimize.py

* Fix typo in _optimize.py

* Fix linters/formatters warnings

* Update missed hooks

* Hotfix: fix GitHub action workflows

Co-authored-by: GitHub actions <noreply@github.com>
Co-authored-by: Nguyen Damien <ngn.damien@gmail.com>

* IonQ API: Move to v0.2, and fixup backends path (#433)

* Move to v0.2, and fixup backends path

The previous path was mistakenly incorrect, could we release this as a patch release of project-Q? Happy to help how I can.

* changelog

* fix

* One more fixup

* remove urljoin

* fmt

* Preparing release v0.7.3

Co-authored-by: github-actions[bot] <41898282+github-actions[bot]@users.noreply.github.com>
Co-authored-by: GitHub actions <noreply@github.com>
Co-authored-by: Nguyen Damien <ngn.damien@gmail.com>
Co-authored-by: Jon Donovan <donovan@ionq.co>

Co-authored-by: GitHub actions <noreply@github.com>
Co-authored-by: Nguyen Damien <ngn.damien@gmail.com>
Co-authored-by: github-actions[bot] <41898282+github-actions[bot]@users.noreply.github.com>
Co-authored-by: Jon Donovan <donovan@ionq.co>

* Bump docker/setup-qemu-action from 1 to 2 (#437)

* Bump docker/setup-qemu-action from 1 to 2

Bumps [docker/setup-qemu-action](https://github.com/docker/setup-qemu-action) from 1 to 2.
- [Release notes](https://github.com/docker/setup-qemu-action/releases)
- [Commits](https://github.com/docker/setup-qemu-action/compare/v1...v2)

---
updated-dependencies:
- dependency-name: docker/setup-qemu-action
  dependency-type: direct:production
  update-type: version-update:semver-major
...

Signed-off-by: dependabot[bot] <support@github.com>

* Update CHANGELOG

* Fix CentOS 7 build

Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Co-authored-by: Nguyen Damien <ngn.damien@gmail.com>

* Fix setuptools-scm version for Python 3.6 (#440)

* Add `blacken-docs` and `pyupgrade` to pre-commit configuration (#441)

* Add `blacken-docs` and `pyupgrade` to pre-commit configuration

* Apply new pre-commit hooks and fix related issues.

* Update CHANGELOG

* Fix unit tests failures

* Fix pre-commit failure

* Generalise the use of f-strings

* Fix IonQ tests

* Run `pyupgrade` before `isort` and `black`

* Deprecate support for Python 3.6 (#442)

* Azure Quantum backend (#439)

* Add Azure Quantum backend template files

* Add implementation of Azure Quantum

* Add support for Honeywell and improve exception handling

* Fixes and reformatting

* Fixes and Improvements

* Fixes and Improvements

* Fixes and Improvements

* Fixes and Improvements

* Fix QASM transulation

* Fixes and Improvements

* Documentation related changes

* Fix typos

* Add docstrings to util methods

* Fix typos

* Add Unittests

* Add Unittests

* Add Unittests & rename honeywell to quantinuum

* Fixes for QSAM convector

* Add Unittests

* Add Unittests

* Add Unittests

* Add Unittests

* Fix Quantinuum Backend for Azure Quantum

* Add Unittests

* Add Unittests

* Add Unittests

* Add Unittests

* Fix Vdag gate for IonQ backend

* Minor updates

* Update Docs

* Add Azure Quantum example

* Update README.rst

* Update Docs

* Update Docs

* Update Unittests

* Azure Quantum: CI Fixes (#4)

* Azure Quantum: CI Fixes

* Fix optional dependency problem

* Update pre-commit reformatting

* Fix pylint issues

* Fix pylint issues

* Update CHANGELOG.md

* Update CHANGELOG.md

* Update CHANGELOG.md

* Resolve comments (#5)

* Resolve comments

* Remove rearrange_result method from _utils.py

* Update with pytest.approx for assert floating numbers

* Pytest skipif testcases for Azure Quantum (#6)

* Pytest skipif testcases for Azure Quantum

* Fix projectq.backends._azure._exceptions import

* Add common utils module (#7)

* Create common utils module

* Optimize _rearrange_result method

* Make sure pip, setuptools and wheel packages are up to date on CI

* Fix formatting issues from latest changes in develop branch

* Improve coveralls (#8)

* Improve coveralls

* Improve coveralls

* Rename util.py to utils.py

* Minor fixes

* Update testcases

* Update testcases

* Improve coveralls (#9)

* Improve coveralls

* Improve coveralls

* Precommit reformatting

* Improve coveralls (#10)

* Improve coveralls

* Precommit formatting

* Fix CI failures

* Avoid a few more #pragma: no cover

* Fix flake8 warning

* Remove one more # pragma: no cover

* Reformat file

Co-authored-by: Nguyen Damien <ngn.damien@gmail.com>

* Fix installation on Apple Silicon and older Python versions (#444)

* Preparing release v0.8.0

Co-authored-by: github-actions[bot] <41898282+github-actions[bot]@users.noreply.github.com>
Co-authored-by: GitHub actions <noreply@github.com>
Co-authored-by: Nguyen Damien <ngn.damien@gmail.com>
Co-authored-by: Jon Donovan <donovan@ionq.co>
Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Co-authored-by: Sai Seshu Chadaram <ssc1729@outlook.com>"
,ProjectQ-Framework,ProjectQ,projectq/backends/_azure/_utils.py,"Release version v0.8.0 (#446)

* Merge master into develop branch (#436)

* Preparing release vv0.7.2

* Fix missed bug in optimize.py

* Fix typo in _optimize.py

* Fix linters/formatters warnings

* Update missed hooks

* Hotfix: fix GitHub action workflows

* Release version v0.7.3 (#435)

* Merge master into develop branch (#431)

* Preparing release vv0.7.2

* Fix missed bug in optimize.py

* Fix typo in _optimize.py

* Fix linters/formatters warnings

* Update missed hooks

* Hotfix: fix GitHub action workflows

Co-authored-by: GitHub actions <noreply@github.com>
Co-authored-by: Nguyen Damien <ngn.damien@gmail.com>

* IonQ API: Move to v0.2, and fixup backends path (#433)

* Move to v0.2, and fixup backends path

The previous path was mistakenly incorrect, could we release this as a patch release of project-Q? Happy to help how I can.

* changelog

* fix

* One more fixup

* remove urljoin

* fmt

* Preparing release v0.7.3

Co-authored-by: github-actions[bot] <41898282+github-actions[bot]@users.noreply.github.com>
Co-authored-by: GitHub actions <noreply@github.com>
Co-authored-by: Nguyen Damien <ngn.damien@gmail.com>
Co-authored-by: Jon Donovan <donovan@ionq.co>

Co-authored-by: GitHub actions <noreply@github.com>
Co-authored-by: Nguyen Damien <ngn.damien@gmail.com>
Co-authored-by: github-actions[bot] <41898282+github-actions[bot]@users.noreply.github.com>
Co-authored-by: Jon Donovan <donovan@ionq.co>

* Bump docker/setup-qemu-action from 1 to 2 (#437)

* Bump docker/setup-qemu-action from 1 to 2

Bumps [docker/setup-qemu-action](https://github.com/docker/setup-qemu-action) from 1 to 2.
- [Release notes](https://github.com/docker/setup-qemu-action/releases)
- [Commits](https://github.com/docker/setup-qemu-action/compare/v1...v2)

---
updated-dependencies:
- dependency-name: docker/setup-qemu-action
  dependency-type: direct:production
  update-type: version-update:semver-major
...

Signed-off-by: dependabot[bot] <support@github.com>

* Update CHANGELOG

* Fix CentOS 7 build

Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Co-authored-by: Nguyen Damien <ngn.damien@gmail.com>

* Fix setuptools-scm version for Python 3.6 (#440)

* Add `blacken-docs` and `pyupgrade` to pre-commit configuration (#441)

* Add `blacken-docs` and `pyupgrade` to pre-commit configuration

* Apply new pre-commit hooks and fix related issues.

* Update CHANGELOG

* Fix unit tests failures

* Fix pre-commit failure

* Generalise the use of f-strings

* Fix IonQ tests

* Run `pyupgrade` before `isort` and `black`

* Deprecate support for Python 3.6 (#442)

* Azure Quantum backend (#439)

* Add Azure Quantum backend template files

* Add implementation of Azure Quantum

* Add support for Honeywell and improve exception handling

* Fixes and reformatting

* Fixes and Improvements

* Fixes and Improvements

* Fixes and Improvements

* Fixes and Improvements

* Fix QASM transulation

* Fixes and Improvements

* Documentation related changes

* Fix typos

* Add docstrings to util methods

* Fix typos

* Add Unittests

* Add Unittests

* Add Unittests & rename honeywell to quantinuum

* Fixes for QSAM convector

* Add Unittests

* Add Unittests

* Add Unittests

* Add Unittests

* Fix Quantinuum Backend for Azure Quantum

* Add Unittests

* Add Unittests

* Add Unittests

* Add Unittests

* Fix Vdag gate for IonQ backend

* Minor updates

* Update Docs

* Add Azure Quantum example

* Update README.rst

* Update Docs

* Update Docs

* Update Unittests

* Azure Quantum: CI Fixes (#4)

* Azure Quantum: CI Fixes

* Fix optional dependency problem

* Update pre-commit reformatting

* Fix pylint issues

* Fix pylint issues

* Update CHANGELOG.md

* Update CHANGELOG.md

* Update CHANGELOG.md

* Resolve comments (#5)

* Resolve comments

* Remove rearrange_result method from _utils.py

* Update with pytest.approx for assert floating numbers

* Pytest skipif testcases for Azure Quantum (#6)

* Pytest skipif testcases for Azure Quantum

* Fix projectq.backends._azure._exceptions import

* Add common utils module (#7)

* Create common utils module

* Optimize _rearrange_result method

* Make sure pip, setuptools and wheel packages are up to date on CI

* Fix formatting issues from latest changes in develop branch

* Improve coveralls (#8)

* Improve coveralls

* Improve coveralls

* Rename util.py to utils.py

* Minor fixes

* Update testcases

* Update testcases

* Improve coveralls (#9)

* Improve coveralls

* Improve coveralls

* Precommit reformatting

* Improve coveralls (#10)

* Improve coveralls

* Precommit formatting

* Fix CI failures

* Avoid a few more #pragma: no cover

* Fix flake8 warning

* Remove one more # pragma: no cover

* Reformat file

Co-authored-by: Nguyen Damien <ngn.damien@gmail.com>

* Fix installation on Apple Silicon and older Python versions (#444)

* Preparing release v0.8.0

Co-authored-by: github-actions[bot] <41898282+github-actions[bot]@users.noreply.github.com>
Co-authored-by: GitHub actions <noreply@github.com>
Co-authored-by: Nguyen Damien <ngn.damien@gmail.com>
Co-authored-by: Jon Donovan <donovan@ionq.co>
Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Co-authored-by: Sai Seshu Chadaram <ssc1729@outlook.com>"
,ProjectQ-Framework,ProjectQ,projectq/backends/_azure/_utils_test.py,"Release version v0.8.0 (#446)

* Merge master into develop branch (#436)

* Preparing release vv0.7.2

* Fix missed bug in optimize.py

* Fix typo in _optimize.py

* Fix linters/formatters warnings

* Update missed hooks

* Hotfix: fix GitHub action workflows

* Release version v0.7.3 (#435)

* Merge master into develop branch (#431)

* Preparing release vv0.7.2

* Fix missed bug in optimize.py

* Fix typo in _optimize.py

* Fix linters/formatters warnings

* Update missed hooks

* Hotfix: fix GitHub action workflows

Co-authored-by: GitHub actions <noreply@github.com>
Co-authored-by: Nguyen Damien <ngn.damien@gmail.com>

* IonQ API: Move to v0.2, and fixup backends path (#433)

* Move to v0.2, and fixup backends path

The previous path was mistakenly incorrect, could we release this as a patch release of project-Q? Happy to help how I can.

* changelog

* fix

* One more fixup

* remove urljoin

* fmt

* Preparing release v0.7.3

Co-authored-by: github-actions[bot] <41898282+github-actions[bot]@users.noreply.github.com>
Co-authored-by: GitHub actions <noreply@github.com>
Co-authored-by: Nguyen Damien <ngn.damien@gmail.com>
Co-authored-by: Jon Donovan <donovan@ionq.co>

Co-authored-by: GitHub actions <noreply@github.com>
Co-authored-by: Nguyen Damien <ngn.damien@gmail.com>
Co-authored-by: github-actions[bot] <41898282+github-actions[bot]@users.noreply.github.com>
Co-authored-by: Jon Donovan <donovan@ionq.co>

* Bump docker/setup-qemu-action from 1 to 2 (#437)

* Bump docker/setup-qemu-action from 1 to 2

Bumps [docker/setup-qemu-action](https://github.com/docker/setup-qemu-action) from 1 to 2.
- [Release notes](https://github.com/docker/setup-qemu-action/releases)
- [Commits](https://github.com/docker/setup-qemu-action/compare/v1...v2)

---
updated-dependencies:
- dependency-name: docker/setup-qemu-action
  dependency-type: direct:production
  update-type: version-update:semver-major
...

Signed-off-by: dependabot[bot] <support@github.com>

* Update CHANGELOG

* Fix CentOS 7 build

Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Co-authored-by: Nguyen Damien <ngn.damien@gmail.com>

* Fix setuptools-scm version for Python 3.6 (#440)

* Add `blacken-docs` and `pyupgrade` to pre-commit configuration (#441)

* Add `blacken-docs` and `pyupgrade` to pre-commit configuration

* Apply new pre-commit hooks and fix related issues.

* Update CHANGELOG

* Fix unit tests failures

* Fix pre-commit failure

* Generalise the use of f-strings

* Fix IonQ tests

* Run `pyupgrade` before `isort` and `black`

* Deprecate support for Python 3.6 (#442)

* Azure Quantum backend (#439)

* Add Azure Quantum backend template files

* Add implementation of Azure Quantum

* Add support for Honeywell and improve exception handling

* Fixes and reformatting

* Fixes and Improvements

* Fixes and Improvements

* Fixes and Improvements

* Fixes and Improvements

* Fix QASM transulation

* Fixes and Improvements

* Documentation related changes

* Fix typos

* Add docstrings to util methods

* Fix typos

* Add Unittests

* Add Unittests

* Add Unittests & rename honeywell to quantinuum

* Fixes for QSAM convector

* Add Unittests

* Add Unittests

* Add Unittests

* Add Unittests

* Fix Quantinuum Backend for Azure Quantum

* Add Unittests

* Add Unittests

* Add Unittests

* Add Unittests

* Fix Vdag gate for IonQ backend

* Minor updates

* Update Docs

* Add Azure Quantum example

* Update README.rst

* Update Docs

* Update Docs

* Update Unittests

* Azure Quantum: CI Fixes (#4)

* Azure Quantum: CI Fixes

* Fix optional dependency problem

* Update pre-commit reformatting

* Fix pylint issues

* Fix pylint issues

* Update CHANGELOG.md

* Update CHANGELOG.md

* Update CHANGELOG.md

* Resolve comments (#5)

* Resolve comments

* Remove rearrange_result method from _utils.py

* Update with pytest.approx for assert floating numbers

* Pytest skipif testcases for Azure Quantum (#6)

* Pytest skipif testcases for Azure Quantum

* Fix projectq.backends._azure._exceptions import

* Add common utils module (#7)

* Create common utils module

* Optimize _rearrange_result method

* Make sure pip, setuptools and wheel packages are up to date on CI

* Fix formatting issues from latest changes in develop branch

* Improve coveralls (#8)

* Improve coveralls

* Improve coveralls

* Rename util.py to utils.py

* Minor fixes

* Update testcases

* Update testcases

* Improve coveralls (#9)

* Improve coveralls

* Improve coveralls

* Precommit reformatting

* Improve coveralls (#10)

* Improve coveralls

* Precommit formatting

* Fix CI failures

* Avoid a few more #pragma: no cover

* Fix flake8 warning

* Remove one more # pragma: no cover

* Reformat file

Co-authored-by: Nguyen Damien <ngn.damien@gmail.com>

* Fix installation on Apple Silicon and older Python versions (#444)

* Preparing release v0.8.0

Co-authored-by: github-actions[bot] <41898282+github-actions[bot]@users.noreply.github.com>
Co-authored-by: GitHub actions <noreply@github.com>
Co-authored-by: Nguyen Damien <ngn.damien@gmail.com>
Co-authored-by: Jon Donovan <donovan@ionq.co>
Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Co-authored-by: Sai Seshu Chadaram <ssc1729@outlook.com>"
,ProjectQ-Framework,ProjectQ,projectq/cengines/_swapandcnotflipper.py,"Release version v0.8.0 (#446)

* Merge master into develop branch (#436)

* Preparing release vv0.7.2

* Fix missed bug in optimize.py

* Fix typo in _optimize.py

* Fix linters/formatters warnings

* Update missed hooks

* Hotfix: fix GitHub action workflows

* Release version v0.7.3 (#435)

* Merge master into develop branch (#431)

* Preparing release vv0.7.2

* Fix missed bug in optimize.py

* Fix typo in _optimize.py

* Fix linters/formatters warnings

* Update missed hooks

* Hotfix: fix GitHub action workflows

Co-authored-by: GitHub actions <noreply@github.com>
Co-authored-by: Nguyen Damien <ngn.damien@gmail.com>

* IonQ API: Move to v0.2, and fixup backends path (#433)

* Move to v0.2, and fixup backends path

The previous path was mistakenly incorrect, could we release this as a patch release of project-Q? Happy to help how I can.

* changelog

* fix

* One more fixup

* remove urljoin

* fmt

* Preparing release v0.7.3

Co-authored-by: github-actions[bot] <41898282+github-actions[bot]@users.noreply.github.com>
Co-authored-by: GitHub actions <noreply@github.com>
Co-authored-by: Nguyen Damien <ngn.damien@gmail.com>
Co-authored-by: Jon Donovan <donovan@ionq.co>

Co-authored-by: GitHub actions <noreply@github.com>
Co-authored-by: Nguyen Damien <ngn.damien@gmail.com>
Co-authored-by: github-actions[bot] <41898282+github-actions[bot]@users.noreply.github.com>
Co-authored-by: Jon Donovan <donovan@ionq.co>

* Bump docker/setup-qemu-action from 1 to 2 (#437)

* Bump docker/setup-qemu-action from 1 to 2

Bumps [docker/setup-qemu-action](https://github.com/docker/setup-qemu-action) from 1 to 2.
- [Release notes](https://github.com/docker/setup-qemu-action/releases)
- [Commits](https://github.com/docker/setup-qemu-action/compare/v1...v2)

---
updated-dependencies:
- dependency-name: docker/setup-qemu-action
  dependency-type: direct:production
  update-type: version-update:semver-major
...

Signed-off-by: dependabot[bot] <support@github.com>

* Update CHANGELOG

* Fix CentOS 7 build

Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Co-authored-by: Nguyen Damien <ngn.damien@gmail.com>

* Fix setuptools-scm version for Python 3.6 (#440)

* Add `blacken-docs` and `pyupgrade` to pre-commit configuration (#441)

* Add `blacken-docs` and `pyupgrade` to pre-commit configuration

* Apply new pre-commit hooks and fix related issues.

* Update CHANGELOG

* Fix unit tests failures

* Fix pre-commit failure

* Generalise the use of f-strings

* Fix IonQ tests

* Run `pyupgrade` before `isort` and `black`

* Deprecate support for Python 3.6 (#442)

* Azure Quantum backend (#439)

* Add Azure Quantum backend template files

* Add implementation of Azure Quantum

* Add support for Honeywell and improve exception handling

* Fixes and reformatting

* Fixes and Improvements

* Fixes and Improvements

* Fixes and Improvements

* Fixes and Improvements

* Fix QASM transulation

* Fixes and Improvements

* Documentation related changes

* Fix typos

* Add docstrings to util methods

* Fix typos

* Add Unittests

* Add Unittests

* Add Unittests & rename honeywell to quantinuum

* Fixes for QSAM convector

* Add Unittests

* Add Unittests

* Add Unittests

* Add Unittests

* Fix Quantinuum Backend for Azure Quantum

* Add Unittests

* Add Unittests

* Add Unittests

* Add Unittests

* Fix Vdag gate for IonQ backend

* Minor updates

* Update Docs

* Add Azure Quantum example

* Update README.rst

* Update Docs

* Update Docs

* Update Unittests

* Azure Quantum: CI Fixes (#4)

* Azure Quantum: CI Fixes

* Fix optional dependency problem

* Update pre-commit reformatting

* Fix pylint issues

* Fix pylint issues

* Update CHANGELOG.md

* Update CHANGELOG.md

* Update CHANGELOG.md

* Resolve comments (#5)

* Resolve comments

* Remove rearrange_result method from _utils.py

* Update with pytest.approx for assert floating numbers

* Pytest skipif testcases for Azure Quantum (#6)

* Pytest skipif testcases for Azure Quantum

* Fix projectq.backends._azure._exceptions import

* Add common utils module (#7)

* Create common utils module

* Optimize _rearrange_result method

* Make sure pip, setuptools and wheel packages are up to date on CI

* Fix formatting issues from latest changes in develop branch

* Improve coveralls (#8)

* Improve coveralls

* Improve coveralls

* Rename util.py to utils.py

* Minor fixes

* Update testcases

* Update testcases

* Improve coveralls (#9)

* Improve coveralls

* Improve coveralls

* Precommit reformatting

* Improve coveralls (#10)

* Improve coveralls

* Precommit formatting

* Fix CI failures

* Avoid a few more #pragma: no cover

* Fix flake8 warning

* Remove one more # pragma: no cover

* Reformat file

Co-authored-by: Nguyen Damien <ngn.damien@gmail.com>

* Fix installation on Apple Silicon and older Python versions (#444)

* Preparing release v0.8.0

Co-authored-by: github-actions[bot] <41898282+github-actions[bot]@users.noreply.github.com>
Co-authored-by: GitHub actions <noreply@github.com>
Co-authored-by: Nguyen Damien <ngn.damien@gmail.com>
Co-authored-by: Jon Donovan <donovan@ionq.co>
Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Co-authored-by: Sai Seshu Chadaram <ssc1729@outlook.com>"
,ProjectQ-Framework,ProjectQ,projectq/meta/_dagger.py,"Release version v0.8.0 (#446)

* Merge master into develop branch (#436)

* Preparing release vv0.7.2

* Fix missed bug in optimize.py

* Fix typo in _optimize.py

* Fix linters/formatters warnings

* Update missed hooks

* Hotfix: fix GitHub action workflows

* Release version v0.7.3 (#435)

* Merge master into develop branch (#431)

* Preparing release vv0.7.2

* Fix missed bug in optimize.py

* Fix typo in _optimize.py

* Fix linters/formatters warnings

* Update missed hooks

* Hotfix: fix GitHub action workflows

Co-authored-by: GitHub actions <noreply@github.com>
Co-authored-by: Nguyen Damien <ngn.damien@gmail.com>

* IonQ API: Move to v0.2, and fixup backends path (#433)

* Move to v0.2, and fixup backends path

The previous path was mistakenly incorrect, could we release this as a patch release of project-Q? Happy to help how I can.

* changelog

* fix

* One more fixup

* remove urljoin

* fmt

* Preparing release v0.7.3

Co-authored-by: github-actions[bot] <41898282+github-actions[bot]@users.noreply.github.com>
Co-authored-by: GitHub actions <noreply@github.com>
Co-authored-by: Nguyen Damien <ngn.damien@gmail.com>
Co-authored-by: Jon Donovan <donovan@ionq.co>

Co-authored-by: GitHub actions <noreply@github.com>
Co-authored-by: Nguyen Damien <ngn.damien@gmail.com>
Co-authored-by: github-actions[bot] <41898282+github-actions[bot]@users.noreply.github.com>
Co-authored-by: Jon Donovan <donovan@ionq.co>

* Bump docker/setup-qemu-action from 1 to 2 (#437)

* Bump docker/setup-qemu-action from 1 to 2

Bumps [docker/setup-qemu-action](https://github.com/docker/setup-qemu-action) from 1 to 2.
- [Release notes](https://github.com/docker/setup-qemu-action/releases)
- [Commits](https://github.com/docker/setup-qemu-action/compare/v1...v2)

---
updated-dependencies:
- dependency-name: docker/setup-qemu-action
  dependency-type: direct:production
  update-type: version-update:semver-major
...

Signed-off-by: dependabot[bot] <support@github.com>

* Update CHANGELOG

* Fix CentOS 7 build

Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Co-authored-by: Nguyen Damien <ngn.damien@gmail.com>

* Fix setuptools-scm version for Python 3.6 (#440)

* Add `blacken-docs` and `pyupgrade` to pre-commit configuration (#441)

* Add `blacken-docs` and `pyupgrade` to pre-commit configuration

* Apply new pre-commit hooks and fix related issues.

* Update CHANGELOG

* Fix unit tests failures

* Fix pre-commit failure

* Generalise the use of f-strings

* Fix IonQ tests

* Run `pyupgrade` before `isort` and `black`

* Deprecate support for Python 3.6 (#442)

* Azure Quantum backend (#439)

* Add Azure Quantum backend template files

* Add implementation of Azure Quantum

* Add support for Honeywell and improve exception handling

* Fixes and reformatting

* Fixes and Improvements

* Fixes and Improvements

* Fixes and Improvements

* Fixes and Improvements

* Fix QASM transulation

* Fixes and Improvements

* Documentation related changes

* Fix typos

* Add docstrings to util methods

* Fix typos

* Add Unittests

* Add Unittests

* Add Unittests & rename honeywell to quantinuum

* Fixes for QSAM convector

* Add Unittests

* Add Unittests

* Add Unittests

* Add Unittests

* Fix Quantinuum Backend for Azure Quantum

* Add Unittests

* Add Unittests

* Add Unittests

* Add Unittests

* Fix Vdag gate for IonQ backend

* Minor updates

* Update Docs

* Add Azure Quantum example

* Update README.rst

* Update Docs

* Update Docs

* Update Unittests

* Azure Quantum: CI Fixes (#4)

* Azure Quantum: CI Fixes

* Fix optional dependency problem

* Update pre-commit reformatting

* Fix pylint issues

* Fix pylint issues

* Update CHANGELOG.md

* Update CHANGELOG.md

* Update CHANGELOG.md

* Resolve comments (#5)

* Resolve comments

* Remove rearrange_result method from _utils.py

* Update with pytest.approx for assert floating numbers

* Pytest skipif testcases for Azure Quantum (#6)

* Pytest skipif testcases for Azure Quantum

* Fix projectq.backends._azure._exceptions import

* Add common utils module (#7)

* Create common utils module

* Optimize _rearrange_result method

* Make sure pip, setuptools and wheel packages are up to date on CI

* Fix formatting issues from latest changes in develop branch

* Improve coveralls (#8)

* Improve coveralls

* Improve coveralls

* Rename util.py to utils.py

* Minor fixes

* Update testcases

* Update testcases

* Improve coveralls (#9)

* Improve coveralls

* Improve coveralls

* Precommit reformatting

* Improve coveralls (#10)

* Improve coveralls

* Precommit formatting

* Fix CI failures

* Avoid a few more #pragma: no cover

* Fix flake8 warning

* Remove one more # pragma: no cover

* Reformat file

Co-authored-by: Nguyen Damien <ngn.damien@gmail.com>

* Fix installation on Apple Silicon and older Python versions (#444)

* Preparing release v0.8.0

Co-authored-by: github-actions[bot] <41898282+github-actions[bot]@users.noreply.github.com>
Co-authored-by: GitHub actions <noreply@github.com>
Co-authored-by: Nguyen Damien <ngn.damien@gmail.com>
Co-authored-by: Jon Donovan <donovan@ionq.co>
Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Co-authored-by: Sai Seshu Chadaram <ssc1729@outlook.com>"
,ProjectQ-Framework,ProjectQ,projectq/setups/decompositions/phaseestimation_test.py,"Release version v0.8.0 (#446)

* Merge master into develop branch (#436)

* Preparing release vv0.7.2

* Fix missed bug in optimize.py

* Fix typo in _optimize.py

* Fix linters/formatters warnings

* Update missed hooks

* Hotfix: fix GitHub action workflows

* Release version v0.7.3 (#435)

* Merge master into develop branch (#431)

* Preparing release vv0.7.2

* Fix missed bug in optimize.py

* Fix typo in _optimize.py

* Fix linters/formatters warnings

* Update missed hooks

* Hotfix: fix GitHub action workflows

Co-authored-by: GitHub actions <noreply@github.com>
Co-authored-by: Nguyen Damien <ngn.damien@gmail.com>

* IonQ API: Move to v0.2, and fixup backends path (#433)

* Move to v0.2, and fixup backends path

The previous path was mistakenly incorrect, could we release this as a patch release of project-Q? Happy to help how I can.

* changelog

* fix

* One more fixup

* remove urljoin

* fmt

* Preparing release v0.7.3

Co-authored-by: github-actions[bot] <41898282+github-actions[bot]@users.noreply.github.com>
Co-authored-by: GitHub actions <noreply@github.com>
Co-authored-by: Nguyen Damien <ngn.damien@gmail.com>
Co-authored-by: Jon Donovan <donovan@ionq.co>

Co-authored-by: GitHub actions <noreply@github.com>
Co-authored-by: Nguyen Damien <ngn.damien@gmail.com>
Co-authored-by: github-actions[bot] <41898282+github-actions[bot]@users.noreply.github.com>
Co-authored-by: Jon Donovan <donovan@ionq.co>

* Bump docker/setup-qemu-action from 1 to 2 (#437)

* Bump docker/setup-qemu-action from 1 to 2

Bumps [docker/setup-qemu-action](https://github.com/docker/setup-qemu-action) from 1 to 2.
- [Release notes](https://github.com/docker/setup-qemu-action/releases)
- [Commits](https://github.com/docker/setup-qemu-action/compare/v1...v2)

---
updated-dependencies:
- dependency-name: docker/setup-qemu-action
  dependency-type: direct:production
  update-type: version-update:semver-major
...

Signed-off-by: dependabot[bot] <support@github.com>

* Update CHANGELOG

* Fix CentOS 7 build

Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Co-authored-by: Nguyen Damien <ngn.damien@gmail.com>

* Fix setuptools-scm version for Python 3.6 (#440)

* Add `blacken-docs` and `pyupgrade` to pre-commit configuration (#441)

* Add `blacken-docs` and `pyupgrade` to pre-commit configuration

* Apply new pre-commit hooks and fix related issues.

* Update CHANGELOG

* Fix unit tests failures

* Fix pre-commit failure

* Generalise the use of f-strings

* Fix IonQ tests

* Run `pyupgrade` before `isort` and `black`

* Deprecate support for Python 3.6 (#442)

* Azure Quantum backend (#439)

* Add Azure Quantum backend template files

* Add implementation of Azure Quantum

* Add support for Honeywell and improve exception handling

* Fixes and reformatting

* Fixes and Improvements

* Fixes and Improvements

* Fixes and Improvements

* Fixes and Improvements

* Fix QASM transulation

* Fixes and Improvements

* Documentation related changes

* Fix typos

* Add docstrings to util methods

* Fix typos

* Add Unittests

* Add Unittests

* Add Unittests & rename honeywell to quantinuum

* Fixes for QSAM convector

* Add Unittests

* Add Unittests

* Add Unittests

* Add Unittests

* Fix Quantinuum Backend for Azure Quantum

* Add Unittests

* Add Unittests

* Add Unittests

* Add Unittests

* Fix Vdag gate for IonQ backend

* Minor updates

* Update Docs

* Add Azure Quantum example

* Update README.rst

* Update Docs

* Update Docs

* Update Unittests

* Azure Quantum: CI Fixes (#4)

* Azure Quantum: CI Fixes

* Fix optional dependency problem

* Update pre-commit reformatting

* Fix pylint issues

* Fix pylint issues

* Update CHANGELOG.md

* Update CHANGELOG.md

* Update CHANGELOG.md

* Resolve comments (#5)

* Resolve comments

* Remove rearrange_result method from _utils.py

* Update with pytest.approx for assert floating numbers

* Pytest skipif testcases for Azure Quantum (#6)

* Pytest skipif testcases for Azure Quantum

* Fix projectq.backends._azure._exceptions import

* Add common utils module (#7)

* Create common utils module

* Optimize _rearrange_result method

* Make sure pip, setuptools and wheel packages are up to date on CI

* Fix formatting issues from latest changes in develop branch

* Improve coveralls (#8)

* Improve coveralls

* Improve coveralls

* Rename util.py to utils.py

* Minor fixes

* Update testcases

* Update testcases

* Improve coveralls (#9)

* Improve coveralls

* Improve coveralls

* Precommit reformatting

* Improve coveralls (#10)

* Improve coveralls

* Precommit formatting

* Fix CI failures

* Avoid a few more #pragma: no cover

* Fix flake8 warning

* Remove one more # pragma: no cover

* Reformat file

Co-authored-by: Nguyen Damien <ngn.damien@gmail.com>

* Fix installation on Apple Silicon and older Python versions (#444)

* Preparing release v0.8.0

Co-authored-by: github-actions[bot] <41898282+github-actions[bot]@users.noreply.github.com>
Co-authored-by: GitHub actions <noreply@github.com>
Co-authored-by: Nguyen Damien <ngn.damien@gmail.com>
Co-authored-by: Jon Donovan <donovan@ionq.co>
Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Co-authored-by: Sai Seshu Chadaram <ssc1729@outlook.com>"
,ProjectQ-Framework,ProjectQ,CHANGELOG.md,"Azure Quantum backend (#439)

* Add Azure Quantum backend template files

* Add implementation of Azure Quantum

* Add support for Honeywell and improve exception handling

* Fixes and reformatting

* Fixes and Improvements

* Fixes and Improvements

* Fixes and Improvements

* Fixes and Improvements

* Fix QASM transulation

* Fixes and Improvements

* Documentation related changes

* Fix typos

* Add docstrings to util methods

* Fix typos

* Add Unittests

* Add Unittests

* Add Unittests & rename honeywell to quantinuum

* Fixes for QSAM convector

* Add Unittests

* Add Unittests

* Add Unittests

* Add Unittests

* Fix Quantinuum Backend for Azure Quantum

* Add Unittests

* Add Unittests

* Add Unittests

* Add Unittests

* Fix Vdag gate for IonQ backend

* Minor updates

* Update Docs

* Add Azure Quantum example

* Update README.rst

* Update Docs

* Update Docs

* Update Unittests

* Azure Quantum: CI Fixes (#4)

* Azure Quantum: CI Fixes

* Fix optional dependency problem

* Update pre-commit reformatting

* Fix pylint issues

* Fix pylint issues

* Update CHANGELOG.md

* Update CHANGELOG.md

* Update CHANGELOG.md

* Resolve comments (#5)

* Resolve comments

* Remove rearrange_result method from _utils.py

* Update with pytest.approx for assert floating numbers

* Pytest skipif testcases for Azure Quantum (#6)

* Pytest skipif testcases for Azure Quantum

* Fix projectq.backends._azure._exceptions import

* Add common utils module (#7)

* Create common utils module

* Optimize _rearrange_result method

* Make sure pip, setuptools and wheel packages are up to date on CI

* Fix formatting issues from latest changes in develop branch

* Improve coveralls (#8)

* Improve coveralls

* Improve coveralls

* Rename util.py to utils.py

* Minor fixes

* Update testcases

* Update testcases

* Improve coveralls (#9)

* Improve coveralls

* Improve coveralls

* Precommit reformatting

* Improve coveralls (#10)

* Improve coveralls

* Precommit formatting

* Fix CI failures

* Avoid a few more #pragma: no cover

* Fix flake8 warning

* Remove one more # pragma: no cover

* Reformat file

Co-authored-by: Nguyen Damien <ngn.damien@gmail.com>"
,ProjectQ-Framework,ProjectQ,README.rst,"Azure Quantum backend (#439)

* Add Azure Quantum backend template files

* Add implementation of Azure Quantum

* Add support for Honeywell and improve exception handling

* Fixes and reformatting

* Fixes and Improvements

* Fixes and Improvements

* Fixes and Improvements

* Fixes and Improvements

* Fix QASM transulation

* Fixes and Improvements

* Documentation related changes

* Fix typos

* Add docstrings to util methods

* Fix typos

* Add Unittests

* Add Unittests

* Add Unittests & rename honeywell to quantinuum

* Fixes for QSAM convector

* Add Unittests

* Add Unittests

* Add Unittests

* Add Unittests

* Fix Quantinuum Backend for Azure Quantum

* Add Unittests

* Add Unittests

* Add Unittests

* Add Unittests

* Fix Vdag gate for IonQ backend

* Minor updates

* Update Docs

* Add Azure Quantum example

* Update README.rst

* Update Docs

* Update Docs

* Update Unittests

* Azure Quantum: CI Fixes (#4)

* Azure Quantum: CI Fixes

* Fix optional dependency problem

* Update pre-commit reformatting

* Fix pylint issues

* Fix pylint issues

* Update CHANGELOG.md

* Update CHANGELOG.md

* Update CHANGELOG.md

* Resolve comments (#5)

* Resolve comments

* Remove rearrange_result method from _utils.py

* Update with pytest.approx for assert floating numbers

* Pytest skipif testcases for Azure Quantum (#6)

* Pytest skipif testcases for Azure Quantum

* Fix projectq.backends._azure._exceptions import

* Add common utils module (#7)

* Create common utils module

* Optimize _rearrange_result method

* Make sure pip, setuptools and wheel packages are up to date on CI

* Fix formatting issues from latest changes in develop branch

* Improve coveralls (#8)

* Improve coveralls

* Improve coveralls

* Rename util.py to utils.py

* Minor fixes

* Update testcases

* Update testcases

* Improve coveralls (#9)

* Improve coveralls

* Improve coveralls

* Precommit reformatting

* Improve coveralls (#10)

* Improve coveralls

* Precommit formatting

* Fix CI failures

* Avoid a few more #pragma: no cover

* Fix flake8 warning

* Remove one more # pragma: no cover

* Reformat file

Co-authored-by: Nguyen Damien <ngn.damien@gmail.com>"
,ProjectQ-Framework,ProjectQ,projectq/backends/__init__.py,"Azure Quantum backend (#439)

* Add Azure Quantum backend template files

* Add implementation of Azure Quantum

* Add support for Honeywell and improve exception handling

* Fixes and reformatting

* Fixes and Improvements

* Fixes and Improvements

* Fixes and Improvements

* Fixes and Improvements

* Fix QASM transulation

* Fixes and Improvements

* Documentation related changes

* Fix typos

* Add docstrings to util methods

* Fix typos

* Add Unittests

* Add Unittests

* Add Unittests & rename honeywell to quantinuum

* Fixes for QSAM convector

* Add Unittests

* Add Unittests

* Add Unittests

* Add Unittests

* Fix Quantinuum Backend for Azure Quantum

* Add Unittests

* Add Unittests

* Add Unittests

* Add Unittests

* Fix Vdag gate for IonQ backend

* Minor updates

* Update Docs

* Add Azure Quantum example

* Update README.rst

* Update Docs

* Update Docs

* Update Unittests

* Azure Quantum: CI Fixes (#4)

* Azure Quantum: CI Fixes

* Fix optional dependency problem

* Update pre-commit reformatting

* Fix pylint issues

* Fix pylint issues

* Update CHANGELOG.md

* Update CHANGELOG.md

* Update CHANGELOG.md

* Resolve comments (#5)

* Resolve comments

* Remove rearrange_result method from _utils.py

* Update with pytest.approx for assert floating numbers

* Pytest skipif testcases for Azure Quantum (#6)

* Pytest skipif testcases for Azure Quantum

* Fix projectq.backends._azure._exceptions import

* Add common utils module (#7)

* Create common utils module

* Optimize _rearrange_result method

* Make sure pip, setuptools and wheel packages are up to date on CI

* Fix formatting issues from latest changes in develop branch

* Improve coveralls (#8)

* Improve coveralls

* Improve coveralls

* Rename util.py to utils.py

* Minor fixes

* Update testcases

* Update testcases

* Improve coveralls (#9)

* Improve coveralls

* Improve coveralls

* Precommit reformatting

* Improve coveralls (#10)

* Improve coveralls

* Precommit formatting

* Fix CI failures

* Avoid a few more #pragma: no cover

* Fix flake8 warning

* Remove one more # pragma: no cover

* Reformat file

Co-authored-by: Nguyen Damien <ngn.damien@gmail.com>"
,ProjectQ-Framework,ProjectQ,projectq/backends/_azure/_azure_quantum.py,"Azure Quantum backend (#439)

* Add Azure Quantum backend template files

* Add implementation of Azure Quantum

* Add support for Honeywell and improve exception handling

* Fixes and reformatting

* Fixes and Improvements

* Fixes and Improvements

* Fixes and Improvements

* Fixes and Improvements

* Fix QASM transulation

* Fixes and Improvements

* Documentation related changes

* Fix typos

* Add docstrings to util methods

* Fix typos

* Add Unittests

* Add Unittests

* Add Unittests & rename honeywell to quantinuum

* Fixes for QSAM convector

* Add Unittests

* Add Unittests

* Add Unittests

* Add Unittests

* Fix Quantinuum Backend for Azure Quantum

* Add Unittests

* Add Unittests

* Add Unittests

* Add Unittests

* Fix Vdag gate for IonQ backend

* Minor updates

* Update Docs

* Add Azure Quantum example

* Update README.rst

* Update Docs

* Update Docs

* Update Unittests

* Azure Quantum: CI Fixes (#4)

* Azure Quantum: CI Fixes

* Fix optional dependency problem

* Update pre-commit reformatting

* Fix pylint issues

* Fix pylint issues

* Update CHANGELOG.md

* Update CHANGELOG.md

* Update CHANGELOG.md

* Resolve comments (#5)

* Resolve comments

* Remove rearrange_result method from _utils.py

* Update with pytest.approx for assert floating numbers

* Pytest skipif testcases for Azure Quantum (#6)

* Pytest skipif testcases for Azure Quantum

* Fix projectq.backends._azure._exceptions import

* Add common utils module (#7)

* Create common utils module

* Optimize _rearrange_result method

* Make sure pip, setuptools and wheel packages are up to date on CI

* Fix formatting issues from latest changes in develop branch

* Improve coveralls (#8)

* Improve coveralls

* Improve coveralls

* Rename util.py to utils.py

* Minor fixes

* Update testcases

* Update testcases

* Improve coveralls (#9)

* Improve coveralls

* Improve coveralls

* Precommit reformatting

* Improve coveralls (#10)

* Improve coveralls

* Precommit formatting

* Fix CI failures

* Avoid a few more #pragma: no cover

* Fix flake8 warning

* Remove one more # pragma: no cover

* Reformat file

Co-authored-by: Nguyen Damien <ngn.damien@gmail.com>"
,ProjectQ-Framework,ProjectQ,projectq/backends/_azure/_azure_quantum_client_test.py,"Azure Quantum backend (#439)

* Add Azure Quantum backend template files

* Add implementation of Azure Quantum

* Add support for Honeywell and improve exception handling

* Fixes and reformatting

* Fixes and Improvements

* Fixes and Improvements

* Fixes and Improvements

* Fixes and Improvements

* Fix QASM transulation

* Fixes and Improvements

* Documentation related changes

* Fix typos

* Add docstrings to util methods

* Fix typos

* Add Unittests

* Add Unittests

* Add Unittests & rename honeywell to quantinuum

* Fixes for QSAM convector

* Add Unittests

* Add Unittests

* Add Unittests

* Add Unittests

* Fix Quantinuum Backend for Azure Quantum

* Add Unittests

* Add Unittests

* Add Unittests

* Add Unittests

* Fix Vdag gate for IonQ backend

* Minor updates

* Update Docs

* Add Azure Quantum example

* Update README.rst

* Update Docs

* Update Docs

* Update Unittests

* Azure Quantum: CI Fixes (#4)

* Azure Quantum: CI Fixes

* Fix optional dependency problem

* Update pre-commit reformatting

* Fix pylint issues

* Fix pylint issues

* Update CHANGELOG.md

* Update CHANGELOG.md

* Update CHANGELOG.md

* Resolve comments (#5)

* Resolve comments

* Remove rearrange_result method from _utils.py

* Update with pytest.approx for assert floating numbers

* Pytest skipif testcases for Azure Quantum (#6)

* Pytest skipif testcases for Azure Quantum

* Fix projectq.backends._azure._exceptions import

* Add common utils module (#7)

* Create common utils module

* Optimize _rearrange_result method

* Make sure pip, setuptools and wheel packages are up to date on CI

* Fix formatting issues from latest changes in develop branch

* Improve coveralls (#8)

* Improve coveralls

* Improve coveralls

* Rename util.py to utils.py

* Minor fixes

* Update testcases

* Update testcases

* Improve coveralls (#9)

* Improve coveralls

* Improve coveralls

* Precommit reformatting

* Improve coveralls (#10)

* Improve coveralls

* Precommit formatting

* Fix CI failures

* Avoid a few more #pragma: no cover

* Fix flake8 warning

* Remove one more # pragma: no cover

* Reformat file

Co-authored-by: Nguyen Damien <ngn.damien@gmail.com>"
,ProjectQ-Framework,ProjectQ,projectq/backends/_azure/_azure_quantum_test.py,"Azure Quantum backend (#439)

* Add Azure Quantum backend template files

* Add implementation of Azure Quantum

* Add support for Honeywell and improve exception handling

* Fixes and reformatting

* Fixes and Improvements

* Fixes and Improvements

* Fixes and Improvements

* Fixes and Improvements

* Fix QASM transulation

* Fixes and Improvements

* Documentation related changes

* Fix typos

* Add docstrings to util methods

* Fix typos

* Add Unittests

* Add Unittests

* Add Unittests & rename honeywell to quantinuum

* Fixes for QSAM convector

* Add Unittests

* Add Unittests

* Add Unittests

* Add Unittests

* Fix Quantinuum Backend for Azure Quantum

* Add Unittests

* Add Unittests

* Add Unittests

* Add Unittests

* Fix Vdag gate for IonQ backend

* Minor updates

* Update Docs

* Add Azure Quantum example

* Update README.rst

* Update Docs

* Update Docs

* Update Unittests

* Azure Quantum: CI Fixes (#4)

* Azure Quantum: CI Fixes

* Fix optional dependency problem

* Update pre-commit reformatting

* Fix pylint issues

* Fix pylint issues

* Update CHANGELOG.md

* Update CHANGELOG.md

* Update CHANGELOG.md

* Resolve comments (#5)

* Resolve comments

* Remove rearrange_result method from _utils.py

* Update with pytest.approx for assert floating numbers

* Pytest skipif testcases for Azure Quantum (#6)

* Pytest skipif testcases for Azure Quantum

* Fix projectq.backends._azure._exceptions import

* Add common utils module (#7)

* Create common utils module

* Optimize _rearrange_result method

* Make sure pip, setuptools and wheel packages are up to date on CI

* Fix formatting issues from latest changes in develop branch

* Improve coveralls (#8)

* Improve coveralls

* Improve coveralls

* Rename util.py to utils.py

* Minor fixes

* Update testcases

* Update testcases

* Improve coveralls (#9)

* Improve coveralls

* Improve coveralls

* Precommit reformatting

* Improve coveralls (#10)

* Improve coveralls

* Precommit formatting

* Fix CI failures

* Avoid a few more #pragma: no cover

* Fix flake8 warning

* Remove one more # pragma: no cover

* Reformat file

Co-authored-by: Nguyen Damien <ngn.damien@gmail.com>"
,ProjectQ-Framework,ProjectQ,projectq/backends/_azure/_utils.py,"Azure Quantum backend (#439)

* Add Azure Quantum backend template files

* Add implementation of Azure Quantum

* Add support for Honeywell and improve exception handling

* Fixes and reformatting

* Fixes and Improvements

* Fixes and Improvements

* Fixes and Improvements

* Fixes and Improvements

* Fix QASM transulation

* Fixes and Improvements

* Documentation related changes

* Fix typos

* Add docstrings to util methods

* Fix typos

* Add Unittests

* Add Unittests

* Add Unittests & rename honeywell to quantinuum

* Fixes for QSAM convector

* Add Unittests

* Add Unittests

* Add Unittests

* Add Unittests

* Fix Quantinuum Backend for Azure Quantum

* Add Unittests

* Add Unittests

* Add Unittests

* Add Unittests

* Fix Vdag gate for IonQ backend

* Minor updates

* Update Docs

* Add Azure Quantum example

* Update README.rst

* Update Docs

* Update Docs

* Update Unittests

* Azure Quantum: CI Fixes (#4)

* Azure Quantum: CI Fixes

* Fix optional dependency problem

* Update pre-commit reformatting

* Fix pylint issues

* Fix pylint issues

* Update CHANGELOG.md

* Update CHANGELOG.md

* Update CHANGELOG.md

* Resolve comments (#5)

* Resolve comments

* Remove rearrange_result method from _utils.py

* Update with pytest.approx for assert floating numbers

* Pytest skipif testcases for Azure Quantum (#6)

* Pytest skipif testcases for Azure Quantum

* Fix projectq.backends._azure._exceptions import

* Add common utils module (#7)

* Create common utils module

* Optimize _rearrange_result method

* Make sure pip, setuptools and wheel packages are up to date on CI

* Fix formatting issues from latest changes in develop branch

* Improve coveralls (#8)

* Improve coveralls

* Improve coveralls

* Rename util.py to utils.py

* Minor fixes

* Update testcases

* Update testcases

* Improve coveralls (#9)

* Improve coveralls

* Improve coveralls

* Precommit reformatting

* Improve coveralls (#10)

* Improve coveralls

* Precommit formatting

* Fix CI failures

* Avoid a few more #pragma: no cover

* Fix flake8 warning

* Remove one more # pragma: no cover

* Reformat file

Co-authored-by: Nguyen Damien <ngn.damien@gmail.com>"
,ProjectQ-Framework,ProjectQ,projectq/backends/_azure/_utils_test.py,"Azure Quantum backend (#439)

* Add Azure Quantum backend template files

* Add implementation of Azure Quantum

* Add support for Honeywell and improve exception handling

* Fixes and reformatting

* Fixes and Improvements

* Fixes and Improvements

* Fixes and Improvements

* Fixes and Improvements

* Fix QASM transulation

* Fixes and Improvements

* Documentation related changes

* Fix typos

* Add docstrings to util methods

* Fix typos

* Add Unittests

* Add Unittests

* Add Unittests & rename honeywell to quantinuum

* Fixes for QSAM convector

* Add Unittests

* Add Unittests

* Add Unittests

* Add Unittests

* Fix Quantinuum Backend for Azure Quantum

* Add Unittests

* Add Unittests

* Add Unittests

* Add Unittests

* Fix Vdag gate for IonQ backend

* Minor updates

* Update Docs

* Add Azure Quantum example

* Update README.rst

* Update Docs

* Update Docs

* Update Unittests

* Azure Quantum: CI Fixes (#4)

* Azure Quantum: CI Fixes

* Fix optional dependency problem

* Update pre-commit reformatting

* Fix pylint issues

* Fix pylint issues

* Update CHANGELOG.md

* Update CHANGELOG.md

* Update CHANGELOG.md

* Resolve comments (#5)

* Resolve comments

* Remove rearrange_result method from _utils.py

* Update with pytest.approx for assert floating numbers

* Pytest skipif testcases for Azure Quantum (#6)

* Pytest skipif testcases for Azure Quantum

* Fix projectq.backends._azure._exceptions import

* Add common utils module (#7)

* Create common utils module

* Optimize _rearrange_result method

* Make sure pip, setuptools and wheel packages are up to date on CI

* Fix formatting issues from latest changes in develop branch

* Improve coveralls (#8)

* Improve coveralls

* Improve coveralls

* Rename util.py to utils.py

* Minor fixes

* Update testcases

* Update testcases

* Improve coveralls (#9)

* Improve coveralls

* Improve coveralls

* Precommit reformatting

* Improve coveralls (#10)

* Improve coveralls

* Precommit formatting

* Fix CI failures

* Avoid a few more #pragma: no cover

* Fix flake8 warning

* Remove one more # pragma: no cover

* Reformat file

Co-authored-by: Nguyen Damien <ngn.damien@gmail.com>"
,ProjectQ-Framework,ProjectQ,pyproject.toml,"Azure Quantum backend (#439)

* Add Azure Quantum backend template files

* Add implementation of Azure Quantum

* Add support for Honeywell and improve exception handling

* Fixes and reformatting

* Fixes and Improvements

* Fixes and Improvements

* Fixes and Improvements

* Fixes and Improvements

* Fix QASM transulation

* Fixes and Improvements

* Documentation related changes

* Fix typos

* Add docstrings to util methods

* Fix typos

* Add Unittests

* Add Unittests

* Add Unittests & rename honeywell to quantinuum

* Fixes for QSAM convector

* Add Unittests

* Add Unittests

* Add Unittests

* Add Unittests

* Fix Quantinuum Backend for Azure Quantum

* Add Unittests

* Add Unittests

* Add Unittests

* Add Unittests

* Fix Vdag gate for IonQ backend

* Minor updates

* Update Docs

* Add Azure Quantum example

* Update README.rst

* Update Docs

* Update Docs

* Update Unittests

* Azure Quantum: CI Fixes (#4)

* Azure Quantum: CI Fixes

* Fix optional dependency problem

* Update pre-commit reformatting

* Fix pylint issues

* Fix pylint issues

* Update CHANGELOG.md

* Update CHANGELOG.md

* Update CHANGELOG.md

* Resolve comments (#5)

* Resolve comments

* Remove rearrange_result method from _utils.py

* Update with pytest.approx for assert floating numbers

* Pytest skipif testcases for Azure Quantum (#6)

* Pytest skipif testcases for Azure Quantum

* Fix projectq.backends._azure._exceptions import

* Add common utils module (#7)

* Create common utils module

* Optimize _rearrange_result method

* Make sure pip, setuptools and wheel packages are up to date on CI

* Fix formatting issues from latest changes in develop branch

* Improve coveralls (#8)

* Improve coveralls

* Improve coveralls

* Rename util.py to utils.py

* Minor fixes

* Update testcases

* Update testcases

* Improve coveralls (#9)

* Improve coveralls

* Improve coveralls

* Precommit reformatting

* Improve coveralls (#10)

* Improve coveralls

* Precommit formatting

* Fix CI failures

* Avoid a few more #pragma: no cover

* Fix flake8 warning

* Remove one more # pragma: no cover

* Reformat file

Co-authored-by: Nguyen Damien <ngn.damien@gmail.com>"
,ProjectQ-Framework,ProjectQ,projectq/cengines/_testengine_test.py,"Add `blacken-docs` and `pyupgrade` to pre-commit configuration (#441)

* Add `blacken-docs` and `pyupgrade` to pre-commit configuration

* Apply new pre-commit hooks and fix related issues.

* Update CHANGELOG

* Fix unit tests failures

* Fix pre-commit failure

* Generalise the use of f-strings

* Fix IonQ tests

* Run `pyupgrade` before `isort` and `black`"
,ProjectQ-Framework,ProjectQ,projectq/meta/_dagger.py,"Add `blacken-docs` and `pyupgrade` to pre-commit configuration (#441)

* Add `blacken-docs` and `pyupgrade` to pre-commit configuration

* Apply new pre-commit hooks and fix related issues.

* Update CHANGELOG

* Fix unit tests failures

* Fix pre-commit failure

* Generalise the use of f-strings

* Fix IonQ tests

* Run `pyupgrade` before `isort` and `black`"
,ProjectQ-Framework,ProjectQ,projectq/ops/_qubit_operator.py,"Add `blacken-docs` and `pyupgrade` to pre-commit configuration (#441)

* Add `blacken-docs` and `pyupgrade` to pre-commit configuration

* Apply new pre-commit hooks and fix related issues.

* Update CHANGELOG

* Fix unit tests failures

* Fix pre-commit failure

* Generalise the use of f-strings

* Fix IonQ tests

* Run `pyupgrade` before `isort` and `black`"
,XanaduAI,strawberryfields,strawberryfields/decompositions.py,"Fix release action (#722)

* fix release action

* expand tolerance of test

* expand tolerance

* use tf.einsum"
,XanaduAI,strawberryfields,.github/CHANGELOG.md,"Borealis (#714)

* bump version and requirements

* refactor tdm

* update compilers

* update core functionality

* update utilities

* update tests

* update changelog

* fix changelog

* update docs

* Update doc/introduction/photonic_hardware.rst

* Apply suggestions from code review

Co-authored-by: Josh Izaac <josh146@gmail.com>"
,XanaduAI,strawberryfields,examples/gbs_data_visualization.py,"Borealis (#714)

* bump version and requirements

* refactor tdm

* update compilers

* update core functionality

* update utilities

* update tests

* update changelog

* fix changelog

* update docs

* Update doc/introduction/photonic_hardware.rst

* Apply suggestions from code review

Co-authored-by: Josh Izaac <josh146@gmail.com>"
,XanaduAI,strawberryfields,strawberryfields/backends/bosonicbackend/backend.py,"Borealis (#714)

* bump version and requirements

* refactor tdm

* update compilers

* update core functionality

* update utilities

* update tests

* update changelog

* fix changelog

* update docs

* Update doc/introduction/photonic_hardware.rst

* Apply suggestions from code review

Co-authored-by: Josh Izaac <josh146@gmail.com>"
,XanaduAI,strawberryfields,strawberryfields/backends/gaussianbackend/backend.py,"Borealis (#714)

* bump version and requirements

* refactor tdm

* update compilers

* update core functionality

* update utilities

* update tests

* update changelog

* fix changelog

* update docs

* Update doc/introduction/photonic_hardware.rst

* Apply suggestions from code review

Co-authored-by: Josh Izaac <josh146@gmail.com>"
,XanaduAI,strawberryfields,strawberryfields/backends/gaussianbackend/gaussiancircuit.py,"Borealis (#714)

* bump version and requirements

* refactor tdm

* update compilers

* update core functionality

* update utilities

* update tests

* update changelog

* fix changelog

* update docs

* Update doc/introduction/photonic_hardware.rst

* Apply suggestions from code review

Co-authored-by: Josh Izaac <josh146@gmail.com>"
,XanaduAI,strawberryfields,strawberryfields/compilers/__init__.py,"Borealis (#714)

* bump version and requirements

* refactor tdm

* update compilers

* update core functionality

* update utilities

* update tests

* update changelog

* fix changelog

* update docs

* Update doc/introduction/photonic_hardware.rst

* Apply suggestions from code review

Co-authored-by: Josh Izaac <josh146@gmail.com>"
,XanaduAI,strawberryfields,strawberryfields/compilers/compiler.py,"Borealis (#714)

* bump version and requirements

* refactor tdm

* update compilers

* update core functionality

* update utilities

* update tests

* update changelog

* fix changelog

* update docs

* Update doc/introduction/photonic_hardware.rst

* Apply suggestions from code review

Co-authored-by: Josh Izaac <josh146@gmail.com>"
,XanaduAI,strawberryfields,strawberryfields/compilers/tdm.py,"Borealis (#714)

* bump version and requirements

* refactor tdm

* update compilers

* update core functionality

* update utilities

* update tests

* update changelog

* fix changelog

* update docs

* Update doc/introduction/photonic_hardware.rst

* Apply suggestions from code review

Co-authored-by: Josh Izaac <josh146@gmail.com>"
,XanaduAI,strawberryfields,strawberryfields/program.py,"Borealis (#714)

* bump version and requirements

* refactor tdm

* update compilers

* update core functionality

* update utilities

* update tests

* update changelog

* fix changelog

* update docs

* Update doc/introduction/photonic_hardware.rst

* Apply suggestions from code review

Co-authored-by: Josh Izaac <josh146@gmail.com>"
,XanaduAI,strawberryfields,strawberryfields/program_utils.py,"Borealis (#714)

* bump version and requirements

* refactor tdm

* update compilers

* update core functionality

* update utilities

* update tests

* update changelog

* fix changelog

* update docs

* Update doc/introduction/photonic_hardware.rst

* Apply suggestions from code review

Co-authored-by: Josh Izaac <josh146@gmail.com>"
,XanaduAI,strawberryfields,strawberryfields/tdm/program.py,"Borealis (#714)

* bump version and requirements

* refactor tdm

* update compilers

* update core functionality

* update utilities

* update tests

* update changelog

* fix changelog

* update docs

* Update doc/introduction/photonic_hardware.rst

* Apply suggestions from code review

Co-authored-by: Josh Izaac <josh146@gmail.com>"
,XanaduAI,strawberryfields,strawberryfields/tdm/utils.py,"Borealis (#714)

* bump version and requirements

* refactor tdm

* update compilers

* update core functionality

* update utilities

* update tests

* update changelog

* fix changelog

* update docs

* Update doc/introduction/photonic_hardware.rst

* Apply suggestions from code review

Co-authored-by: Josh Izaac <josh146@gmail.com>"
,XanaduAI,strawberryfields,tests/conftest.py,"Borealis (#714)

* bump version and requirements

* refactor tdm

* update compilers

* update core functionality

* update utilities

* update tests

* update changelog

* fix changelog

* update docs

* Update doc/introduction/photonic_hardware.rst

* Apply suggestions from code review

Co-authored-by: Josh Izaac <josh146@gmail.com>"
,XanaduAI,strawberryfields,tests/frontend/compilers/conftest.py,"Borealis (#714)

* bump version and requirements

* refactor tdm

* update compilers

* update core functionality

* update utilities

* update tests

* update changelog

* fix changelog

* update docs

* Update doc/introduction/photonic_hardware.rst

* Apply suggestions from code review

Co-authored-by: Josh Izaac <josh146@gmail.com>"
,XanaduAI,strawberryfields,tests/frontend/compilers/test_compiler.py,"Borealis (#714)

* bump version and requirements

* refactor tdm

* update compilers

* update core functionality

* update utilities

* update tests

* update changelog

* fix changelog

* update docs

* Update doc/introduction/photonic_hardware.rst

* Apply suggestions from code review

Co-authored-by: Josh Izaac <josh146@gmail.com>"
,XanaduAI,strawberryfields,tests/frontend/compilers/test_tdm.py,"Borealis (#714)

* bump version and requirements

* refactor tdm

* update compilers

* update core functionality

* update utilities

* update tests

* update changelog

* fix changelog

* update docs

* Update doc/introduction/photonic_hardware.rst

* Apply suggestions from code review

Co-authored-by: Josh Izaac <josh146@gmail.com>"
,XanaduAI,strawberryfields,tests/frontend/io/test_io_xir.py,"Borealis (#714)

* bump version and requirements

* refactor tdm

* update compilers

* update core functionality

* update utilities

* update tests

* update changelog

* fix changelog

* update docs

* Update doc/introduction/photonic_hardware.rst

* Apply suggestions from code review

Co-authored-by: Josh Izaac <josh146@gmail.com>"
,XanaduAI,strawberryfields,tests/frontend/test_tdm_utils.py,"Borealis (#714)

* bump version and requirements

* refactor tdm

* update compilers

* update core functionality

* update utilities

* update tests

* update changelog

* fix changelog

* update docs

* Update doc/introduction/photonic_hardware.rst

* Apply suggestions from code review

Co-authored-by: Josh Izaac <josh146@gmail.com>"
,XanaduAI,strawberryfields,tests/frontend/test_tdmprogram.py,"Borealis (#714)

* bump version and requirements

* refactor tdm

* update compilers

* update core functionality

* update utilities

* update tests

* update changelog

* fix changelog

* update docs

* Update doc/introduction/photonic_hardware.rst

* Apply suggestions from code review

Co-authored-by: Josh Izaac <josh146@gmail.com>"
,XanaduAI,strawberryfields,tests/integration/test_parameters_integration.py,"Borealis (#714)

* bump version and requirements

* refactor tdm

* update compilers

* update core functionality

* update utilities

* update tests

* update changelog

* fix changelog

* update docs

* Update doc/introduction/photonic_hardware.rst

* Apply suggestions from code review

Co-authored-by: Josh Izaac <josh146@gmail.com>"
,XanaduAI,strawberryfields,strawberryfields/engine.py,"Limit `Xstrict` validation to X-series compilers (#713)

* limit Xstrict validation to X-series compilers

* fix tests"
,XanaduAI,strawberryfields,tests/api/test_remote_engine.py,"Limit `Xstrict` validation to X-series compilers (#713)

* limit Xstrict validation to X-series compilers

* fix tests"
,XanaduAI,strawberryfields,.github/CHANGELOG.md,"Unrolling fix (#710)

* store rolled circuit before unrolling

* update changelog

* Update .github/CHANGELOG.md"
,XanaduAI,strawberryfields,doc/introduction/circuits.rst,"Adopt the Xanadu Sphinx Theme (#701)

* Adopt the centralized Xanadu Sphinx Theme

* Update changelog

* Remove xanadu/ from Sphinx templates path

* Improve coding style of JS tab selection code

* Install git in Documentation check

* Replace raw HTML with `.. index-card` directives

* Fix Sphinx warning about inclusion of install.rst

* Change navbar home link to https://strawberryfields.ai

* Remove tooltips from gallery items

* Restore SF wordmark in navigation bar

* Use XST version on PyPI

* Remove `git` installation from Documentation check workflow"
,XanaduAI,strawberryfields,tests/frontend/test_tdmprogram.py,"(un)locking when (un)rolling (#703)

* refactor unrolling

* fix tests

* update changelog

* fix unnecessary else

* add unrolling test

* add to unrolling test

* fix storing unrolled shots

* expand tests

* fix (un)locking

* update changelog

* add test"
,XanaduAI,strawberryfields,.github/CHANGELOG.md,"Tidy up (un)rolling (#702)

* refactor unrolling

* fix tests

* update changelog

* fix unnecessary else

* add unrolling test

* add to unrolling test

* fix storing unrolled shots

* expand tests"
,XanaduAI,strawberryfields,strawberryfields/tdm/tdmprogram.py,"Tidy up (un)rolling (#702)

* refactor unrolling

* fix tests

* update changelog

* fix unnecessary else

* add unrolling test

* add to unrolling test

* fix storing unrolled shots

* expand tests"
,XanaduAI,strawberryfields,tests/frontend/test_space_unroll.py,"Tidy up (un)rolling (#702)

* refactor unrolling

* fix tests

* update changelog

* fix unnecessary else

* add unrolling test

* add to unrolling test

* fix storing unrolled shots

* expand tests"
,XanaduAI,strawberryfields,tests/frontend/test_tdmprogram.py,"Tidy up (un)rolling (#702)

* refactor unrolling

* fix tests

* update changelog

* fix unnecessary else

* add unrolling test

* add to unrolling test

* fix storing unrolled shots

* expand tests"
,XanaduAI,strawberryfields,tests/frontend/test_program.py,"Deep copy from `Program.compile()` (#688)

* use deep copy instead of shallow copy

* rename test

* add tests

* fix program copying

* fix mistake

* fix tests (again)

* update changelog

* Update tests/frontend/test_program.py

Co-authored-by: Sebasti闂傚倷娴囧畷鍨叏鐎靛摜纾 Duque Mesa <675763+sduquemesa@users.noreply.github.com>

Co-authored-by: Sebasti闂傚倷娴囧畷鍨叏鐎靛摜纾 Duque Mesa <675763+sduquemesa@users.noreply.github.com>"
,XanaduAI,strawberryfields,tests/frontend/test_tdmprogram.py,"Deep copy from `Program.compile()` (#688)

* use deep copy instead of shallow copy

* rename test

* add tests

* fix program copying

* fix mistake

* fix tests (again)

* update changelog

* Update tests/frontend/test_program.py

Co-authored-by: Sebasti闂傚倷娴囧畷鍨叏鐎靛摜纾 Duque Mesa <675763+sduquemesa@users.noreply.github.com>

Co-authored-by: Sebasti闂傚倷娴囧畷鍨叏鐎靛摜纾 Duque Mesa <675763+sduquemesa@users.noreply.github.com>"
,XanaduAI,strawberryfields,.github/CHANGELOG.md,"`sf.Program` equality operator (#686)

* add eq method for programs

* add/fix tests

* update changelog

* add check to eq func

* update eq and add method

* add tests

* update changelog

* update eq

* Apply suggestions from code review

Co-authored-by: Josh Izaac <josh146@gmail.com>

* move note from eq to class docstring

Co-authored-by: Josh Izaac <josh146@gmail.com>"
,XanaduAI,strawberryfields,strawberryfields/program.py,"`sf.Program` equality operator (#686)

* add eq method for programs

* add/fix tests

* update changelog

* add check to eq func

* update eq and add method

* add tests

* update changelog

* update eq

* Apply suggestions from code review

Co-authored-by: Josh Izaac <josh146@gmail.com>

* move note from eq to class docstring

Co-authored-by: Josh Izaac <josh146@gmail.com>"
,XanaduAI,strawberryfields,strawberryfields/program_utils.py,"`sf.Program` equality operator (#686)

* add eq method for programs

* add/fix tests

* update changelog

* add check to eq func

* update eq and add method

* add tests

* update changelog

* update eq

* Apply suggestions from code review

Co-authored-by: Josh Izaac <josh146@gmail.com>

* move note from eq to class docstring

Co-authored-by: Josh Izaac <josh146@gmail.com>"
,XanaduAI,strawberryfields,tests/frontend/compilers/conftest.py,"`sf.Program` equality operator (#686)

* add eq method for programs

* add/fix tests

* update changelog

* add check to eq func

* update eq and add method

* add tests

* update changelog

* update eq

* Apply suggestions from code review

Co-authored-by: Josh Izaac <josh146@gmail.com>

* move note from eq to class docstring

Co-authored-by: Josh Izaac <josh146@gmail.com>"
,XanaduAI,strawberryfields,tests/frontend/compilers/test_xcov.py,"`sf.Program` equality operator (#686)

* add eq method for programs

* add/fix tests

* update changelog

* add check to eq func

* update eq and add method

* add tests

* update changelog

* update eq

* Apply suggestions from code review

Co-authored-by: Josh Izaac <josh146@gmail.com>

* move note from eq to class docstring

Co-authored-by: Josh Izaac <josh146@gmail.com>"
,XanaduAI,strawberryfields,tests/frontend/compilers/test_xstrict.py,"`sf.Program` equality operator (#686)

* add eq method for programs

* add/fix tests

* update changelog

* add check to eq func

* update eq and add method

* add tests

* update changelog

* update eq

* Apply suggestions from code review

Co-authored-by: Josh Izaac <josh146@gmail.com>

* move note from eq to class docstring

Co-authored-by: Josh Izaac <josh146@gmail.com>"
,XanaduAI,strawberryfields,tests/frontend/compilers/test_xunitary.py,"`sf.Program` equality operator (#686)

* add eq method for programs

* add/fix tests

* update changelog

* add check to eq func

* update eq and add method

* add tests

* update changelog

* update eq

* Apply suggestions from code review

Co-authored-by: Josh Izaac <josh146@gmail.com>

* move note from eq to class docstring

Co-authored-by: Josh Izaac <josh146@gmail.com>"
,XanaduAI,strawberryfields,tests/frontend/test_program.py,"`sf.Program` equality operator (#686)

* add eq method for programs

* add/fix tests

* update changelog

* add check to eq func

* update eq and add method

* add tests

* update changelog

* update eq

* Apply suggestions from code review

Co-authored-by: Josh Izaac <josh146@gmail.com>

* move note from eq to class docstring

Co-authored-by: Josh Izaac <josh146@gmail.com>"
,AgnostiqHQ,covalent,.github/workflows/tests.yml,"Enabling qelectron tests and making qelectron opt-in only (#1916)

* Adding qelectron tests to the suite

* disabling qelectron tests as they are not working currently

* making qelectrons a feature users can opt out of

* fixed basic dispatching

* fixing boilerplate and requirements workflows

* fixing boilerplate and requirements workflows

* fixing tests

* fixing tests and workflows

* fixing requirements

* fixing requirements

* Made qelectron an opt-in feature

* minor import fix

* fixing tests

* fixing tests

* added executor back to init file"
,AgnostiqHQ,covalent,covalent/_shared_files/qelectron_utils.py,"Enabling qelectron tests and making qelectron opt-in only (#1916)

* Adding qelectron tests to the suite

* disabling qelectron tests as they are not working currently

* making qelectrons a feature users can opt out of

* fixed basic dispatching

* fixing boilerplate and requirements workflows

* fixing boilerplate and requirements workflows

* fixing tests

* fixing tests and workflows

* fixing requirements

* fixing requirements

* Made qelectron an opt-in feature

* minor import fix

* fixing tests

* fixing tests

* added executor back to init file"
,AgnostiqHQ,covalent,covalent/executor/__init__.py,"Enabling qelectron tests and making qelectron opt-in only (#1916)

* Adding qelectron tests to the suite

* disabling qelectron tests as they are not working currently

* making qelectrons a feature users can opt out of

* fixed basic dispatching

* fixing boilerplate and requirements workflows

* fixing boilerplate and requirements workflows

* fixing tests

* fixing tests and workflows

* fixing requirements

* fixing requirements

* Made qelectron an opt-in feature

* minor import fix

* fixing tests

* fixing tests

* added executor back to init file"
,AgnostiqHQ,covalent,tests/qelectron_tests/core_tests/test_decorator.py,"Enabling qelectron tests and making qelectron opt-in only (#1916)

* Adding qelectron tests to the suite

* disabling qelectron tests as they are not working currently

* making qelectrons a feature users can opt out of

* fixed basic dispatching

* fixing boilerplate and requirements workflows

* fixing boilerplate and requirements workflows

* fixing tests

* fixing tests and workflows

* fixing requirements

* fixing requirements

* Made qelectron an opt-in feature

* minor import fix

* fixing tests

* fixing tests

* added executor back to init file"
,AgnostiqHQ,covalent,tests/qelectron_tests/core_tests/test_qelectron_db.py,"Enabling qelectron tests and making qelectron opt-in only (#1916)

* Adding qelectron tests to the suite

* disabling qelectron tests as they are not working currently

* making qelectrons a feature users can opt out of

* fixed basic dispatching

* fixing boilerplate and requirements workflows

* fixing boilerplate and requirements workflows

* fixing tests

* fixing tests and workflows

* fixing requirements

* fixing requirements

* Made qelectron an opt-in feature

* minor import fix

* fixing tests

* fixing tests

* added executor back to init file"
,AgnostiqHQ,covalent,tests/qelectron_tests/core_tests/test_run_later.py,"Enabling qelectron tests and making qelectron opt-in only (#1916)

* Adding qelectron tests to the suite

* disabling qelectron tests as they are not working currently

* making qelectrons a feature users can opt out of

* fixed basic dispatching

* fixing boilerplate and requirements workflows

* fixing boilerplate and requirements workflows

* fixing tests

* fixing tests and workflows

* fixing requirements

* fixing requirements

* Made qelectron an opt-in feature

* minor import fix

* fixing tests

* fixing tests

* added executor back to init file"
,AgnostiqHQ,covalent,tests/qelectron_tests/pennylane_tests/conftest.py,"Enabling qelectron tests and making qelectron opt-in only (#1916)

* Adding qelectron tests to the suite

* disabling qelectron tests as they are not working currently

* making qelectrons a feature users can opt out of

* fixed basic dispatching

* fixing boilerplate and requirements workflows

* fixing boilerplate and requirements workflows

* fixing tests

* fixing tests and workflows

* fixing requirements

* fixing requirements

* Made qelectron an opt-in feature

* minor import fix

* fixing tests

* fixing tests

* added executor back to init file"
,AgnostiqHQ,covalent,tests/requirements.txt,"Enabling qelectron tests and making qelectron opt-in only (#1916)

* Adding qelectron tests to the suite

* disabling qelectron tests as they are not working currently

* making qelectrons a feature users can opt out of

* fixed basic dispatching

* fixing boilerplate and requirements workflows

* fixing boilerplate and requirements workflows

* fixing tests

* fixing tests and workflows

* fixing requirements

* fixing requirements

* Made qelectron an opt-in feature

* minor import fix

* fixing tests

* fixing tests

* added executor back to init file"
,AgnostiqHQ,covalent,doc/source/_static/quantum_tutorial.svg,"Readme file content changes (#1878)

* Readme changes

* test

* 200px

* Add styling to the divs using style tag instead of inline styles.

* readme changes

* changed executor image

* executors position chage

* added video

* Edited video name

* Edited video name

* Minor redirection fixes

* code block change and redirection fixes

* Update README.md for code block

* Redirection fixes for plugins

* Redirection for badges

* Gif changes for executor in readme

* Light Theme hero image change

* Reverting back the theme change for hero image

* Light theme changes

* Minor image name fix

* Updated README.md with introduction texts

* Redirection url change for installation

* email link changes

* asset change for tutorials

* Gif file change for executor

* Video Changes for read me content

* Image changes for readme

* Update video in readme

* Image changes for readme

* Svg image changes for readme file

* Adding line breaks

* some fixes for line breaks

* Fix for code block

* Centering changes for divs in readme

* Adding tab spaces

* code block change in readme

* Feedback changes for rearrangement of some images

* Redirection changes based on feedback

* Reducing gif size

* Resizing the executor gif

* Reducing the executor gif size

* Redirection fix

* Update README.md

* Update README.md

* [pre-commit.ci] auto fixes from pre-commit.com hooks

for more information, see https://pre-commit.ci

* Update README.md

* [pre-commit.ci] auto fixes from pre-commit.com hooks

for more information, see https://pre-commit.ci

* Update README.md

* [pre-commit.ci] auto fixes from pre-commit.com hooks

for more information, see https://pre-commit.ci

* added in deployment

* update

* update

* update

* update

* [pre-commit.ci] auto fixes from pre-commit.com hooks

for more information, see https://pre-commit.ci

* update

* update

* update

* [pre-commit.ci] auto fixes from pre-commit.com hooks

for more information, see https://pre-commit.ci

* update

* update

* update simple

* update

* update

* update

* update

* Update README.md

* updated gif

* update

* update

* update

* updated gif

* update

* Update README.md

* Update README.md

* updated changelog

---------

Co-authored-by: batchumanish <manish.batchu@psiog.com>
Co-authored-by: Prasy12 <prasanna.venkatesh@psiog.com>
Co-authored-by: batchumanish <闂傚倸鍊搁崐鐑芥嚄閸洖纾婚柕濞炬櫅绾惧潡鏌ら懖鈺冩殽婵犵鏀诲ù鐘冲sh.batchu@psiog.com闂>
Co-authored-by: batchumanish <126003896+batchumanish@users.noreply.github.com>
Co-authored-by: Santosh kumar <29346072+santoshkumarradha@users.noreply.github.com>
Co-authored-by: pre-commit-ci[bot] <66853113+pre-commit-ci[bot]@users.noreply.github.com>
Co-authored-by: Sankalp Sanand <sankalp@agnostiq.ai>"
,microsoft,qsharp-compiler,README.md,"Readme updates, vsix updates (#1632)

* Skip language server tests

* Update extension readme.

* Update title for deprecation

* Update notice text

* Fix typo

* Update repo readme

* update readme

* use https

* Revert solution change

* Revert rest of sln changes

* Update README.md

Co-authored-by: Bill Ticehurst <billti@hotmail.com>

* Update src/VSCodeExtension/README.md

Co-authored-by: Bill Ticehurst <billti@hotmail.com>

---------

Co-authored-by: Bill Ticehurst <billti@hotmail.com>"
,microsoft,qsharp-compiler,src/QsCompiler/SyntaxProcessor/CapabilityInference/CallAnalyzer.fsi,"Hardware capability problems are warnings by default (errors via option) (#1595)

* Hardware capabilities as warning. (#1554)

* Update tests to check for warnings

* Conditionally treat capability warnings as errors (alternative approach) (#1594)

* Capability Warnings as Errors - alternative approach prototype

* Updated names

* Fixed formatting

* Updated name, passing ints

* Removed temporary stuff

* Removed unneeded null

* Fixed description

* Updated SDK targets to support number list

* Added parsing of project property WarningsAsErrors

* Using parsed values

* Updated templates to include new property

* Numbers separated by semicolon, added property test

* Simple command line switch test

Co-authored-by: Dmitry Vasilevsky <dmitryv@microsoft.com>

* Added command line tests, fixed diagnose verb (#1596)

Co-authored-by: Dmitry Vasilevsky <dmitryv@microsoft.com>

* Empty commit to cause license/cla check to re-run

Co-authored-by: Andres Paz <anpaz@microsoft.com>
Co-authored-by: Stefan J. Wernli <swernli@microsoft.com>
Co-authored-by: Dmitry Vasilevsky <dmitryv@microsoft.com>"
,microsoft,qsharp-compiler,src/QsCompiler/SyntaxProcessor/CapabilityInference/TypeAnalyzer.fsi,"Hardware capability problems are warnings by default (errors via option) (#1595)

* Hardware capabilities as warning. (#1554)

* Update tests to check for warnings

* Conditionally treat capability warnings as errors (alternative approach) (#1594)

* Capability Warnings as Errors - alternative approach prototype

* Updated names

* Fixed formatting

* Updated name, passing ints

* Removed temporary stuff

* Removed unneeded null

* Fixed description

* Updated SDK targets to support number list

* Added parsing of project property WarningsAsErrors

* Using parsed values

* Updated templates to include new property

* Numbers separated by semicolon, added property test

* Simple command line switch test

Co-authored-by: Dmitry Vasilevsky <dmitryv@microsoft.com>

* Added command line tests, fixed diagnose verb (#1596)

Co-authored-by: Dmitry Vasilevsky <dmitryv@microsoft.com>

* Empty commit to cause license/cla check to re-run

Co-authored-by: Andres Paz <anpaz@microsoft.com>
Co-authored-by: Stefan J. Wernli <swernli@microsoft.com>
Co-authored-by: Dmitry Vasilevsky <dmitryv@microsoft.com>"
,microsoft,qsharp-compiler,src/QsCompiler/Tests.Compiler/TestCases/ResultComparison.qs,"Hardware capability problems are warnings by default (errors via option) (#1595)

* Hardware capabilities as warning. (#1554)

* Update tests to check for warnings

* Conditionally treat capability warnings as errors (alternative approach) (#1594)

* Capability Warnings as Errors - alternative approach prototype

* Updated names

* Fixed formatting

* Updated name, passing ints

* Removed temporary stuff

* Removed unneeded null

* Fixed description

* Updated SDK targets to support number list

* Added parsing of project property WarningsAsErrors

* Using parsed values

* Updated templates to include new property

* Numbers separated by semicolon, added property test

* Simple command line switch test

Co-authored-by: Dmitry Vasilevsky <dmitryv@microsoft.com>

* Added command line tests, fixed diagnose verb (#1596)

Co-authored-by: Dmitry Vasilevsky <dmitryv@microsoft.com>

* Empty commit to cause license/cla check to re-run

Co-authored-by: Andres Paz <anpaz@microsoft.com>
Co-authored-by: Stefan J. Wernli <swernli@microsoft.com>
Co-authored-by: Dmitry Vasilevsky <dmitryv@microsoft.com>"
,microsoft,qsharp-compiler,src/QsCompiler/Tests.Compiler/Tests.Compiler.fsproj,"Hardware capability problems are warnings by default (errors via option) (#1595)

* Hardware capabilities as warning. (#1554)

* Update tests to check for warnings

* Conditionally treat capability warnings as errors (alternative approach) (#1594)

* Capability Warnings as Errors - alternative approach prototype

* Updated names

* Fixed formatting

* Updated name, passing ints

* Removed temporary stuff

* Removed unneeded null

* Fixed description

* Updated SDK targets to support number list

* Added parsing of project property WarningsAsErrors

* Using parsed values

* Updated templates to include new property

* Numbers separated by semicolon, added property test

* Simple command line switch test

Co-authored-by: Dmitry Vasilevsky <dmitryv@microsoft.com>

* Added command line tests, fixed diagnose verb (#1596)

Co-authored-by: Dmitry Vasilevsky <dmitryv@microsoft.com>

* Empty commit to cause license/cla check to re-run

Co-authored-by: Andres Paz <anpaz@microsoft.com>
Co-authored-by: Stefan J. Wernli <swernli@microsoft.com>
Co-authored-by: Dmitry Vasilevsky <dmitryv@microsoft.com>"
,microsoft,qsharp-compiler,src/QsCompiler/Tests.Compiler/QirTests.fs,Fix QIR codegen for repeat loop with array variable (#1587)
,microsoft,qsharp-compiler,src/QsCompiler/Tests.Compiler/TestCases/QirTests/RepeatArray.ll,Fix QIR codegen for repeat loop with array variable (#1587)
,microsoft,qsharp-compiler,src/QsCompiler/Tests.Compiler/TestCases/QirTests/RepeatArray.qs,Fix QIR codegen for repeat loop with array variable (#1587)
,microsoft,qsharp-compiler,src/QsCompiler/Tests.Compiler/Tests.Compiler.fsproj,Fix QIR codegen for repeat loop with array variable (#1587)
,microsoft,qsharp-compiler,src/QsCompiler/TestTargets/Simulation/Example/Example.csproj,"Add `BigInt` string interpolation test (#1585)

* Adding BigInt string interpolation execution test

This adds an execution test that makes use of `BigInt` in string interpolation. Resolves a remaining ""todo"" in the test code.

* Use beta package to get BigInt fix"
,microsoft,qsharp-compiler,src/QsCompiler/TestTargets/Simulation/Target/Simulation.csproj,"Add `BigInt` string interpolation test (#1585)

* Adding BigInt string interpolation execution test

This adds an execution test that makes use of `BigInt` in string interpolation. Resolves a remaining ""todo"" in the test code.

* Use beta package to get BigInt fix"
,microsoft,qsharp-compiler,src/QsCompiler/Tests.Compiler/Tests.Compiler.fsproj,"Add `BigInt` string interpolation test (#1585)

* Adding BigInt string interpolation execution test

This adds an execution test that makes use of `BigInt` in string interpolation. Resolves a remaining ""todo"" in the test code.

* Use beta package to get BigInt fix"
,qiskit-community,qiskit-community-tutorials,hello_world/string_comparison.ipynb,"Merge pull request #119 from mrvee-qC-bee/master

Fix issue with circuit inverse"
,qiskit-community,qiskit-community-tutorials,hello_world/string_comparison.ipynb,"Fix issue with circuit inverse

Update code with workaround for circuit inverse for the particular implementation"
,qiskit-community,qiskit-machine-learning,.pylintdict,"Integrated quantum bayesian inference  (#717)

* Added quantum Bayesian inference

* Allowed inference with no evidence

* Passed inference test

* Passed inference test

* Works with AmplitudeProblem algorithm

* Run GroverOperator until it matches all evidence

* Quantum rejection sampling with GroverOperator

* Quantum Bayesian inference

* Started QBayesian tutorial

* QBayesian tutorial + debugging order in inference()

* Add best_qc and docs

* Added Pachinko in Tut as Bayesian network

* Bug in Pachinko game

* Add Burglary Earthquake Example

* Bug with 13 tut jupyter file

* Bug fix with 13 tut jupyter file

* Bug fix example step 5 tut 13

* Reversed index for quantum circuit variables

* Fixed QBayesian classical qubit order for query variables

* Prepared release

* Made trivial test less strict

* Fixed format errors

* Updated pylint

* Included types for dict and set for format

* Fixed spelling error from an unchanged file

* Fixed tutorial and code based on feedback

* Fixed format

* Removed shots

* Fixed format

* Adjusted format for documentation + added format result

* Added test if converged for tutorial

* Revert commit on tutorial 07

* Embedded tutorial images

* Fixed release note format

* Added images and removed base64 for images

* Added images and removed base64 for images

* Fixed documentation QBayesian

* Added Copyright 2024

* Update qiskit_machine_learning/algorithms/__init__.py

* Update releasenotes/notes/add-quantum-bayesian-inference-92c6025432d9b7e0.yaml

Co-authored-by: Steve Wood <40241007+woodsp-ibm@users.noreply.github.com>

* Update releasenotes/notes/add-quantum-bayesian-inference-92c6025432d9b7e0.yaml

Co-authored-by: Steve Wood <40241007+woodsp-ibm@users.noreply.github.com>

* Update qiskit_machine_learning/algorithms/inference/qbayesian.py

Co-authored-by: Declan Millar <declan.millar@ibm.com>

* Added tests for getter and setter

* Rerun notebook for |: 'ABCMeta' and 'NoneType'

* Added default sampler parameter

* Fixed format error release note

* Removed mutable object as a default parameter

* Fixed TypeError

---------

Co-authored-by: Peter R闂傚倸鍊风粈渚€骞栭悳er <peter.roeseler@gmail.com>
Co-authored-by: Anton Dekusar <62334182+adekusar-drl@users.noreply.github.com>
Co-authored-by: Steve Wood <40241007+woodsp-ibm@users.noreply.github.com>
Co-authored-by: M. Emre Sahin <40424147+OkuyanBoga@users.noreply.github.com>
Co-authored-by: Edoardo Altamura <38359901+edoaltamura@users.noreply.github.com>
Co-authored-by: Declan Millar <declan.millar@ibm.com>"
,qiskit-community,qiskit-machine-learning,qiskit_machine_learning/algorithms/inference/__init__.py,"Integrated quantum bayesian inference  (#717)

* Added quantum Bayesian inference

* Allowed inference with no evidence

* Passed inference test

* Passed inference test

* Works with AmplitudeProblem algorithm

* Run GroverOperator until it matches all evidence

* Quantum rejection sampling with GroverOperator

* Quantum Bayesian inference

* Started QBayesian tutorial

* QBayesian tutorial + debugging order in inference()

* Add best_qc and docs

* Added Pachinko in Tut as Bayesian network

* Bug in Pachinko game

* Add Burglary Earthquake Example

* Bug with 13 tut jupyter file

* Bug fix with 13 tut jupyter file

* Bug fix example step 5 tut 13

* Reversed index for quantum circuit variables

* Fixed QBayesian classical qubit order for query variables

* Prepared release

* Made trivial test less strict

* Fixed format errors

* Updated pylint

* Included types for dict and set for format

* Fixed spelling error from an unchanged file

* Fixed tutorial and code based on feedback

* Fixed format

* Removed shots

* Fixed format

* Adjusted format for documentation + added format result

* Added test if converged for tutorial

* Revert commit on tutorial 07

* Embedded tutorial images

* Fixed release note format

* Added images and removed base64 for images

* Added images and removed base64 for images

* Fixed documentation QBayesian

* Added Copyright 2024

* Update qiskit_machine_learning/algorithms/__init__.py

* Update releasenotes/notes/add-quantum-bayesian-inference-92c6025432d9b7e0.yaml

Co-authored-by: Steve Wood <40241007+woodsp-ibm@users.noreply.github.com>

* Update releasenotes/notes/add-quantum-bayesian-inference-92c6025432d9b7e0.yaml

Co-authored-by: Steve Wood <40241007+woodsp-ibm@users.noreply.github.com>

* Update qiskit_machine_learning/algorithms/inference/qbayesian.py

Co-authored-by: Declan Millar <declan.millar@ibm.com>

* Added tests for getter and setter

* Rerun notebook for |: 'ABCMeta' and 'NoneType'

* Added default sampler parameter

* Fixed format error release note

* Removed mutable object as a default parameter

* Fixed TypeError

---------

Co-authored-by: Peter R闂傚倸鍊风粈渚€骞栭悳er <peter.roeseler@gmail.com>
Co-authored-by: Anton Dekusar <62334182+adekusar-drl@users.noreply.github.com>
Co-authored-by: Steve Wood <40241007+woodsp-ibm@users.noreply.github.com>
Co-authored-by: M. Emre Sahin <40424147+OkuyanBoga@users.noreply.github.com>
Co-authored-by: Edoardo Altamura <38359901+edoaltamura@users.noreply.github.com>
Co-authored-by: Declan Millar <declan.millar@ibm.com>"
,qiskit-community,qiskit-machine-learning,qiskit_machine_learning/algorithms/inference/qbayesian.py,"Integrated quantum bayesian inference  (#717)

* Added quantum Bayesian inference

* Allowed inference with no evidence

* Passed inference test

* Passed inference test

* Works with AmplitudeProblem algorithm

* Run GroverOperator until it matches all evidence

* Quantum rejection sampling with GroverOperator

* Quantum Bayesian inference

* Started QBayesian tutorial

* QBayesian tutorial + debugging order in inference()

* Add best_qc and docs

* Added Pachinko in Tut as Bayesian network

* Bug in Pachinko game

* Add Burglary Earthquake Example

* Bug with 13 tut jupyter file

* Bug fix with 13 tut jupyter file

* Bug fix example step 5 tut 13

* Reversed index for quantum circuit variables

* Fixed QBayesian classical qubit order for query variables

* Prepared release

* Made trivial test less strict

* Fixed format errors

* Updated pylint

* Included types for dict and set for format

* Fixed spelling error from an unchanged file

* Fixed tutorial and code based on feedback

* Fixed format

* Removed shots

* Fixed format

* Adjusted format for documentation + added format result

* Added test if converged for tutorial

* Revert commit on tutorial 07

* Embedded tutorial images

* Fixed release note format

* Added images and removed base64 for images

* Added images and removed base64 for images

* Fixed documentation QBayesian

* Added Copyright 2024

* Update qiskit_machine_learning/algorithms/__init__.py

* Update releasenotes/notes/add-quantum-bayesian-inference-92c6025432d9b7e0.yaml

Co-authored-by: Steve Wood <40241007+woodsp-ibm@users.noreply.github.com>

* Update releasenotes/notes/add-quantum-bayesian-inference-92c6025432d9b7e0.yaml

Co-authored-by: Steve Wood <40241007+woodsp-ibm@users.noreply.github.com>

* Update qiskit_machine_learning/algorithms/inference/qbayesian.py

Co-authored-by: Declan Millar <declan.millar@ibm.com>

* Added tests for getter and setter

* Rerun notebook for |: 'ABCMeta' and 'NoneType'

* Added default sampler parameter

* Fixed format error release note

* Removed mutable object as a default parameter

* Fixed TypeError

---------

Co-authored-by: Peter R闂傚倸鍊风粈渚€骞栭悳er <peter.roeseler@gmail.com>
Co-authored-by: Anton Dekusar <62334182+adekusar-drl@users.noreply.github.com>
Co-authored-by: Steve Wood <40241007+woodsp-ibm@users.noreply.github.com>
Co-authored-by: M. Emre Sahin <40424147+OkuyanBoga@users.noreply.github.com>
Co-authored-by: Edoardo Altamura <38359901+edoaltamura@users.noreply.github.com>
Co-authored-by: Declan Millar <declan.millar@ibm.com>"
,qiskit-community,qiskit-machine-learning,releasenotes/notes/add-quantum-bayesian-inference-92c6025432d9b7e0.yaml,"Integrated quantum bayesian inference  (#717)

* Added quantum Bayesian inference

* Allowed inference with no evidence

* Passed inference test

* Passed inference test

* Works with AmplitudeProblem algorithm

* Run GroverOperator until it matches all evidence

* Quantum rejection sampling with GroverOperator

* Quantum Bayesian inference

* Started QBayesian tutorial

* QBayesian tutorial + debugging order in inference()

* Add best_qc and docs

* Added Pachinko in Tut as Bayesian network

* Bug in Pachinko game

* Add Burglary Earthquake Example

* Bug with 13 tut jupyter file

* Bug fix with 13 tut jupyter file

* Bug fix example step 5 tut 13

* Reversed index for quantum circuit variables

* Fixed QBayesian classical qubit order for query variables

* Prepared release

* Made trivial test less strict

* Fixed format errors

* Updated pylint

* Included types for dict and set for format

* Fixed spelling error from an unchanged file

* Fixed tutorial and code based on feedback

* Fixed format

* Removed shots

* Fixed format

* Adjusted format for documentation + added format result

* Added test if converged for tutorial

* Revert commit on tutorial 07

* Embedded tutorial images

* Fixed release note format

* Added images and removed base64 for images

* Added images and removed base64 for images

* Fixed documentation QBayesian

* Added Copyright 2024

* Update qiskit_machine_learning/algorithms/__init__.py

* Update releasenotes/notes/add-quantum-bayesian-inference-92c6025432d9b7e0.yaml

Co-authored-by: Steve Wood <40241007+woodsp-ibm@users.noreply.github.com>

* Update releasenotes/notes/add-quantum-bayesian-inference-92c6025432d9b7e0.yaml

Co-authored-by: Steve Wood <40241007+woodsp-ibm@users.noreply.github.com>

* Update qiskit_machine_learning/algorithms/inference/qbayesian.py

Co-authored-by: Declan Millar <declan.millar@ibm.com>

* Added tests for getter and setter

* Rerun notebook for |: 'ABCMeta' and 'NoneType'

* Added default sampler parameter

* Fixed format error release note

* Removed mutable object as a default parameter

* Fixed TypeError

---------

Co-authored-by: Peter R闂傚倸鍊风粈渚€骞栭悳er <peter.roeseler@gmail.com>
Co-authored-by: Anton Dekusar <62334182+adekusar-drl@users.noreply.github.com>
Co-authored-by: Steve Wood <40241007+woodsp-ibm@users.noreply.github.com>
Co-authored-by: M. Emre Sahin <40424147+OkuyanBoga@users.noreply.github.com>
Co-authored-by: Edoardo Altamura <38359901+edoaltamura@users.noreply.github.com>
Co-authored-by: Declan Millar <declan.millar@ibm.com>"
,qiskit-community,qiskit-machine-learning,releasenotes/notes/fix-fid_statevector_kernel-pickling-b7fa2b13a15ec9c6.yaml,"Integrated quantum bayesian inference  (#717)

* Added quantum Bayesian inference

* Allowed inference with no evidence

* Passed inference test

* Passed inference test

* Works with AmplitudeProblem algorithm

* Run GroverOperator until it matches all evidence

* Quantum rejection sampling with GroverOperator

* Quantum Bayesian inference

* Started QBayesian tutorial

* QBayesian tutorial + debugging order in inference()

* Add best_qc and docs

* Added Pachinko in Tut as Bayesian network

* Bug in Pachinko game

* Add Burglary Earthquake Example

* Bug with 13 tut jupyter file

* Bug fix with 13 tut jupyter file

* Bug fix example step 5 tut 13

* Reversed index for quantum circuit variables

* Fixed QBayesian classical qubit order for query variables

* Prepared release

* Made trivial test less strict

* Fixed format errors

* Updated pylint

* Included types for dict and set for format

* Fixed spelling error from an unchanged file

* Fixed tutorial and code based on feedback

* Fixed format

* Removed shots

* Fixed format

* Adjusted format for documentation + added format result

* Added test if converged for tutorial

* Revert commit on tutorial 07

* Embedded tutorial images

* Fixed release note format

* Added images and removed base64 for images

* Added images and removed base64 for images

* Fixed documentation QBayesian

* Added Copyright 2024

* Update qiskit_machine_learning/algorithms/__init__.py

* Update releasenotes/notes/add-quantum-bayesian-inference-92c6025432d9b7e0.yaml

Co-authored-by: Steve Wood <40241007+woodsp-ibm@users.noreply.github.com>

* Update releasenotes/notes/add-quantum-bayesian-inference-92c6025432d9b7e0.yaml

Co-authored-by: Steve Wood <40241007+woodsp-ibm@users.noreply.github.com>

* Update qiskit_machine_learning/algorithms/inference/qbayesian.py

Co-authored-by: Declan Millar <declan.millar@ibm.com>

* Added tests for getter and setter

* Rerun notebook for |: 'ABCMeta' and 'NoneType'

* Added default sampler parameter

* Fixed format error release note

* Removed mutable object as a default parameter

* Fixed TypeError

---------

Co-authored-by: Peter R闂傚倸鍊风粈渚€骞栭悳er <peter.roeseler@gmail.com>
Co-authored-by: Anton Dekusar <62334182+adekusar-drl@users.noreply.github.com>
Co-authored-by: Steve Wood <40241007+woodsp-ibm@users.noreply.github.com>
Co-authored-by: M. Emre Sahin <40424147+OkuyanBoga@users.noreply.github.com>
Co-authored-by: Edoardo Altamura <38359901+edoaltamura@users.noreply.github.com>
Co-authored-by: Declan Millar <declan.millar@ibm.com>"
,qiskit-community,qiskit-machine-learning,test/algorithms/inference/test_qbayesian.py,"Integrated quantum bayesian inference  (#717)

* Added quantum Bayesian inference

* Allowed inference with no evidence

* Passed inference test

* Passed inference test

* Works with AmplitudeProblem algorithm

* Run GroverOperator until it matches all evidence

* Quantum rejection sampling with GroverOperator

* Quantum Bayesian inference

* Started QBayesian tutorial

* QBayesian tutorial + debugging order in inference()

* Add best_qc and docs

* Added Pachinko in Tut as Bayesian network

* Bug in Pachinko game

* Add Burglary Earthquake Example

* Bug with 13 tut jupyter file

* Bug fix with 13 tut jupyter file

* Bug fix example step 5 tut 13

* Reversed index for quantum circuit variables

* Fixed QBayesian classical qubit order for query variables

* Prepared release

* Made trivial test less strict

* Fixed format errors

* Updated pylint

* Included types for dict and set for format

* Fixed spelling error from an unchanged file

* Fixed tutorial and code based on feedback

* Fixed format

* Removed shots

* Fixed format

* Adjusted format for documentation + added format result

* Added test if converged for tutorial

* Revert commit on tutorial 07

* Embedded tutorial images

* Fixed release note format

* Added images and removed base64 for images

* Added images and removed base64 for images

* Fixed documentation QBayesian

* Added Copyright 2024

* Update qiskit_machine_learning/algorithms/__init__.py

* Update releasenotes/notes/add-quantum-bayesian-inference-92c6025432d9b7e0.yaml

Co-authored-by: Steve Wood <40241007+woodsp-ibm@users.noreply.github.com>

* Update releasenotes/notes/add-quantum-bayesian-inference-92c6025432d9b7e0.yaml

Co-authored-by: Steve Wood <40241007+woodsp-ibm@users.noreply.github.com>

* Update qiskit_machine_learning/algorithms/inference/qbayesian.py

Co-authored-by: Declan Millar <declan.millar@ibm.com>

* Added tests for getter and setter

* Rerun notebook for |: 'ABCMeta' and 'NoneType'

* Added default sampler parameter

* Fixed format error release note

* Removed mutable object as a default parameter

* Fixed TypeError

---------

Co-authored-by: Peter R闂傚倸鍊风粈渚€骞栭悳er <peter.roeseler@gmail.com>
Co-authored-by: Anton Dekusar <62334182+adekusar-drl@users.noreply.github.com>
Co-authored-by: Steve Wood <40241007+woodsp-ibm@users.noreply.github.com>
Co-authored-by: M. Emre Sahin <40424147+OkuyanBoga@users.noreply.github.com>
Co-authored-by: Edoardo Altamura <38359901+edoaltamura@users.noreply.github.com>
Co-authored-by: Declan Millar <declan.millar@ibm.com>"
,qiskit-community,qiskit-machine-learning,releasenotes/notes/fix-fid_statevector_kernel-pickling-b7fa2b13a15ec9c6.yaml,"Bug/607 fidelity statevector kernel cannot be pickled (#778)

* Made fidelity_statevector_kernel picklable

Added a new param to store cache size and a custom __getstate__  and __setstate__ to handle removing and re-initliasing the lru cache during pickle/unpickling respectively.

* updated notes

* name changes

* spell corrections

* Updated description

* Added unittest for pickling

* Spelling changes

* Making error messages clearer

* Spelling -_-

* Update releasenotes/notes/fix-fid_statevector_kernel-pickling-b7fa2b13a15ec9c6.yaml

Co-authored-by: Declan Millar <declan.millar@ibm.com>

* Update .gitignore

Co-authored-by: Declan Millar <declan.millar@ibm.com>

* Update test/kernels/test_fidelity_statevector_kernel.py

Co-authored-by: Declan Millar <declan.millar@ibm.com>

* Update qiskit_machine_learning/kernels/fidelity_statevector_kernel.py

Co-authored-by: Declan Millar <declan.millar@ibm.com>

* Update test/kernels/test_fidelity_statevector_kernel.py

Co-authored-by: Declan Millar <declan.millar@ibm.com>

* Update qiskit_machine_learning/kernels/fidelity_statevector_kernel.py

Co-authored-by: Declan Millar <declan.millar@ibm.com>

* Added Any class

---------

Co-authored-by: M. Emre Sahin <40424147+OkuyanBoga@users.noreply.github.com>
Co-authored-by: Declan Millar <declan.millar@ibm.com>
Co-authored-by: Anton Dekusar <62334182+adekusar-drl@users.noreply.github.com>"
,qiskit-community,qiskit-machine-learning,qiskit_machine_learning/kernels/algorithms/quantum_kernel_trainer.py,"Added max_circuits_per_job and removed deepcopy dependency of the quantum kernel trainer fixing #701 and #600 (#772)

* Added an option for num_circuits per job for kernels to fix #701

* Updated documentation and format the style.

* Removed deepcopy dependency in quantum_kernel_trainer.py

* Added release notes

* quick fix for spell test

* Added unit tests for max_circuits_per_job

* Update fix-701-max_circuits_per_job-and-600-deepcopy-dependency-e6eda2e5b986c1be.yaml

Small release note bugfix

* Update fix-701-max_circuits_per_job-and-600-deepcopy-dependency-e6eda2e5b986c1be.yaml

* Minor modifications for the unit test

* Removed copy of TrainableKernel

---------

Co-authored-by: oscar-wallis <oscar.wallis@outlook.com>"
,qiskit-community,qiskit-machine-learning,releasenotes/notes/fix-701-max_circuits_per_job-and-600-deepcopy-dependency-e6eda2e5b986c1be.yaml,"Added max_circuits_per_job and removed deepcopy dependency of the quantum kernel trainer fixing #701 and #600 (#772)

* Added an option for num_circuits per job for kernels to fix #701

* Updated documentation and format the style.

* Removed deepcopy dependency in quantum_kernel_trainer.py

* Added release notes

* quick fix for spell test

* Added unit tests for max_circuits_per_job

* Update fix-701-max_circuits_per_job-and-600-deepcopy-dependency-e6eda2e5b986c1be.yaml

Small release note bugfix

* Update fix-701-max_circuits_per_job-and-600-deepcopy-dependency-e6eda2e5b986c1be.yaml

* Minor modifications for the unit test

* Removed copy of TrainableKernel

---------

Co-authored-by: oscar-wallis <oscar.wallis@outlook.com>"
,qiskit-community,qiskit-machine-learning,docs/tutorials/01_neural_networks.ipynb,Fix tutorials to work with Qiskit 1.0 (#769)
,qiskit-community,qiskit-machine-learning,docs/tutorials/02a_training_a_quantum_model_on_a_real_dataset.ipynb,Fix tutorials to work with Qiskit 1.0 (#769)
,qiskit-community,qiskit-machine-learning,docs/tutorials/05_torch_connector.ipynb,Fix tutorials to work with Qiskit 1.0 (#769)
,qiskit-community,qiskit-machine-learning,docs/tutorials/09_saving_and_loading_models.ipynb,Fix tutorials to work with Qiskit 1.0 (#769)
,qiskit-community,qiskit-machine-learning,docs/migration/01_migration_guide_0.5.rst,"Remove most qiskit.org links (#763)

* Remove most qiskit.org links

* Fix copyright"
,qiskit-community,qiskit-machine-learning,docs/tutorials/11_qcnn_initial_point.json,"Fix QNN for input and weights ordering (#728)

* Fix QNN for input and weights ordering

* Black

* Lint

* Update QCNN tutorial

* Add reno

* Fix draw style per #725

---------

Co-authored-by: mergify[bot] <37929162+mergify[bot]@users.noreply.github.com>"
,qiskit-community,qiskit-machine-learning,qiskit_machine_learning/neural_networks/estimator_qnn.py,"Fix QNN for input and weights ordering (#728)

* Fix QNN for input and weights ordering

* Black

* Lint

* Update QCNN tutorial

* Add reno

* Fix draw style per #725

---------

Co-authored-by: mergify[bot] <37929162+mergify[bot]@users.noreply.github.com>"
,qiskit-community,qiskit-machine-learning,qiskit_machine_learning/neural_networks/neural_network.py,"Fix QNN for input and weights ordering (#728)

* Fix QNN for input and weights ordering

* Black

* Lint

* Update QCNN tutorial

* Add reno

* Fix draw style per #725

---------

Co-authored-by: mergify[bot] <37929162+mergify[bot]@users.noreply.github.com>"
,qiskit-community,qiskit-machine-learning,qiskit_machine_learning/neural_networks/sampler_qnn.py,"Fix QNN for input and weights ordering (#728)

* Fix QNN for input and weights ordering

* Black

* Lint

* Update QCNN tutorial

* Add reno

* Fix draw style per #725

---------

Co-authored-by: mergify[bot] <37929162+mergify[bot]@users.noreply.github.com>"
,qiskit-community,qiskit-machine-learning,releasenotes/notes/fix_qnn_binding_order-74caef8a49ecffe5.yaml,"Fix QNN for input and weights ordering (#728)

* Fix QNN for input and weights ordering

* Black

* Lint

* Update QCNN tutorial

* Add reno

* Fix draw style per #725

---------

Co-authored-by: mergify[bot] <37929162+mergify[bot]@users.noreply.github.com>"
,qiskit-community,qiskit-machine-learning,test/neural_networks/test_estimator_qnn.py,"Fix QNN for input and weights ordering (#728)

* Fix QNN for input and weights ordering

* Black

* Lint

* Update QCNN tutorial

* Add reno

* Fix draw style per #725

---------

Co-authored-by: mergify[bot] <37929162+mergify[bot]@users.noreply.github.com>"
,bloomberg,quantum,quantum/quantum_task_queue.h,"Fix PR comments

* Pass TaskType to the handler
* Add TaskType::All value
* Transform TaskStateConfiguration to class

Signed-off-by: Aleksandr Dontsov <adontsov1@bloomberg.net>"
,microsoft,QuantumLibraries,Chemistry/src/DataModel/OrbitalIntegral/OrbitalIntegralExtensions.cs,"Broombridge 0.3 work (#682)

* Started work on updating to BB 0.3.

* Added v0.3 support to qdk-chem convert.

* --from 闂 --format

* Add --flatten option.

* Update magic.

* Temporarily disable test not compatible with 0.3.

* Update test to bb 0.3, remove test made irrelevant by serialization refactor.

* Disable test for loading old version.

* Use trivial symmetry for orbital 闂 fermion transform.

* Fix fourfold symmetry bugs

* Add unit test

* Update datamodel tests for v0.3

* Addressed feedback

---------

Co-authored-by: Christopher Granade <cgranade@cgranade.com>
Co-authored-by: Cassandra Granade <chgranad@microsoft.com>
Co-authored-by: Guang Hao Low <guanghaolow@gmail.com>
Co-authored-by: Dmitry Vasilevsky <dmitryv@microsoft.com>"
,microsoft,QuantumLibraries,Chemistry/src/DataModel/Serialization/Broombridge/BroombridgeDataStructurev0.1.cs,"Broombridge 0.3 work (#682)

* Started work on updating to BB 0.3.

* Added v0.3 support to qdk-chem convert.

* --from 闂 --format

* Add --flatten option.

* Update magic.

* Temporarily disable test not compatible with 0.3.

* Update test to bb 0.3, remove test made irrelevant by serialization refactor.

* Disable test for loading old version.

* Use trivial symmetry for orbital 闂 fermion transform.

* Fix fourfold symmetry bugs

* Add unit test

* Update datamodel tests for v0.3

* Addressed feedback

---------

Co-authored-by: Christopher Granade <cgranade@cgranade.com>
Co-authored-by: Cassandra Granade <chgranad@microsoft.com>
Co-authored-by: Guang Hao Low <guanghaolow@gmail.com>
Co-authored-by: Dmitry Vasilevsky <dmitryv@microsoft.com>"
,microsoft,QuantumLibraries,Chemistry/src/DataModel/Serialization/Broombridge/BroombridgeDataStructurev0.3.cs,"Broombridge 0.3 work (#682)

* Started work on updating to BB 0.3.

* Added v0.3 support to qdk-chem convert.

* --from 闂 --format

* Add --flatten option.

* Update magic.

* Temporarily disable test not compatible with 0.3.

* Update test to bb 0.3, remove test made irrelevant by serialization refactor.

* Disable test for loading old version.

* Use trivial symmetry for orbital 闂 fermion transform.

* Fix fourfold symmetry bugs

* Add unit test

* Update datamodel tests for v0.3

* Addressed feedback

---------

Co-authored-by: Christopher Granade <cgranade@cgranade.com>
Co-authored-by: Cassandra Granade <chgranad@microsoft.com>
Co-authored-by: Guang Hao Low <guanghaolow@gmail.com>
Co-authored-by: Dmitry Vasilevsky <dmitryv@microsoft.com>"
,microsoft,QuantumLibraries,Chemistry/src/Tools/ExportJW.cs,"Broombridge 0.3 work (#682)

* Started work on updating to BB 0.3.

* Added v0.3 support to qdk-chem convert.

* --from 闂 --format

* Add --flatten option.

* Update magic.

* Temporarily disable test not compatible with 0.3.

* Update test to bb 0.3, remove test made irrelevant by serialization refactor.

* Disable test for loading old version.

* Use trivial symmetry for orbital 闂 fermion transform.

* Fix fourfold symmetry bugs

* Add unit test

* Update datamodel tests for v0.3

* Addressed feedback

---------

Co-authored-by: Christopher Granade <cgranade@cgranade.com>
Co-authored-by: Cassandra Granade <chgranad@microsoft.com>
Co-authored-by: Guang Hao Low <guanghaolow@gmail.com>
Co-authored-by: Dmitry Vasilevsky <dmitryv@microsoft.com>"
,microsoft,QuantumLibraries,Chemistry/tests/DataModelTests/SerializationTests/LiQuiDTests.cs,"Broombridge 0.3 work (#682)

* Started work on updating to BB 0.3.

* Added v0.3 support to qdk-chem convert.

* --from 闂 --format

* Add --flatten option.

* Update magic.

* Temporarily disable test not compatible with 0.3.

* Update test to bb 0.3, remove test made irrelevant by serialization refactor.

* Disable test for loading old version.

* Use trivial symmetry for orbital 闂 fermion transform.

* Fix fourfold symmetry bugs

* Add unit test

* Update datamodel tests for v0.3

* Addressed feedback

---------

Co-authored-by: Christopher Granade <cgranade@cgranade.com>
Co-authored-by: Cassandra Granade <chgranad@microsoft.com>
Co-authored-by: Guang Hao Low <guanghaolow@gmail.com>
Co-authored-by: Dmitry Vasilevsky <dmitryv@microsoft.com>"
,microsoft,QuantumLibraries,Standard/src/Preparation/Mixed.qs,doc fix: matrix multiplication order for PauliY (#650)
,microsoft,QuantumLibraries,Chemistry/src/Runtime/Runtime.csproj,2022.10 Hotfix: Updated to 0.27.238334 (#643)
,microsoft,QuantumLibraries,Chemistry/tests/ChemistryTests/QSharpTests.csproj,2022.10 Hotfix: Updated to 0.27.238334 (#643)
,microsoft,QuantumLibraries,Chemistry/tests/SystemTests/SystemTests.csproj,2022.10 Hotfix: Updated to 0.27.238334 (#643)
,microsoft,QuantumLibraries,MachineLearning/src/MachineLearning.csproj,2022.10 Hotfix: Updated to 0.27.238334 (#643)
,microsoft,QuantumLibraries,MachineLearning/tests/MachineLearningTests.csproj,2022.10 Hotfix: Updated to 0.27.238334 (#643)
,microsoft,QuantumLibraries,Numerics/src/Numerics.csproj,2022.10 Hotfix: Updated to 0.27.238334 (#643)
,microsoft,QuantumLibraries,Numerics/tests/NumericsTests.csproj,2022.10 Hotfix: Updated to 0.27.238334 (#643)
,microsoft,QuantumLibraries,Standard/src/Standard.csproj,2022.10 Hotfix: Updated to 0.27.238334 (#643)
,microsoft,QuantumLibraries,Standard/tests/Standard.Tests.csproj,2022.10 Hotfix: Updated to 0.27.238334 (#643)
,microsoft,QuantumLibraries,Visualization/src/Visualization.csproj,2022.10 Hotfix: Updated to 0.27.238334 (#643)
,microsoft,QuantumLibraries,global.json,2022.10 Hotfix: Updated to 0.27.238334 (#643)
,microsoft,QuantumLibraries,Standard/src/Synthesis/ControlledOnTruthTable.qs,"Fix broken links to CNOT (#641)

The links at https://learn.microsoft.com/en-us/qsharp/api/qsharp/microsoft.quantum.synthesis.applyxcontrolledontruthtable and https://learn.microsoft.com/en-us/qsharp/api/qsharp/microsoft.quantum.synthesis.applyxcontrolledontruthtablewithcleantarget are not recognized. I guess the capitalization in the @ link has to match the capitalization in the name exactly."
,microsoft,QuantumLibraries,Standard/src/Preparation/Arbitrary.qs,"Fixes outdated example (#623)

Fixes https://github.com/microsoft/QuantumLibraries/issues/622"
,microsoft,QuantumLibraries,Standard/src/Canon/Utils/ControlledOnBitString.qs,"Fix documentation (#615)

* Fix documentation

* Temporarily disable test not compatible with 0.3.

Co-authored-by: Cassandra Granade <chgranad@microsoft.com>
Co-authored-by: Mathias Soeken <mathias.soeken@microsoft.com>"
,qojulia,QuantumOptics.jl,src/schroedinger.jl,"Promote state and time-span in `schroedinger` to the type from `H(t)*psi` (#356)

* promote time and state to type of hamiltonian

* innit

* added nansafe_mode=true preference

* use eltype instead of _get_type

* update example

* small fix

* _promote_state for Bra

* remove example folder

* promote only is detect ForwardDiff.Dual

* added ForwardDiff.jl

* add check if state of time are Dual. promote only if not Dual

* tests

* remove DiffEq.jl

* minor

* dual check test, reduce repetition, small fix

* Promote tspan to ckeck switch. Remove @time

* Delete LocalPreferences.toml

* create LocalPreferences.toml file

* Update test_ForwardDiff.jl

* Update test_ForwardDiff.jl

* Update test_ForwardDiff.jl

* use promote from DiffEqBase

* remove @time

* ~

* tol change

* reduce dt

* compare vs DiffEq, choose random seed

* change range to avoid tol issue

* rebuild state only if promoted

* modify test to impove covrage. remove test. add comments.

* add DiffEqBase to Project

* clean up AD test

* name change

* Improve coverage

* Update test_ForwardDiff.jl

* small fix

Co-authored-by: Amit Rotem <AmiRotem@amazon.com>"
,qojulia,QuantumOptics.jl,test/ForwardDiff_long_test.jl,"Promote state and time-span in `schroedinger` to the type from `H(t)*psi` (#356)

* promote time and state to type of hamiltonian

* innit

* added nansafe_mode=true preference

* use eltype instead of _get_type

* update example

* small fix

* _promote_state for Bra

* remove example folder

* promote only is detect ForwardDiff.Dual

* added ForwardDiff.jl

* add check if state of time are Dual. promote only if not Dual

* tests

* remove DiffEq.jl

* minor

* dual check test, reduce repetition, small fix

* Promote tspan to ckeck switch. Remove @time

* Delete LocalPreferences.toml

* create LocalPreferences.toml file

* Update test_ForwardDiff.jl

* Update test_ForwardDiff.jl

* Update test_ForwardDiff.jl

* use promote from DiffEqBase

* remove @time

* ~

* tol change

* reduce dt

* compare vs DiffEq, choose random seed

* change range to avoid tol issue

* rebuild state only if promoted

* modify test to impove covrage. remove test. add comments.

* add DiffEqBase to Project

* clean up AD test

* name change

* Improve coverage

* Update test_ForwardDiff.jl

* small fix

Co-authored-by: Amit Rotem <AmiRotem@amazon.com>"
,qojulia,QuantumOptics.jl,test/test_ForwardDiff.jl,"Promote state and time-span in `schroedinger` to the type from `H(t)*psi` (#356)

* promote time and state to type of hamiltonian

* innit

* added nansafe_mode=true preference

* use eltype instead of _get_type

* update example

* small fix

* _promote_state for Bra

* remove example folder

* promote only is detect ForwardDiff.Dual

* added ForwardDiff.jl

* add check if state of time are Dual. promote only if not Dual

* tests

* remove DiffEq.jl

* minor

* dual check test, reduce repetition, small fix

* Promote tspan to ckeck switch. Remove @time

* Delete LocalPreferences.toml

* create LocalPreferences.toml file

* Update test_ForwardDiff.jl

* Update test_ForwardDiff.jl

* Update test_ForwardDiff.jl

* use promote from DiffEqBase

* remove @time

* ~

* tol change

* reduce dt

* compare vs DiffEq, choose random seed

* change range to avoid tol issue

* rebuild state only if promoted

* modify test to impove covrage. remove test. add comments.

* add DiffEqBase to Project

* clean up AD test

* name change

* Improve coverage

* Update test_ForwardDiff.jl

* small fix

Co-authored-by: Amit Rotem <AmiRotem@amazon.com>"
,softwareQinc,qpp,examples/circuits/teleport_qubit_circuit.cpp,"Version 5.0 (#167)

* Update CMakeLists.txt

* Update qpp_qasm.cpp

in addition, can now display the projector onto the final state

* Update README.md

* API changes [qpp::QCircuit::]match_circuit_left/right()

Renamed to [qpp::QCircuit::]add_circuit_inplace_left/right()

* Update circuits_bind.hpp

* update cmake.yml

* Added Molmer-Sorensen Gates, tests passing, new gates untested

* No change

* Update qpp_dependencies.cmake

* typo corrected

* Update replacer.hpp

* update

* Update cmake.yml

* Update cmake.yml

* Update cmake.yml

* update

* Update qppConfig.cmake.in

* update

* Update qpp_dependencies.cmake

* Update cmake.yml

* Update CHANGES

* Update CMakeLists.txt

* code re-organization

* fixed deprecation warning

* code reorganizing

* Update CHANGES

* qpp::dirac()

* Update input_output.hpp

* Update types_bind.hpp

* refactored display manipulators

* formatting

* Update functions.hpp

* update

* Update types.hpp

* pyqpp minor refactoring

* update

* Update options.hpp

* Update traits.hpp

* update

* Create .clangd

* Delete .clangd

* updates

* Update circuits.hpp

* Update input_output.hpp

* Update types.hpp

* update

* Update circuits_bind.hpp

* update

* Update circuits_bind.hpp

* fixed measure_seq()

* Update instruments.hpp

* brackets

* tuple bindings

* update

* updated copyright

* Update options.hpp

* preparing v5.0

* Update run.sh

* Update circuits.hpp

* minor changes

* formatting

* Update circuits.cpp

* Update circuits.hpp

* Version 5.0

* updated copyright

* updated copyright

* cmake linting and formatting

* Version 5.0

---------

Co-authored-by: James Lambert <james.lambert@softwareq.ca>"
,softwareQinc,qpp,examples/circuits/teleport_qudit_circuit.cpp,"Version 5.0 (#167)

* Update CMakeLists.txt

* Update qpp_qasm.cpp

in addition, can now display the projector onto the final state

* Update README.md

* API changes [qpp::QCircuit::]match_circuit_left/right()

Renamed to [qpp::QCircuit::]add_circuit_inplace_left/right()

* Update circuits_bind.hpp

* update cmake.yml

* Added Molmer-Sorensen Gates, tests passing, new gates untested

* No change

* Update qpp_dependencies.cmake

* typo corrected

* Update replacer.hpp

* update

* Update cmake.yml

* Update cmake.yml

* Update cmake.yml

* update

* Update qppConfig.cmake.in

* update

* Update qpp_dependencies.cmake

* Update cmake.yml

* Update CHANGES

* Update CMakeLists.txt

* code re-organization

* fixed deprecation warning

* code reorganizing

* Update CHANGES

* qpp::dirac()

* Update input_output.hpp

* Update types_bind.hpp

* refactored display manipulators

* formatting

* Update functions.hpp

* update

* Update types.hpp

* pyqpp minor refactoring

* update

* Update options.hpp

* Update traits.hpp

* update

* Create .clangd

* Delete .clangd

* updates

* Update circuits.hpp

* Update input_output.hpp

* Update types.hpp

* update

* Update circuits_bind.hpp

* update

* Update circuits_bind.hpp

* fixed measure_seq()

* Update instruments.hpp

* brackets

* tuple bindings

* update

* updated copyright

* Update options.hpp

* preparing v5.0

* Update run.sh

* Update circuits.hpp

* minor changes

* formatting

* Update circuits.cpp

* Update circuits.hpp

* Version 5.0

* updated copyright

* updated copyright

* cmake linting and formatting

* Version 5.0

---------

Co-authored-by: James Lambert <james.lambert@softwareq.ca>"
,softwareQinc,qpp,examples/measurements1.cpp,"Version 5.0 (#167)

* Update CMakeLists.txt

* Update qpp_qasm.cpp

in addition, can now display the projector onto the final state

* Update README.md

* API changes [qpp::QCircuit::]match_circuit_left/right()

Renamed to [qpp::QCircuit::]add_circuit_inplace_left/right()

* Update circuits_bind.hpp

* update cmake.yml

* Added Molmer-Sorensen Gates, tests passing, new gates untested

* No change

* Update qpp_dependencies.cmake

* typo corrected

* Update replacer.hpp

* update

* Update cmake.yml

* Update cmake.yml

* Update cmake.yml

* update

* Update qppConfig.cmake.in

* update

* Update qpp_dependencies.cmake

* Update cmake.yml

* Update CHANGES

* Update CMakeLists.txt

* code re-organization

* fixed deprecation warning

* code reorganizing

* Update CHANGES

* qpp::dirac()

* Update input_output.hpp

* Update types_bind.hpp

* refactored display manipulators

* formatting

* Update functions.hpp

* update

* Update types.hpp

* pyqpp minor refactoring

* update

* Update options.hpp

* Update traits.hpp

* update

* Create .clangd

* Delete .clangd

* updates

* Update circuits.hpp

* Update input_output.hpp

* Update types.hpp

* update

* Update circuits_bind.hpp

* update

* Update circuits_bind.hpp

* fixed measure_seq()

* Update instruments.hpp

* brackets

* tuple bindings

* update

* updated copyright

* Update options.hpp

* preparing v5.0

* Update run.sh

* Update circuits.hpp

* minor changes

* formatting

* Update circuits.cpp

* Update circuits.hpp

* Version 5.0

* updated copyright

* updated copyright

* cmake linting and formatting

* Version 5.0

---------

Co-authored-by: James Lambert <james.lambert@softwareq.ca>"
,softwareQinc,qpp,examples/measurements2.cpp,"Version 5.0 (#167)

* Update CMakeLists.txt

* Update qpp_qasm.cpp

in addition, can now display the projector onto the final state

* Update README.md

* API changes [qpp::QCircuit::]match_circuit_left/right()

Renamed to [qpp::QCircuit::]add_circuit_inplace_left/right()

* Update circuits_bind.hpp

* update cmake.yml

* Added Molmer-Sorensen Gates, tests passing, new gates untested

* No change

* Update qpp_dependencies.cmake

* typo corrected

* Update replacer.hpp

* update

* Update cmake.yml

* Update cmake.yml

* Update cmake.yml

* update

* Update qppConfig.cmake.in

* update

* Update qpp_dependencies.cmake

* Update cmake.yml

* Update CHANGES

* Update CMakeLists.txt

* code re-organization

* fixed deprecation warning

* code reorganizing

* Update CHANGES

* qpp::dirac()

* Update input_output.hpp

* Update types_bind.hpp

* refactored display manipulators

* formatting

* Update functions.hpp

* update

* Update types.hpp

* pyqpp minor refactoring

* update

* Update options.hpp

* Update traits.hpp

* update

* Create .clangd

* Delete .clangd

* updates

* Update circuits.hpp

* Update input_output.hpp

* Update types.hpp

* update

* Update circuits_bind.hpp

* update

* Update circuits_bind.hpp

* fixed measure_seq()

* Update instruments.hpp

* brackets

* tuple bindings

* update

* updated copyright

* Update options.hpp

* preparing v5.0

* Update run.sh

* Update circuits.hpp

* minor changes

* formatting

* Update circuits.cpp

* Update circuits.hpp

* Version 5.0

* updated copyright

* updated copyright

* cmake linting and formatting

* Version 5.0

---------

Co-authored-by: James Lambert <james.lambert@softwareq.ca>"
,softwareQinc,qpp,examples/qasm/qpp_qasm.cpp,"Version 5.0 (#167)

* Update CMakeLists.txt

* Update qpp_qasm.cpp

in addition, can now display the projector onto the final state

* Update README.md

* API changes [qpp::QCircuit::]match_circuit_left/right()

Renamed to [qpp::QCircuit::]add_circuit_inplace_left/right()

* Update circuits_bind.hpp

* update cmake.yml

* Added Molmer-Sorensen Gates, tests passing, new gates untested

* No change

* Update qpp_dependencies.cmake

* typo corrected

* Update replacer.hpp

* update

* Update cmake.yml

* Update cmake.yml

* Update cmake.yml

* update

* Update qppConfig.cmake.in

* update

* Update qpp_dependencies.cmake

* Update cmake.yml

* Update CHANGES

* Update CMakeLists.txt

* code re-organization

* fixed deprecation warning

* code reorganizing

* Update CHANGES

* qpp::dirac()

* Update input_output.hpp

* Update types_bind.hpp

* refactored display manipulators

* formatting

* Update functions.hpp

* update

* Update types.hpp

* pyqpp minor refactoring

* update

* Update options.hpp

* Update traits.hpp

* update

* Create .clangd

* Delete .clangd

* updates

* Update circuits.hpp

* Update input_output.hpp

* Update types.hpp

* update

* Update circuits_bind.hpp

* update

* Update circuits_bind.hpp

* fixed measure_seq()

* Update instruments.hpp

* brackets

* tuple bindings

* update

* updated copyright

* Update options.hpp

* preparing v5.0

* Update run.sh

* Update circuits.hpp

* minor changes

* formatting

* Update circuits.cpp

* Update circuits.hpp

* Version 5.0

* updated copyright

* updated copyright

* cmake linting and formatting

* Version 5.0

---------

Co-authored-by: James Lambert <james.lambert@softwareq.ca>"
,softwareQinc,qpp,examples/teleport_qubit.cpp,"Version 5.0 (#167)

* Update CMakeLists.txt

* Update qpp_qasm.cpp

in addition, can now display the projector onto the final state

* Update README.md

* API changes [qpp::QCircuit::]match_circuit_left/right()

Renamed to [qpp::QCircuit::]add_circuit_inplace_left/right()

* Update circuits_bind.hpp

* update cmake.yml

* Added Molmer-Sorensen Gates, tests passing, new gates untested

* No change

* Update qpp_dependencies.cmake

* typo corrected

* Update replacer.hpp

* update

* Update cmake.yml

* Update cmake.yml

* Update cmake.yml

* update

* Update qppConfig.cmake.in

* update

* Update qpp_dependencies.cmake

* Update cmake.yml

* Update CHANGES

* Update CMakeLists.txt

* code re-organization

* fixed deprecation warning

* code reorganizing

* Update CHANGES

* qpp::dirac()

* Update input_output.hpp

* Update types_bind.hpp

* refactored display manipulators

* formatting

* Update functions.hpp

* update

* Update types.hpp

* pyqpp minor refactoring

* update

* Update options.hpp

* Update traits.hpp

* update

* Create .clangd

* Delete .clangd

* updates

* Update circuits.hpp

* Update input_output.hpp

* Update types.hpp

* update

* Update circuits_bind.hpp

* update

* Update circuits_bind.hpp

* fixed measure_seq()

* Update instruments.hpp

* brackets

* tuple bindings

* update

* updated copyright

* Update options.hpp

* preparing v5.0

* Update run.sh

* Update circuits.hpp

* minor changes

* formatting

* Update circuits.cpp

* Update circuits.hpp

* Version 5.0

* updated copyright

* updated copyright

* cmake linting and formatting

* Version 5.0

---------

Co-authored-by: James Lambert <james.lambert@softwareq.ca>"
,softwareQinc,qpp,examples/teleport_qudit.cpp,"Version 5.0 (#167)

* Update CMakeLists.txt

* Update qpp_qasm.cpp

in addition, can now display the projector onto the final state

* Update README.md

* API changes [qpp::QCircuit::]match_circuit_left/right()

Renamed to [qpp::QCircuit::]add_circuit_inplace_left/right()

* Update circuits_bind.hpp

* update cmake.yml

* Added Molmer-Sorensen Gates, tests passing, new gates untested

* No change

* Update qpp_dependencies.cmake

* typo corrected

* Update replacer.hpp

* update

* Update cmake.yml

* Update cmake.yml

* Update cmake.yml

* update

* Update qppConfig.cmake.in

* update

* Update qpp_dependencies.cmake

* Update cmake.yml

* Update CHANGES

* Update CMakeLists.txt

* code re-organization

* fixed deprecation warning

* code reorganizing

* Update CHANGES

* qpp::dirac()

* Update input_output.hpp

* Update types_bind.hpp

* refactored display manipulators

* formatting

* Update functions.hpp

* update

* Update types.hpp

* pyqpp minor refactoring

* update

* Update options.hpp

* Update traits.hpp

* update

* Create .clangd

* Delete .clangd

* updates

* Update circuits.hpp

* Update input_output.hpp

* Update types.hpp

* update

* Update circuits_bind.hpp

* update

* Update circuits_bind.hpp

* fixed measure_seq()

* Update instruments.hpp

* brackets

* tuple bindings

* update

* updated copyright

* Update options.hpp

* preparing v5.0

* Update run.sh

* Update circuits.hpp

* minor changes

* formatting

* Update circuits.cpp

* Update circuits.hpp

* Version 5.0

* updated copyright

* updated copyright

* cmake linting and formatting

* Version 5.0

---------

Co-authored-by: James Lambert <james.lambert@softwareq.ca>"
,softwareQinc,qpp,include/qpp/classes/gates.hpp,"Version 5.0 (#167)

* Update CMakeLists.txt

* Update qpp_qasm.cpp

in addition, can now display the projector onto the final state

* Update README.md

* API changes [qpp::QCircuit::]match_circuit_left/right()

Renamed to [qpp::QCircuit::]add_circuit_inplace_left/right()

* Update circuits_bind.hpp

* update cmake.yml

* Added Molmer-Sorensen Gates, tests passing, new gates untested

* No change

* Update qpp_dependencies.cmake

* typo corrected

* Update replacer.hpp

* update

* Update cmake.yml

* Update cmake.yml

* Update cmake.yml

* update

* Update qppConfig.cmake.in

* update

* Update qpp_dependencies.cmake

* Update cmake.yml

* Update CHANGES

* Update CMakeLists.txt

* code re-organization

* fixed deprecation warning

* code reorganizing

* Update CHANGES

* qpp::dirac()

* Update input_output.hpp

* Update types_bind.hpp

* refactored display manipulators

* formatting

* Update functions.hpp

* update

* Update types.hpp

* pyqpp minor refactoring

* update

* Update options.hpp

* Update traits.hpp

* update

* Create .clangd

* Delete .clangd

* updates

* Update circuits.hpp

* Update input_output.hpp

* Update types.hpp

* update

* Update circuits_bind.hpp

* update

* Update circuits_bind.hpp

* fixed measure_seq()

* Update instruments.hpp

* brackets

* tuple bindings

* update

* updated copyright

* Update options.hpp

* preparing v5.0

* Update run.sh

* Update circuits.hpp

* minor changes

* formatting

* Update circuits.cpp

* Update circuits.hpp

* Version 5.0

* updated copyright

* updated copyright

* cmake linting and formatting

* Version 5.0

---------

Co-authored-by: James Lambert <james.lambert@softwareq.ca>"
,softwareQinc,qpp,include/qpp/instruments.hpp,"Version 5.0 (#167)

* Update CMakeLists.txt

* Update qpp_qasm.cpp

in addition, can now display the projector onto the final state

* Update README.md

* API changes [qpp::QCircuit::]match_circuit_left/right()

Renamed to [qpp::QCircuit::]add_circuit_inplace_left/right()

* Update circuits_bind.hpp

* update cmake.yml

* Added Molmer-Sorensen Gates, tests passing, new gates untested

* No change

* Update qpp_dependencies.cmake

* typo corrected

* Update replacer.hpp

* update

* Update cmake.yml

* Update cmake.yml

* Update cmake.yml

* update

* Update qppConfig.cmake.in

* update

* Update qpp_dependencies.cmake

* Update cmake.yml

* Update CHANGES

* Update CMakeLists.txt

* code re-organization

* fixed deprecation warning

* code reorganizing

* Update CHANGES

* qpp::dirac()

* Update input_output.hpp

* Update types_bind.hpp

* refactored display manipulators

* formatting

* Update functions.hpp

* update

* Update types.hpp

* pyqpp minor refactoring

* update

* Update options.hpp

* Update traits.hpp

* update

* Create .clangd

* Delete .clangd

* updates

* Update circuits.hpp

* Update input_output.hpp

* Update types.hpp

* update

* Update circuits_bind.hpp

* update

* Update circuits_bind.hpp

* fixed measure_seq()

* Update instruments.hpp

* brackets

* tuple bindings

* update

* updated copyright

* Update options.hpp

* preparing v5.0

* Update run.sh

* Update circuits.hpp

* minor changes

* formatting

* Update circuits.cpp

* Update circuits.hpp

* Version 5.0

* updated copyright

* updated copyright

* cmake linting and formatting

* Version 5.0

---------

Co-authored-by: James Lambert <james.lambert@softwareq.ca>"
,softwareQinc,qpp,include/qpp/types.hpp,"Version 5.0 (#167)

* Update CMakeLists.txt

* Update qpp_qasm.cpp

in addition, can now display the projector onto the final state

* Update README.md

* API changes [qpp::QCircuit::]match_circuit_left/right()

Renamed to [qpp::QCircuit::]add_circuit_inplace_left/right()

* Update circuits_bind.hpp

* update cmake.yml

* Added Molmer-Sorensen Gates, tests passing, new gates untested

* No change

* Update qpp_dependencies.cmake

* typo corrected

* Update replacer.hpp

* update

* Update cmake.yml

* Update cmake.yml

* Update cmake.yml

* update

* Update qppConfig.cmake.in

* update

* Update qpp_dependencies.cmake

* Update cmake.yml

* Update CHANGES

* Update CMakeLists.txt

* code re-organization

* fixed deprecation warning

* code reorganizing

* Update CHANGES

* qpp::dirac()

* Update input_output.hpp

* Update types_bind.hpp

* refactored display manipulators

* formatting

* Update functions.hpp

* update

* Update types.hpp

* pyqpp minor refactoring

* update

* Update options.hpp

* Update traits.hpp

* update

* Create .clangd

* Delete .clangd

* updates

* Update circuits.hpp

* Update input_output.hpp

* Update types.hpp

* update

* Update circuits_bind.hpp

* update

* Update circuits_bind.hpp

* fixed measure_seq()

* Update instruments.hpp

* brackets

* tuple bindings

* update

* updated copyright

* Update options.hpp

* preparing v5.0

* Update run.sh

* Update circuits.hpp

* minor changes

* formatting

* Update circuits.cpp

* Update circuits.hpp

* Version 5.0

* updated copyright

* updated copyright

* cmake linting and formatting

* Version 5.0

---------

Co-authored-by: James Lambert <james.lambert@softwareq.ca>"
,softwareQinc,qpp,pyqpp/include/classes/circuits/circuits_bind.hpp,"Version 5.0 (#167)

* Update CMakeLists.txt

* Update qpp_qasm.cpp

in addition, can now display the projector onto the final state

* Update README.md

* API changes [qpp::QCircuit::]match_circuit_left/right()

Renamed to [qpp::QCircuit::]add_circuit_inplace_left/right()

* Update circuits_bind.hpp

* update cmake.yml

* Added Molmer-Sorensen Gates, tests passing, new gates untested

* No change

* Update qpp_dependencies.cmake

* typo corrected

* Update replacer.hpp

* update

* Update cmake.yml

* Update cmake.yml

* Update cmake.yml

* update

* Update qppConfig.cmake.in

* update

* Update qpp_dependencies.cmake

* Update cmake.yml

* Update CHANGES

* Update CMakeLists.txt

* code re-organization

* fixed deprecation warning

* code reorganizing

* Update CHANGES

* qpp::dirac()

* Update input_output.hpp

* Update types_bind.hpp

* refactored display manipulators

* formatting

* Update functions.hpp

* update

* Update types.hpp

* pyqpp minor refactoring

* update

* Update options.hpp

* Update traits.hpp

* update

* Create .clangd

* Delete .clangd

* updates

* Update circuits.hpp

* Update input_output.hpp

* Update types.hpp

* update

* Update circuits_bind.hpp

* update

* Update circuits_bind.hpp

* fixed measure_seq()

* Update instruments.hpp

* brackets

* tuple bindings

* update

* updated copyright

* Update options.hpp

* preparing v5.0

* Update run.sh

* Update circuits.hpp

* minor changes

* formatting

* Update circuits.cpp

* Update circuits.hpp

* Version 5.0

* updated copyright

* updated copyright

* cmake linting and formatting

* Version 5.0

---------

Co-authored-by: James Lambert <james.lambert@softwareq.ca>"
,softwareQinc,qpp,pyqpp/include/classes/gates_bind.hpp,"Version 5.0 (#167)

* Update CMakeLists.txt

* Update qpp_qasm.cpp

in addition, can now display the projector onto the final state

* Update README.md

* API changes [qpp::QCircuit::]match_circuit_left/right()

Renamed to [qpp::QCircuit::]add_circuit_inplace_left/right()

* Update circuits_bind.hpp

* update cmake.yml

* Added Molmer-Sorensen Gates, tests passing, new gates untested

* No change

* Update qpp_dependencies.cmake

* typo corrected

* Update replacer.hpp

* update

* Update cmake.yml

* Update cmake.yml

* Update cmake.yml

* update

* Update qppConfig.cmake.in

* update

* Update qpp_dependencies.cmake

* Update cmake.yml

* Update CHANGES

* Update CMakeLists.txt

* code re-organization

* fixed deprecation warning

* code reorganizing

* Update CHANGES

* qpp::dirac()

* Update input_output.hpp

* Update types_bind.hpp

* refactored display manipulators

* formatting

* Update functions.hpp

* update

* Update types.hpp

* pyqpp minor refactoring

* update

* Update options.hpp

* Update traits.hpp

* update

* Create .clangd

* Delete .clangd

* updates

* Update circuits.hpp

* Update input_output.hpp

* Update types.hpp

* update

* Update circuits_bind.hpp

* update

* Update circuits_bind.hpp

* fixed measure_seq()

* Update instruments.hpp

* brackets

* tuple bindings

* update

* updated copyright

* Update options.hpp

* preparing v5.0

* Update run.sh

* Update circuits.hpp

* minor changes

* formatting

* Update circuits.cpp

* Update circuits.hpp

* Version 5.0

* updated copyright

* updated copyright

* cmake linting and formatting

* Version 5.0

---------

Co-authored-by: James Lambert <james.lambert@softwareq.ca>"
,softwareQinc,qpp,pyqpp/include/functions_bind.hpp,"Version 5.0 (#167)

* Update CMakeLists.txt

* Update qpp_qasm.cpp

in addition, can now display the projector onto the final state

* Update README.md

* API changes [qpp::QCircuit::]match_circuit_left/right()

Renamed to [qpp::QCircuit::]add_circuit_inplace_left/right()

* Update circuits_bind.hpp

* update cmake.yml

* Added Molmer-Sorensen Gates, tests passing, new gates untested

* No change

* Update qpp_dependencies.cmake

* typo corrected

* Update replacer.hpp

* update

* Update cmake.yml

* Update cmake.yml

* Update cmake.yml

* update

* Update qppConfig.cmake.in

* update

* Update qpp_dependencies.cmake

* Update cmake.yml

* Update CHANGES

* Update CMakeLists.txt

* code re-organization

* fixed deprecation warning

* code reorganizing

* Update CHANGES

* qpp::dirac()

* Update input_output.hpp

* Update types_bind.hpp

* refactored display manipulators

* formatting

* Update functions.hpp

* update

* Update types.hpp

* pyqpp minor refactoring

* update

* Update options.hpp

* Update traits.hpp

* update

* Create .clangd

* Delete .clangd

* updates

* Update circuits.hpp

* Update input_output.hpp

* Update types.hpp

* update

* Update circuits_bind.hpp

* update

* Update circuits_bind.hpp

* fixed measure_seq()

* Update instruments.hpp

* brackets

* tuple bindings

* update

* updated copyright

* Update options.hpp

* preparing v5.0

* Update run.sh

* Update circuits.hpp

* minor changes

* formatting

* Update circuits.cpp

* Update circuits.hpp

* Version 5.0

* updated copyright

* updated copyright

* cmake linting and formatting

* Version 5.0

---------

Co-authored-by: James Lambert <james.lambert@softwareq.ca>"
,softwareQinc,qpp,unit_tests/tests/classes/circuits/circuits.cpp,"Version 5.0 (#167)

* Update CMakeLists.txt

* Update qpp_qasm.cpp

in addition, can now display the projector onto the final state

* Update README.md

* API changes [qpp::QCircuit::]match_circuit_left/right()

Renamed to [qpp::QCircuit::]add_circuit_inplace_left/right()

* Update circuits_bind.hpp

* update cmake.yml

* Added Molmer-Sorensen Gates, tests passing, new gates untested

* No change

* Update qpp_dependencies.cmake

* typo corrected

* Update replacer.hpp

* update

* Update cmake.yml

* Update cmake.yml

* Update cmake.yml

* update

* Update qppConfig.cmake.in

* update

* Update qpp_dependencies.cmake

* Update cmake.yml

* Update CHANGES

* Update CMakeLists.txt

* code re-organization

* fixed deprecation warning

* code reorganizing

* Update CHANGES

* qpp::dirac()

* Update input_output.hpp

* Update types_bind.hpp

* refactored display manipulators

* formatting

* Update functions.hpp

* update

* Update types.hpp

* pyqpp minor refactoring

* update

* Update options.hpp

* Update traits.hpp

* update

* Create .clangd

* Delete .clangd

* updates

* Update circuits.hpp

* Update input_output.hpp

* Update types.hpp

* update

* Update circuits_bind.hpp

* update

* Update circuits_bind.hpp

* fixed measure_seq()

* Update instruments.hpp

* brackets

* tuple bindings

* update

* updated copyright

* Update options.hpp

* preparing v5.0

* Update run.sh

* Update circuits.hpp

* minor changes

* formatting

* Update circuits.cpp

* Update circuits.hpp

* Version 5.0

* updated copyright

* updated copyright

* cmake linting and formatting

* Version 5.0

---------

Co-authored-by: James Lambert <james.lambert@softwareq.ca>"
,softwareQinc,qpp,unit_tests/tests/classes/circuits/engines.cpp,"Version 5.0 (#167)

* Update CMakeLists.txt

* Update qpp_qasm.cpp

in addition, can now display the projector onto the final state

* Update README.md

* API changes [qpp::QCircuit::]match_circuit_left/right()

Renamed to [qpp::QCircuit::]add_circuit_inplace_left/right()

* Update circuits_bind.hpp

* update cmake.yml

* Added Molmer-Sorensen Gates, tests passing, new gates untested

* No change

* Update qpp_dependencies.cmake

* typo corrected

* Update replacer.hpp

* update

* Update cmake.yml

* Update cmake.yml

* Update cmake.yml

* update

* Update qppConfig.cmake.in

* update

* Update qpp_dependencies.cmake

* Update cmake.yml

* Update CHANGES

* Update CMakeLists.txt

* code re-organization

* fixed deprecation warning

* code reorganizing

* Update CHANGES

* qpp::dirac()

* Update input_output.hpp

* Update types_bind.hpp

* refactored display manipulators

* formatting

* Update functions.hpp

* update

* Update types.hpp

* pyqpp minor refactoring

* update

* Update options.hpp

* Update traits.hpp

* update

* Create .clangd

* Delete .clangd

* updates

* Update circuits.hpp

* Update input_output.hpp

* Update types.hpp

* update

* Update circuits_bind.hpp

* update

* Update circuits_bind.hpp

* fixed measure_seq()

* Update instruments.hpp

* brackets

* tuple bindings

* update

* updated copyright

* Update options.hpp

* preparing v5.0

* Update run.sh

* Update circuits.hpp

* minor changes

* formatting

* Update circuits.cpp

* Update circuits.hpp

* Version 5.0

* updated copyright

* updated copyright

* cmake linting and formatting

* Version 5.0

---------

Co-authored-by: James Lambert <james.lambert@softwareq.ca>"
,softwareQinc,qpp,unit_tests/tests/classes/states.cpp,"Version 5.0 (#167)

* Update CMakeLists.txt

* Update qpp_qasm.cpp

in addition, can now display the projector onto the final state

* Update README.md

* API changes [qpp::QCircuit::]match_circuit_left/right()

Renamed to [qpp::QCircuit::]add_circuit_inplace_left/right()

* Update circuits_bind.hpp

* update cmake.yml

* Added Molmer-Sorensen Gates, tests passing, new gates untested

* No change

* Update qpp_dependencies.cmake

* typo corrected

* Update replacer.hpp

* update

* Update cmake.yml

* Update cmake.yml

* Update cmake.yml

* update

* Update qppConfig.cmake.in

* update

* Update qpp_dependencies.cmake

* Update cmake.yml

* Update CHANGES

* Update CMakeLists.txt

* code re-organization

* fixed deprecation warning

* code reorganizing

* Update CHANGES

* qpp::dirac()

* Update input_output.hpp

* Update types_bind.hpp

* refactored display manipulators

* formatting

* Update functions.hpp

* update

* Update types.hpp

* pyqpp minor refactoring

* update

* Update options.hpp

* Update traits.hpp

* update

* Create .clangd

* Delete .clangd

* updates

* Update circuits.hpp

* Update input_output.hpp

* Update types.hpp

* update

* Update circuits_bind.hpp

* update

* Update circuits_bind.hpp

* fixed measure_seq()

* Update instruments.hpp

* brackets

* tuple bindings

* update

* updated copyright

* Update options.hpp

* preparing v5.0

* Update run.sh

* Update circuits.hpp

* minor changes

* formatting

* Update circuits.cpp

* Update circuits.hpp

* Version 5.0

* updated copyright

* updated copyright

* cmake linting and formatting

* Version 5.0

---------

Co-authored-by: James Lambert <james.lambert@softwareq.ca>"
,softwareQinc,qpp,unit_tests/tests/instruments.cpp,"Version 5.0 (#167)

* Update CMakeLists.txt

* Update qpp_qasm.cpp

in addition, can now display the projector onto the final state

* Update README.md

* API changes [qpp::QCircuit::]match_circuit_left/right()

Renamed to [qpp::QCircuit::]add_circuit_inplace_left/right()

* Update circuits_bind.hpp

* update cmake.yml

* Added Molmer-Sorensen Gates, tests passing, new gates untested

* No change

* Update qpp_dependencies.cmake

* typo corrected

* Update replacer.hpp

* update

* Update cmake.yml

* Update cmake.yml

* Update cmake.yml

* update

* Update qppConfig.cmake.in

* update

* Update qpp_dependencies.cmake

* Update cmake.yml

* Update CHANGES

* Update CMakeLists.txt

* code re-organization

* fixed deprecation warning

* code reorganizing

* Update CHANGES

* qpp::dirac()

* Update input_output.hpp

* Update types_bind.hpp

* refactored display manipulators

* formatting

* Update functions.hpp

* update

* Update types.hpp

* pyqpp minor refactoring

* update

* Update options.hpp

* Update traits.hpp

* update

* Create .clangd

* Delete .clangd

* updates

* Update circuits.hpp

* Update input_output.hpp

* Update types.hpp

* update

* Update circuits_bind.hpp

* update

* Update circuits_bind.hpp

* fixed measure_seq()

* Update instruments.hpp

* brackets

* tuple bindings

* update

* updated copyright

* Update options.hpp

* preparing v5.0

* Update run.sh

* Update circuits.hpp

* minor changes

* formatting

* Update circuits.cpp

* Update circuits.hpp

* Version 5.0

* updated copyright

* updated copyright

* cmake linting and formatting

* Version 5.0

---------

Co-authored-by: James Lambert <james.lambert@softwareq.ca>"
,softwareQinc,qpp,unit_tests/tests/issues.cpp,"Version 5.0 (#167)

* Update CMakeLists.txt

* Update qpp_qasm.cpp

in addition, can now display the projector onto the final state

* Update README.md

* API changes [qpp::QCircuit::]match_circuit_left/right()

Renamed to [qpp::QCircuit::]add_circuit_inplace_left/right()

* Update circuits_bind.hpp

* update cmake.yml

* Added Molmer-Sorensen Gates, tests passing, new gates untested

* No change

* Update qpp_dependencies.cmake

* typo corrected

* Update replacer.hpp

* update

* Update cmake.yml

* Update cmake.yml

* Update cmake.yml

* update

* Update qppConfig.cmake.in

* update

* Update qpp_dependencies.cmake

* Update cmake.yml

* Update CHANGES

* Update CMakeLists.txt

* code re-organization

* fixed deprecation warning

* code reorganizing

* Update CHANGES

* qpp::dirac()

* Update input_output.hpp

* Update types_bind.hpp

* refactored display manipulators

* formatting

* Update functions.hpp

* update

* Update types.hpp

* pyqpp minor refactoring

* update

* Update options.hpp

* Update traits.hpp

* update

* Create .clangd

* Delete .clangd

* updates

* Update circuits.hpp

* Update input_output.hpp

* Update types.hpp

* update

* Update circuits_bind.hpp

* update

* Update circuits_bind.hpp

* fixed measure_seq()

* Update instruments.hpp

* brackets

* tuple bindings

* update

* updated copyright

* Update options.hpp

* preparing v5.0

* Update run.sh

* Update circuits.hpp

* minor changes

* formatting

* Update circuits.cpp

* Update circuits.hpp

* Version 5.0

* updated copyright

* updated copyright

* cmake linting and formatting

* Version 5.0

---------

Co-authored-by: James Lambert <james.lambert@softwareq.ca>"
,softwareQinc,qpp,include/classes/circuits/engines.hpp,"bugfix in qpp::QEngine::reset() (#159)

prevented setting the initial state of the engine to a custom state"
,netket,netket,docs/docs/install.md,"Update installation documentation to reflect use of MCState (#1808)

A quick fix for #1807: I have added a code which merges model and
sampler into `MCState` (following the style of some tutorials) and a
brief text description; if anything needs to be added 闂 let me know!

P.S. Also, I get 404 error for contributing guidelines, so I didn't have
a chance to get acquainted with them...

---------

Co-authored-by: Oleksii Malyshev <omalyshe@phys.ethz.ch>"
,netket,netket,test/variational/test_correct_gradient_factor.py,Fix gradients of density matrix variational states with complex parameters (#1788)
,netket,netket,CHANGELOG.md,Fix gradients of variational states with complex parameters (#1785)
,netket,netket,netket/experimental/driver/vmc_srt.py,Fix gradients of variational states with complex parameters (#1785)
,netket,netket,test/variational/test_variational.py,Fix gradients of variational states with complex parameters (#1785)
,PennyLaneAI,qml,demonstrations/tutorial_intro_amplitude_amplification.py,"Update tutorial_intro_amplitude_amplification.py (#1095)

Fixing links"
,PennyLaneAI,qml,demonstrations/tutorial_how_to_collect_mcm_stats.metadata.json,"[MCM 1/3] How-to: Statistics of mid-circuit measurements (#1066)

**Title:**
How to collect statistics of mid-circuit measurements

**Summary:**
PennyLane supports mid-circuit measurements not only to create dynamic
circuits with control flow using the measurement results, but also
supports a wide range of postprocessing options of the measured values.
This how-to explains the usage of `qml.measure` and briefly compares
`qml.defer_measurements` and `qml.dynamic_one_shot`. Then it shows how
(not) to measure qubit correlations with MCMs, and afterwards walks
through the supported postprocessing of MCM values and the allowed
return functions such as `qml.expval` or `qml.counts`.
Finally, ____ is shown as an application for obtaining statistics of
MCMs.

**Relevant references:**
N/A

**Possible Drawbacks:**
N/A

**Related GitHub Issues:**
N/A

----
If you are writing a demonstration, please answer these questions to
facilitate the marketing process.

* GOALS 闂 Why are we working on this now?

This how-to promotes mid-circuit measurement functionality in PennyLane,
which has been extended in recent releases. In particular, it contains a
comparison of the brand-new native MCM support via `dynamic_one_shot`
with `defer_measurements` and can serve to advertise this new feature.

In addition, this how-to is part of the broader goal of emphasizing MCMs
and dynamic circuits in our contents.

* AUDIENCE 闂 Who is this for?

Typical how-to audience: Fundamental concepts of measurements and
quantum computing are known, but the audience may not yet be familiar
with PennyLane's syntax for MCMs and returning their outcomes, or they
may want to consult this how-to as a reference of how to realize their
circuit with MCMs.
Anyone really with the goal of coding up a circuit that returns MCM
values can be in the audience.

* KEYWORDS 闂 What words should be included in the marketing post?

  - Mid-circuit measurements
  - Statistics
  - [optional] postprocessing


* Which of the following types of documentation is most similar to your
file?
(more details
[here](https://www.notion.so/xanaduai/Different-kinds-of-documentation-69200645fe59442991c71f9e7d8a77f8))
    
- [ ] Tutorial
- [ ] Demo
- [x] How-to

[sc-60836]

---------

Co-authored-by: Josh Izaac <josh146@gmail.com>
Co-authored-by: Guillermo Alonso-Linaje <65235481+KetpuntoG@users.noreply.github.com>"
,PennyLaneAI,qml,demonstrations/tutorial_how_to_collect_mcm_stats.py,"[MCM 1/3] How-to: Statistics of mid-circuit measurements (#1066)

**Title:**
How to collect statistics of mid-circuit measurements

**Summary:**
PennyLane supports mid-circuit measurements not only to create dynamic
circuits with control flow using the measurement results, but also
supports a wide range of postprocessing options of the measured values.
This how-to explains the usage of `qml.measure` and briefly compares
`qml.defer_measurements` and `qml.dynamic_one_shot`. Then it shows how
(not) to measure qubit correlations with MCMs, and afterwards walks
through the supported postprocessing of MCM values and the allowed
return functions such as `qml.expval` or `qml.counts`.
Finally, ____ is shown as an application for obtaining statistics of
MCMs.

**Relevant references:**
N/A

**Possible Drawbacks:**
N/A

**Related GitHub Issues:**
N/A

----
If you are writing a demonstration, please answer these questions to
facilitate the marketing process.

* GOALS 闂 Why are we working on this now?

This how-to promotes mid-circuit measurement functionality in PennyLane,
which has been extended in recent releases. In particular, it contains a
comparison of the brand-new native MCM support via `dynamic_one_shot`
with `defer_measurements` and can serve to advertise this new feature.

In addition, this how-to is part of the broader goal of emphasizing MCMs
and dynamic circuits in our contents.

* AUDIENCE 闂 Who is this for?

Typical how-to audience: Fundamental concepts of measurements and
quantum computing are known, but the audience may not yet be familiar
with PennyLane's syntax for MCMs and returning their outcomes, or they
may want to consult this how-to as a reference of how to realize their
circuit with MCMs.
Anyone really with the goal of coding up a circuit that returns MCM
values can be in the audience.

* KEYWORDS 闂 What words should be included in the marketing post?

  - Mid-circuit measurements
  - Statistics
  - [optional] postprocessing


* Which of the following types of documentation is most similar to your
file?
(more details
[here](https://www.notion.so/xanaduai/Different-kinds-of-documentation-69200645fe59442991c71f9e7d8a77f8))
    
- [ ] Tutorial
- [ ] Demo
- [x] How-to

[sc-60836]

---------

Co-authored-by: Josh Izaac <josh146@gmail.com>
Co-authored-by: Guillermo Alonso-Linaje <65235481+KetpuntoG@users.noreply.github.com>"
,PennyLaneAI,qml,demonstrations/tutorial_qft.metadata.json,"qft demo (#1048)

### Before submitting

Please complete the following checklist when submitting a PR:

- [ ] Ensure that your tutorial executes correctly, and conforms to the
      guidelines specified in the [README](../README.md).

- [ ] Remember to do a grammar check of the content you include.
- [ ] All tutorials conform to
      [PEP8 standards](https://www.python.org/dev/peps/pep-0008/).
      To auto format files, simply `pip install black`, and then
      run `black -l 100 path/to/file.py`.

When all the above are checked, delete everything above the dashed
line and fill in the pull request template.


------------------------------------------------------------------------------------------------------------

**Title:**

**Summary:**

**Relevant references:**

**Possible Drawbacks:**

**Related GitHub Issues:**

----
If you are writing a demonstration, please answer these questions to
facilitate the marketing process.

* GOALS 闂 Why are we working on this now?

*Eg. Promote a new PL feature or show a PL implementation of a recent
paper.*


* AUDIENCE 闂 Who is this for?

*Eg. Chemistry researchers, PL educators, beginners in quantum
computing.*


* KEYWORDS 闂 What words should be included in the marketing post?


* Which of the following types of documentation is most similar to your
file?
(more details
[here](https://www.notion.so/xanaduai/Different-kinds-of-documentation-69200645fe59442991c71f9e7d8a77f8))
    
- [ ] Tutorial
- [ ] Demo
- [ ] How-to

---------

Co-authored-by: ixfoduap <40441298+ixfoduap@users.noreply.github.com>
Co-authored-by: soranjh <soran.jahangiri@gmail.com>"
,PennyLaneAI,qml,demonstrations/tutorial_qft.py,"qft demo (#1048)

### Before submitting

Please complete the following checklist when submitting a PR:

- [ ] Ensure that your tutorial executes correctly, and conforms to the
      guidelines specified in the [README](../README.md).

- [ ] Remember to do a grammar check of the content you include.
- [ ] All tutorials conform to
      [PEP8 standards](https://www.python.org/dev/peps/pep-0008/).
      To auto format files, simply `pip install black`, and then
      run `black -l 100 path/to/file.py`.

When all the above are checked, delete everything above the dashed
line and fill in the pull request template.


------------------------------------------------------------------------------------------------------------

**Title:**

**Summary:**

**Relevant references:**

**Possible Drawbacks:**

**Related GitHub Issues:**

----
If you are writing a demonstration, please answer these questions to
facilitate the marketing process.

* GOALS 闂 Why are we working on this now?

*Eg. Promote a new PL feature or show a PL implementation of a recent
paper.*


* AUDIENCE 闂 Who is this for?

*Eg. Chemistry researchers, PL educators, beginners in quantum
computing.*


* KEYWORDS 闂 What words should be included in the marketing post?


* Which of the following types of documentation is most similar to your
file?
(more details
[here](https://www.notion.so/xanaduai/Different-kinds-of-documentation-69200645fe59442991c71f9e7d8a77f8))
    
- [ ] Tutorial
- [ ] Demo
- [ ] How-to

---------

Co-authored-by: ixfoduap <40441298+ixfoduap@users.noreply.github.com>
Co-authored-by: soranjh <soran.jahangiri@gmail.com>"
,PennyLaneAI,qml,demonstrations/tutorial_quantum_dropout.metadata.json,"Quantum dropout demo (#1003)

Hi! This demo request refers to [Issue
#4929](https://github.com/PennyLaneAI/pennylane/issues/4929) for
Pennylane, about implementing dropout for Quantum Neural Networks
directly in Pennylane.

------------------------------------------------------------------------------------------------------------

**Title:** 

Dropout for Quantum Neural Networks

**Summary:** 

In this demo we show how to exploit the quantum version of dropout
technique to avoid the problem of
overfitting in deep Quantum Neural Networks (QNNs). What follows is
based on the paper
闂傚倸鍊搁崐鐑芥嚄閸洖纾婚柕濞炬櫅绾惧潡鏌ら懖鈺冨幇 General Approach to Dropout in Quantum Neural Networks闂 by F. Scala,
et al.

**Relevant references:**

- [1] Scala, F., Ceschini, A., Panella, M., & Gerace, D. (2023). *A
General Approach to Dropout in Quantum Neural Networks*. [Adv. Quantum
Technol.,
2300220](https://onlinelibrary.wiley.com/doi/full/10.1002/qute.202300220)
- [2] Kiani,B. T., Lloyd, S., & Maity, R. (2020).*Learning Unitaries by
Gradient Descent*. [arXiv: 2001.11897](https://arxiv.org/abs/2001.11897)
- [3] Larocca, M., Ju, N., Garc闂傚倸鍊搁崐鐑芥倿閿曞倸纾块柟鎯版缁-Mart闂傚倸鍊搁崐鐑芥倿閿曞倸纾块柟鎯版缂, D., Coles, P. J., & Cerezo, M.
(2023). *Theory of overparametrization in quantum neural networks*.
[Nat. Comp. Science, 3,
542闂551](http://dx.doi.org/10.1038/s43588-023-00467-6)

**Possible Drawbacks:**

In this demo, to show the effectiveness of the technique, dropout is
implemented by randomly setting some of the optimized parameters to 0 at
each iteration. Actual dropout should be implemented by substituting a
certain gate with the identity gate.

**Related GitHub Issues:**

Pennyalne [Issue
#4929](https://github.com/PennyLaneAI/pennylane/issues/4929)

----
If you are writing a demonstration, please answer these questions to
facilitate the marketing process.

* GOALS 闂 Why are we working on this now?

We would like to implement dropout for QNNs directly in Pennylane,
referring to paper [1]


* AUDIENCE 闂 Who is this for?

This technique (hence this demo) is for all people interested in Quantum
Machine Learning. Both researchers and enthusiasts may benefit by
learning from this demo how to avoid overfitting when using
overparametrized QNNs. We strongly believe that it will become a
standard for QML just like its classical counterpart in ML.


* KEYWORDS 闂 What words should be included in the marketing post?

""Quantum Neural Networks"",""QNN"", ""overfitting"", ""dropout"",
""regularization""

* Which of the following types of documentation is most similar to your
file?
(more details
[here](https://www.notion.so/xanaduai/Different-kinds-of-documentation-69200645fe59442991c71f9e7d8a77f8))
    
- [ ] Tutorial
- [x] Demo
- [ ] How-to

---------

Co-authored-by: Guillermo Alonso-Linaje <65235481+KetpuntoG@users.noreply.github.com>
Co-authored-by: Josh Izaac <josh146@gmail.com>
Co-authored-by: Isaac De Vlugt <34751083+isaacdevlugt@users.noreply.github.com>"
,PennyLaneAI,qml,demonstrations/tutorial_quantum_dropout.py,"Quantum dropout demo (#1003)

Hi! This demo request refers to [Issue
#4929](https://github.com/PennyLaneAI/pennylane/issues/4929) for
Pennylane, about implementing dropout for Quantum Neural Networks
directly in Pennylane.

------------------------------------------------------------------------------------------------------------

**Title:** 

Dropout for Quantum Neural Networks

**Summary:** 

In this demo we show how to exploit the quantum version of dropout
technique to avoid the problem of
overfitting in deep Quantum Neural Networks (QNNs). What follows is
based on the paper
闂傚倸鍊搁崐鐑芥嚄閸洖纾婚柕濞炬櫅绾惧潡鏌ら懖鈺冨幇 General Approach to Dropout in Quantum Neural Networks闂 by F. Scala,
et al.

**Relevant references:**

- [1] Scala, F., Ceschini, A., Panella, M., & Gerace, D. (2023). *A
General Approach to Dropout in Quantum Neural Networks*. [Adv. Quantum
Technol.,
2300220](https://onlinelibrary.wiley.com/doi/full/10.1002/qute.202300220)
- [2] Kiani,B. T., Lloyd, S., & Maity, R. (2020).*Learning Unitaries by
Gradient Descent*. [arXiv: 2001.11897](https://arxiv.org/abs/2001.11897)
- [3] Larocca, M., Ju, N., Garc闂傚倸鍊搁崐鐑芥倿閿曞倸纾块柟鎯版缁-Mart闂傚倸鍊搁崐鐑芥倿閿曞倸纾块柟鎯版缂, D., Coles, P. J., & Cerezo, M.
(2023). *Theory of overparametrization in quantum neural networks*.
[Nat. Comp. Science, 3,
542闂551](http://dx.doi.org/10.1038/s43588-023-00467-6)

**Possible Drawbacks:**

In this demo, to show the effectiveness of the technique, dropout is
implemented by randomly setting some of the optimized parameters to 0 at
each iteration. Actual dropout should be implemented by substituting a
certain gate with the identity gate.

**Related GitHub Issues:**

Pennyalne [Issue
#4929](https://github.com/PennyLaneAI/pennylane/issues/4929)

----
If you are writing a demonstration, please answer these questions to
facilitate the marketing process.

* GOALS 闂 Why are we working on this now?

We would like to implement dropout for QNNs directly in Pennylane,
referring to paper [1]


* AUDIENCE 闂 Who is this for?

This technique (hence this demo) is for all people interested in Quantum
Machine Learning. Both researchers and enthusiasts may benefit by
learning from this demo how to avoid overfitting when using
overparametrized QNNs. We strongly believe that it will become a
standard for QML just like its classical counterpart in ML.


* KEYWORDS 闂 What words should be included in the marketing post?

""Quantum Neural Networks"",""QNN"", ""overfitting"", ""dropout"",
""regularization""

* Which of the following types of documentation is most similar to your
file?
(more details
[here](https://www.notion.so/xanaduai/Different-kinds-of-documentation-69200645fe59442991c71f9e7d8a77f8))
    
- [ ] Tutorial
- [x] Demo
- [ ] How-to

---------

Co-authored-by: Guillermo Alonso-Linaje <65235481+KetpuntoG@users.noreply.github.com>
Co-authored-by: Josh Izaac <josh146@gmail.com>
Co-authored-by: Isaac De Vlugt <34751083+isaacdevlugt@users.noreply.github.com>"
,PennyLaneAI,qml,demonstrations/tutorial_eqnn_force_field.metadata.json,"tutorial eqnn force field (#1015)

------------------------------------------------------------------------------------------------------------

**Title:**
Symmetry-invariant quantum machine learning force fields
**Summary:**
Tutorial on equivariant QML for learning energy and forces in a H2O
molecule
**Relevant references:**
https://arxiv.org/abs/2311.11362
**Possible Drawbacks:**
long to train ~10 min

**Related GitHub Issues:**

----
If you are writing a demonstration, please answer these questions to
facilitate the marketing process.

* GOALS 闂 Why are we working on this now?
implementation of a recent paper

* AUDIENCE 闂 Who is this for?
Chemistry and QML researchers


* KEYWORDS 闂 What words should be included in the marketing post?
Geometric quantum machine learning, force field

* Which of the following types of documentation is most similar to your
file?
Demos

---------

Co-authored-by: Alvaro Ballon <91897656+alvaro-at-xanadu@users.noreply.github.com>
Co-authored-by: Catalina Albornoz <albornoz.catalina@hotmail.com>
Co-authored-by: KetpuntoG <65235481+KetpuntoG@users.noreply.github.com>"
,PennyLaneAI,qml,demonstrations/tutorial_eqnn_force_field.py,"tutorial eqnn force field (#1015)

------------------------------------------------------------------------------------------------------------

**Title:**
Symmetry-invariant quantum machine learning force fields
**Summary:**
Tutorial on equivariant QML for learning energy and forces in a H2O
molecule
**Relevant references:**
https://arxiv.org/abs/2311.11362
**Possible Drawbacks:**
long to train ~10 min

**Related GitHub Issues:**

----
If you are writing a demonstration, please answer these questions to
facilitate the marketing process.

* GOALS 闂 Why are we working on this now?
implementation of a recent paper

* AUDIENCE 闂 Who is this for?
Chemistry and QML researchers


* KEYWORDS 闂 What words should be included in the marketing post?
Geometric quantum machine learning, force field

* Which of the following types of documentation is most similar to your
file?
Demos

---------

Co-authored-by: Alvaro Ballon <91897656+alvaro-at-xanadu@users.noreply.github.com>
Co-authored-by: Catalina Albornoz <albornoz.catalina@hotmail.com>
Co-authored-by: KetpuntoG <65235481+KetpuntoG@users.noreply.github.com>"
,PennyLaneAI,qml,demonstrations/tutorial_backprop.py,"Fix a bug in the backprop tutorial (#1051)

The parameter shift rule implementation was not correctly specifying the
backward shift.

Closes #1050

---------

Co-authored-by: Guillermo Alonso-Linaje <65235481+KetpuntoG@users.noreply.github.com>"
,PennyLaneAI,qml,demonstrations/tutorial_qchem_external.py,"Update Using PennyLane with PySCF and OpenFermion  (#1035)

**Title:**

**Summary:**
Updates ""Using PennyLane with PySCF and OpenFermion"" demo to use pyscf
integrals to compute a Hamiltonian. Also mentions the direct access of
`molecular_hamiltonian` to PySCF.

**Relevant references:**

**Possible Drawbacks:**

**Related GitHub Issues:**

---------

Co-authored-by: Utkarsh <utkarshazad98@gmail.com>"
,Qiskit,qiskit-aer,qiskit_aer/backends/aer_simulator.py,"Disable test shot_branching on MacOS (#2143)

* remove test_shot_branching

* disable sho_branching tests on MacOS

* fix test

* fix test

* format

* fix test_shot_branching

* fix test_runtime_parameterization"
,Qiskit,qiskit-aer,qiskit_aer/backends/plugin/aer_backend_plugin.py,"Remove qiskit aer translation stage (#2142)

This commit removes the qiskit aer translation plugin. This was added as
a workaround for a Qiskit/qiskit#11351. This has been fixed in Qiskit
since 0.45.2 and is no longer necessary. The mechanism by which the
workaround worked was unsound in practice as it was mutating the target
and also explicitly using private attributes of the Target. This is
causing real issues now as it only worked by assuming the target wasn't
shared between passmanagers which is never guaranteed. Similarly the
reliance on internal private attributes of the Target class will cause
issues in the future when the target internals change (see
Qiskit/qiskit#12292). This commit opts to remove the plugin in its
entirity as it's no longer necessary and actively causing issues with
Qiskit 1.1 and transpiling targeting aer backends with >1 circuit. As
it's private internal detail there isn't a release note.

Fixes Qiskit/qiskit#12425
Fixes #2141"
,Qiskit,qiskit-aer,setup.py,"Remove qiskit aer translation stage (#2142)

This commit removes the qiskit aer translation plugin. This was added as
a workaround for a Qiskit/qiskit#11351. This has been fixed in Qiskit
since 0.45.2 and is no longer necessary. The mechanism by which the
workaround worked was unsound in practice as it was mutating the target
and also explicitly using private attributes of the Target. This is
causing real issues now as it only worked by assuming the target wasn't
shared between passmanagers which is never guaranteed. Similarly the
reliance on internal private attributes of the Target class will cause
issues in the future when the target internals change (see
Qiskit/qiskit#12292). This commit opts to remove the plugin in its
entirity as it's no longer necessary and actively causing issues with
Qiskit 1.1 and transpiling targeting aer backends with >1 circuit. As
it's private internal detail there isn't a release note.

Fixes Qiskit/qiskit#12425
Fixes #2141"
,Qiskit,qiskit-aer,test/terra/backends/aer_simulator/test_chunk.py,fix tests for the latest Qiskit (#2138)
,Qiskit,qiskit-aer,test/terra/states/test_aer_densitymatrix.py,fix tests for the latest Qiskit (#2138)
,Qiskit,qiskit-aer,test/terra/states/test_aer_statevector.py,fix tests for the latest Qiskit (#2138)
,Qiskit,qiskit-aer,releasenotes/notes/fix_issue2084-632a829da1a8dfc5.yaml,"Fix issue 2084 again (#2119)

* Fix issue 2084 again

* format

* fix test

* fix test"
,Qiskit,qiskit-aer,test/terra/primitives/test_sampler.py,"Fix issue 2084 again (#2119)

* Fix issue 2084 again

* format

* fix test

* fix test"
,Qiskit,qiskit-aer,README.md,"Replace example in README to using primitives (#2105)

* Replace example in README to using primitives

* upgrade python version to 3.10 for github actions

* fix 3.10

* fix 3.10

* upgrade python version to 3.10 for github actions

* skip 3.8 and 3.9 for MacOS arm64

* skip 3.8 and 3.9 for MacOS arm64

* skip 3.8 and 3.9 for MacOS arm64

* replace macos-latest with macos-13

* Revert ""Replace example in README to using primitives""

This reverts commit b536563851cdd51ea1db27176004b3c151ae4cd7.

* Revert ""Revert ""Replace example in README to using primitives""""

This reverts commit 807ac6f81b8a05e543822c7df343bdc3f99dab1a.

* manually merge upstream

* add example using noise model

* remove print(result)"
,Qiskit,qiskit-aer,qiskit_aer/backends/aer_compiler.py,"Fixes for dependency issues caused by 0.14 release (#2094)

* Fixes for dependency issues

* lint

* lint

* lint

* fix release note

* fix sampler

* fix sampler

* fix sampler

* fix sampler

* remove skip cp38

* hide primitives V2 for qiskit < 1.0

* lint

* add test case for sampling measure for large stabilizer circuit

* reduce warning

* replace test case for large stabilizer with GHZ circuit

* format

* format

* convert basis_gates from list to set

* fix assemble_circuits"
,Qiskit,qiskit-aer,qiskit_aer/backends/aer_simulator.py,"Fixes for dependency issues caused by 0.14 release (#2094)

* Fixes for dependency issues

* lint

* lint

* lint

* fix release note

* fix sampler

* fix sampler

* fix sampler

* fix sampler

* remove skip cp38

* hide primitives V2 for qiskit < 1.0

* lint

* add test case for sampling measure for large stabilizer circuit

* reduce warning

* replace test case for large stabilizer with GHZ circuit

* format

* format

* convert basis_gates from list to set

* fix assemble_circuits"
,Qiskit,qiskit-aer,qiskit_aer/primitives/estimator.py,"Fixes for dependency issues caused by 0.14 release (#2094)

* Fixes for dependency issues

* lint

* lint

* lint

* fix release note

* fix sampler

* fix sampler

* fix sampler

* fix sampler

* remove skip cp38

* hide primitives V2 for qiskit < 1.0

* lint

* add test case for sampling measure for large stabilizer circuit

* reduce warning

* replace test case for large stabilizer with GHZ circuit

* format

* format

* convert basis_gates from list to set

* fix assemble_circuits"
,Qiskit,qiskit-aer,qiskit_aer/primitives/sampler.py,"Fixes for dependency issues caused by 0.14 release (#2094)

* Fixes for dependency issues

* lint

* lint

* lint

* fix release note

* fix sampler

* fix sampler

* fix sampler

* fix sampler

* remove skip cp38

* hide primitives V2 for qiskit < 1.0

* lint

* add test case for sampling measure for large stabilizer circuit

* reduce warning

* replace test case for large stabilizer with GHZ circuit

* format

* format

* convert basis_gates from list to set

* fix assemble_circuits"
,Qiskit,qiskit-aer,releasenotes/notes/fixes_dependency_issues_by0.14-da7f11cb29710f86.yaml,"Fixes for dependency issues caused by 0.14 release (#2094)

* Fixes for dependency issues

* lint

* lint

* lint

* fix release note

* fix sampler

* fix sampler

* fix sampler

* fix sampler

* remove skip cp38

* hide primitives V2 for qiskit < 1.0

* lint

* add test case for sampling measure for large stabilizer circuit

* reduce warning

* replace test case for large stabilizer with GHZ circuit

* format

* format

* convert basis_gates from list to set

* fix assemble_circuits"
,Qiskit,qiskit-aer,src/simulators/matrix_product_state/matrix_product_state.hpp,"Fixes for dependency issues caused by 0.14 release (#2094)

* Fixes for dependency issues

* lint

* lint

* lint

* fix release note

* fix sampler

* fix sampler

* fix sampler

* fix sampler

* remove skip cp38

* hide primitives V2 for qiskit < 1.0

* lint

* add test case for sampling measure for large stabilizer circuit

* reduce warning

* replace test case for large stabilizer with GHZ circuit

* format

* format

* convert basis_gates from list to set

* fix assemble_circuits"
,Qiskit,qiskit-aer,src/simulators/stabilizer/stabilizer_state.hpp,"Fixes for dependency issues caused by 0.14 release (#2094)

* Fixes for dependency issues

* lint

* lint

* lint

* fix release note

* fix sampler

* fix sampler

* fix sampler

* fix sampler

* remove skip cp38

* hide primitives V2 for qiskit < 1.0

* lint

* add test case for sampling measure for large stabilizer circuit

* reduce warning

* replace test case for large stabilizer with GHZ circuit

* format

* format

* convert basis_gates from list to set

* fix assemble_circuits"
,Qiskit,qiskit-aer,test/terra/backends/aer_simulator/test_measure.py,"Fixes for dependency issues caused by 0.14 release (#2094)

* Fixes for dependency issues

* lint

* lint

* lint

* fix release note

* fix sampler

* fix sampler

* fix sampler

* fix sampler

* remove skip cp38

* hide primitives V2 for qiskit < 1.0

* lint

* add test case for sampling measure for large stabilizer circuit

* reduce warning

* replace test case for large stabilizer with GHZ circuit

* format

* format

* convert basis_gates from list to set

* fix assemble_circuits"
,Qiskit,qiskit-aer,src/noise/noise_model.hpp,"Fix noise sampling on shot-branching (#2098)

* Fix noise sampling on shot-branching

* format

* fix runtime noise sampling

* remove copying branch

* fix batch GPU

* format

* set initial value to Op structure

* format

* format

* test

* test

* fix use of additional_ops.size()

* fix error

* fix remove_empty_branches

* test

* test

* test

* test"
,Qiskit,qiskit-aer,src/simulators/batch_shots_executor.hpp,"Fix noise sampling on shot-branching (#2098)

* Fix noise sampling on shot-branching

* format

* fix runtime noise sampling

* remove copying branch

* fix batch GPU

* format

* set initial value to Op structure

* format

* format

* test

* test

* fix use of additional_ops.size()

* fix error

* fix remove_empty_branches

* test

* test

* test

* test"
,Qiskit,qiskit-aer,src/simulators/multi_state_executor.hpp,"Fix noise sampling on shot-branching (#2098)

* Fix noise sampling on shot-branching

* format

* fix runtime noise sampling

* remove copying branch

* fix batch GPU

* format

* set initial value to Op structure

* format

* format

* test

* test

* fix use of additional_ops.size()

* fix error

* fix remove_empty_branches

* test

* test

* test

* test"
,Qiskit,qiskit-aer,src/simulators/statevector/statevector_executor.hpp,"Fix noise sampling on shot-branching (#2098)

* Fix noise sampling on shot-branching

* format

* fix runtime noise sampling

* remove copying branch

* fix batch GPU

* format

* set initial value to Op structure

* format

* format

* test

* test

* fix use of additional_ops.size()

* fix error

* fix remove_empty_branches

* test

* test

* test

* test"
,Qiskit,qiskit-aer,src/simulators/tensor_network/tensor_net_executor.hpp,"Fix noise sampling on shot-branching (#2098)

* Fix noise sampling on shot-branching

* format

* fix runtime noise sampling

* remove copying branch

* fix batch GPU

* format

* set initial value to Op structure

* format

* format

* test

* test

* fix use of additional_ops.size()

* fix error

* fix remove_empty_branches

* test

* test

* test

* test"
,Qiskit,qiskit-aer,src/transpile/fusion.hpp,"Fix noise sampling on shot-branching (#2098)

* Fix noise sampling on shot-branching

* format

* fix runtime noise sampling

* remove copying branch

* fix batch GPU

* format

* set initial value to Op structure

* format

* format

* test

* test

* fix use of additional_ops.size()

* fix error

* fix remove_empty_branches

* test

* test

* test

* test"
,Qiskit,qiskit-aer,qiskit_aer/backends/aer_compiler.py,"Fix AerCompiler to use custom pass manager to decompose control flow ops (#2095)

* Fix AerCompiler to use basis_gates built from input circuit

* use custom pass manager to decompose dontrol flow ops

* remove unused import"
,Qiskit,qiskit-aer,qiskit_aer/backends/aerbackend.py,"Fix AerCompiler to use custom pass manager to decompose control flow ops (#2095)

* Fix AerCompiler to use basis_gates built from input circuit

* use custom pass manager to decompose dontrol flow ops

* remove unused import"
,Qiskit,qiskit-aer,releasenotes/notes/fix_noise_dynamic_circuits-59c6cf0061e956a8.yaml,"Fix AerCompiler to use custom pass manager to decompose control flow ops (#2095)

* Fix AerCompiler to use basis_gates built from input circuit

* use custom pass manager to decompose dontrol flow ops

* remove unused import"
,Qiskit,qiskit-aer,qiskit_aer/primitives/__init__.py,"Implementing SamplerV2 (#2090)

* Implementing SamplerV2

* fix lint error

* fix test

* fix test

* fix test

* add options and function from_backend

* lint

* build test

* build test"
,Qiskit,qiskit-aer,qiskit_aer/primitives/estimator_v2.py,"Implementing SamplerV2 (#2090)

* Implementing SamplerV2

* fix lint error

* fix test

* fix test

* fix test

* add options and function from_backend

* lint

* build test

* build test"
,Qiskit,qiskit-aer,qiskit_aer/primitives/sampler_v2.py,"Implementing SamplerV2 (#2090)

* Implementing SamplerV2

* fix lint error

* fix test

* fix test

* fix test

* add options and function from_backend

* lint

* build test

* build test"
,Qiskit,qiskit-aer,releasenotes/notes/sampler_v2-be0fc5c29a8e2c14.yaml,"Implementing SamplerV2 (#2090)

* Implementing SamplerV2

* fix lint error

* fix test

* fix test

* fix test

* add options and function from_backend

* lint

* build test

* build test"
,Qiskit,qiskit-aer,test/terra/primitives/test_sampler_v2.py,"Implementing SamplerV2 (#2090)

* Implementing SamplerV2

* fix lint error

* fix test

* fix test

* fix test

* add options and function from_backend

* lint

* build test

* build test"
,Qiskit,qiskit-aer,releasenotes/notes/add_gpu_build_test-2a95842b524c880b.yaml,"Add build test for GPU (#2081)

* Add build test for GPU

* decrease root size

* GPU test only run for Python 3.12

* update CUDA version to 12.4

* add release note

* fix test

* fix deploy"
,Qiskit,qiskit-aer,qiskit_aer/backends/backend_utils.py,"Adding ccz gate to statevector, unitary and tensor_network  methods (#2087)

* Adding ccz gate to statevector, unitary and tensornetwork methods

* format

* Revert ""format""

This reverts commit 789c5973b56de56f8e1a47e90ee2caed88f801c6.

* fix merge"
,Qiskit,qiskit-aer,qiskit_aer/backends/statevector_simulator.py,"Adding ccz gate to statevector, unitary and tensor_network  methods (#2087)

* Adding ccz gate to statevector, unitary and tensornetwork methods

* format

* Revert ""format""

This reverts commit 789c5973b56de56f8e1a47e90ee2caed88f801c6.

* fix merge"
,Qiskit,qiskit-aer,qiskit_aer/backends/unitary_simulator.py,"Adding ccz gate to statevector, unitary and tensor_network  methods (#2087)

* Adding ccz gate to statevector, unitary and tensornetwork methods

* format

* Revert ""format""

This reverts commit 789c5973b56de56f8e1a47e90ee2caed88f801c6.

* fix merge"
,Qiskit,qiskit-aer,releasenotes/notes/support_ccz-2a1bb33ed9909a28.yaml,"Adding ccz gate to statevector, unitary and tensor_network  methods (#2087)

* Adding ccz gate to statevector, unitary and tensornetwork methods

* format

* Revert ""format""

This reverts commit 789c5973b56de56f8e1a47e90ee2caed88f801c6.

* fix merge"
,Qiskit,qiskit-aer,src/framework/operations.hpp,"Adding ccz gate to statevector, unitary and tensor_network  methods (#2087)

* Adding ccz gate to statevector, unitary and tensornetwork methods

* format

* Revert ""format""

This reverts commit 789c5973b56de56f8e1a47e90ee2caed88f801c6.

* fix merge"
,Qiskit,qiskit-aer,src/simulators/statevector/statevector_state.hpp,"Adding ccz gate to statevector, unitary and tensor_network  methods (#2087)

* Adding ccz gate to statevector, unitary and tensornetwork methods

* format

* Revert ""format""

This reverts commit 789c5973b56de56f8e1a47e90ee2caed88f801c6.

* fix merge"
,Qiskit,qiskit-aer,src/simulators/tensor_network/tensor_net_state.hpp,"Adding ccz gate to statevector, unitary and tensor_network  methods (#2087)

* Adding ccz gate to statevector, unitary and tensornetwork methods

* format

* Revert ""format""

This reverts commit 789c5973b56de56f8e1a47e90ee2caed88f801c6.

* fix merge"
,Qiskit,qiskit-aer,src/simulators/unitary/unitary_state.hpp,"Adding ccz gate to statevector, unitary and tensor_network  methods (#2087)

* Adding ccz gate to statevector, unitary and tensornetwork methods

* format

* Revert ""format""

This reverts commit 789c5973b56de56f8e1a47e90ee2caed88f801c6.

* fix merge"
,Qiskit,qiskit-aer,test/terra/backends/aer_simulator/test_standard_gates.py,"Adding ccz gate to statevector, unitary and tensor_network  methods (#2087)

* Adding ccz gate to statevector, unitary and tensornetwork methods

* format

* Revert ""format""

This reverts commit 789c5973b56de56f8e1a47e90ee2caed88f801c6.

* fix merge"
,Qiskit,qiskit-aer,qiskit_aer/aerprovider.py,"Fix name of AerSimulator generated by AerProvider (#2038)

* fix name of AerSimulator

* add test for backend name

* fix format of test

* fix for device=Thrust case

* fix aerprovider

* Remove fake backend test

---------

Co-authored-by: Matthew Treinish <mtreinish@kortar.org>
Co-authored-by: Hiroshi Horii <hhorii@users.noreply.github.com>"
,Qiskit,qiskit-aer,releasenotes/notes/fix_aer_provider_backend-fef040819407bcca.yaml,"Fix name of AerSimulator generated by AerProvider (#2038)

* fix name of AerSimulator

* add test for backend name

* fix format of test

* fix for device=Thrust case

* fix aerprovider

* Remove fake backend test

---------

Co-authored-by: Matthew Treinish <mtreinish@kortar.org>
Co-authored-by: Hiroshi Horii <hhorii@users.noreply.github.com>"
,Qiskit,qiskit-aer,test/terra/backends/test_aer_provider.py,"Fix name of AerSimulator generated by AerProvider (#2038)

* fix name of AerSimulator

* add test for backend name

* fix format of test

* fix for device=Thrust case

* fix aerprovider

* Remove fake backend test

---------

Co-authored-by: Matthew Treinish <mtreinish@kortar.org>
Co-authored-by: Hiroshi Horii <hhorii@users.noreply.github.com>"
,Qiskit,qiskit-aer,qiskit_aer/library/save_instructions/save_data.py,"Fix qiskit-aer/library/save-instructions/save_data.py (#2064)

* fix qiskit-aer/library/save-instructions/save_data.py

* Remove unsupported qiskit-ibmq-provider from docs job

The tox docs job definition was previously installing the
qiskit-ibmq-provider which is no longer supported and the project is
orphaned. This commit fixes this by removing the unnecessary dependency.

* change build wheel

* test

* test

* Revert ""change build wheel""

This reverts commit 23cdf3cb0857bf3cd95760590314710bff0d3e09.

* add use-pep517 to symengine

* add use-pep517 to symengine on Windows

* skip build test for Windows

* test

* test

* test

* test-skip windows and i686

---------

Co-authored-by: Matthew Treinish <mtreinish@kortar.org>"
,Qiskit,qiskit-aer,qiskit_aer/backends/aer_simulator.py,Fix required memory estimation for MPS (#2059)
,Qiskit,qiskit-aer,releasenotes/notes/fix_mps_required_memory_estimation-75a9bb739701046c.yaml,Fix required memory estimation for MPS (#2059)
,Qiskit,qiskit-aer,src/simulators/matrix_product_state/matrix_product_state.hpp,Fix required memory estimation for MPS (#2059)
,Qiskit,qiskit-aer,src/simulators/matrix_product_state/matrix_product_state_size_estimator.hpp,Fix required memory estimation for MPS (#2059)
,Qiskit,qiskit-aer,README.md,"Prepare for Qiskit 1.0 (#2047)

* Resolve CI dependencies in a single step and add qiskit==1.0.0rc1 job

This modifies the dependency-resolution steps to do their job in a
single step; Aer should have no dependencies pinning Qiskit, so we can
use the preferable form more eagerly.

This also adds a test run to the PR CI for Qiskit 1.0.0rc1 (or rc2, etc)
that always runs, so Aer doesn't regress.

Co-authored-by: Luciano Bello <bel@zurich.ibm.com>

* Fix test suite to work with Qiskit<1.0 and >=1.0

This commit *does not* touch the primitives, which appear to be broken
at a relatively basic level with Qiskit 1.0 - hopefully the primitives
team can fix that separately.

This modifies the test suite to work with both Qiskit 0.46 and 1.0.0rc1
simultaneously.  Unfortunately, some of the new-style fake backends
aren't in 0.46, so I just put in some import switches for my ease here.
A few tests, particularly in the noise model sections, were asserting
specific things about the properties/calibrations of Terra's fake
backends, which was quite fragile already, so in those particular cases
I replaced them with a manually constructed `Target` with properties
entirely under Aer's control.

* Run black

---------

Co-authored-by: Luciano Bello <bel@zurich.ibm.com>"
,Qiskit,qiskit-aer,test/terra/backends/aer_simulator/test_truncate.py,"Prepare for Qiskit 1.0 (#2047)

* Resolve CI dependencies in a single step and add qiskit==1.0.0rc1 job

This modifies the dependency-resolution steps to do their job in a
single step; Aer should have no dependencies pinning Qiskit, so we can
use the preferable form more eagerly.

This also adds a test run to the PR CI for Qiskit 1.0.0rc1 (or rc2, etc)
that always runs, so Aer doesn't regress.

Co-authored-by: Luciano Bello <bel@zurich.ibm.com>

* Fix test suite to work with Qiskit<1.0 and >=1.0

This commit *does not* touch the primitives, which appear to be broken
at a relatively basic level with Qiskit 1.0 - hopefully the primitives
team can fix that separately.

This modifies the test suite to work with both Qiskit 0.46 and 1.0.0rc1
simultaneously.  Unfortunately, some of the new-style fake backends
aren't in 0.46, so I just put in some import switches for my ease here.
A few tests, particularly in the noise model sections, were asserting
specific things about the properties/calibrations of Terra's fake
backends, which was quite fragile already, so in those particular cases
I replaced them with a manually constructed `Target` with properties
entirely under Aer's control.

* Run black

---------

Co-authored-by: Luciano Bello <bel@zurich.ibm.com>"
,Qiskit,qiskit-aer,test/terra/noise/test_device_models.py,"Prepare for Qiskit 1.0 (#2047)

* Resolve CI dependencies in a single step and add qiskit==1.0.0rc1 job

This modifies the dependency-resolution steps to do their job in a
single step; Aer should have no dependencies pinning Qiskit, so we can
use the preferable form more eagerly.

This also adds a test run to the PR CI for Qiskit 1.0.0rc1 (or rc2, etc)
that always runs, so Aer doesn't regress.

Co-authored-by: Luciano Bello <bel@zurich.ibm.com>

* Fix test suite to work with Qiskit<1.0 and >=1.0

This commit *does not* touch the primitives, which appear to be broken
at a relatively basic level with Qiskit 1.0 - hopefully the primitives
team can fix that separately.

This modifies the test suite to work with both Qiskit 0.46 and 1.0.0rc1
simultaneously.  Unfortunately, some of the new-style fake backends
aren't in 0.46, so I just put in some import switches for my ease here.
A few tests, particularly in the noise model sections, were asserting
specific things about the properties/calibrations of Terra's fake
backends, which was quite fragile already, so in those particular cases
I replaced them with a manually constructed `Target` with properties
entirely under Aer's control.

* Run black

---------

Co-authored-by: Luciano Bello <bel@zurich.ibm.com>"
,Qiskit,qiskit-aer,test/terra/states/test_aer_statevector.py,"Prepare for Qiskit 1.0 (#2047)

* Resolve CI dependencies in a single step and add qiskit==1.0.0rc1 job

This modifies the dependency-resolution steps to do their job in a
single step; Aer should have no dependencies pinning Qiskit, so we can
use the preferable form more eagerly.

This also adds a test run to the PR CI for Qiskit 1.0.0rc1 (or rc2, etc)
that always runs, so Aer doesn't regress.

Co-authored-by: Luciano Bello <bel@zurich.ibm.com>

* Fix test suite to work with Qiskit<1.0 and >=1.0

This commit *does not* touch the primitives, which appear to be broken
at a relatively basic level with Qiskit 1.0 - hopefully the primitives
team can fix that separately.

This modifies the test suite to work with both Qiskit 0.46 and 1.0.0rc1
simultaneously.  Unfortunately, some of the new-style fake backends
aren't in 0.46, so I just put in some import switches for my ease here.
A few tests, particularly in the noise model sections, were asserting
specific things about the properties/calibrations of Terra's fake
backends, which was quite fragile already, so in those particular cases
I replaced them with a manually constructed `Target` with properties
entirely under Aer's control.

* Run black

---------

Co-authored-by: Luciano Bello <bel@zurich.ibm.com>"
,jcmgray,quimb,tests/test_tensor/test_circuit.py,fix for CircuitMPS test
,jcmgray,quimb,docs/changelog.md,fix changelog [skip ci]
,libtangle,qcgpu,examples/bell_state.py,Fixed bugs in measurement code
,libtangle,qcgpu,qcgpu/backend.py,Fixed bugs in measurement code
,libtangle,qcgpu,examples/bernstein_vazirani.py,Fixed algorithm example
,CQCL,lambeq,docs/bibliography.rst,"training: add Rotosolve optimizer.

Resolves CQCL/lambeq#93

Co-authored-by: Ian Fan <ian.fan@quantinuum.com>
Co-authored-by: Thomas Hoffmann <thomas.hoffmann@quantinuum.com>
Co-authored-by: Dimitri Kartsaklis <dimitri.kartsaklis@quantinuum.com>"
,CQCL,lambeq,docs/notebooks.rst,"training: add Rotosolve optimizer.

Resolves CQCL/lambeq#93

Co-authored-by: Ian Fan <ian.fan@quantinuum.com>
Co-authored-by: Thomas Hoffmann <thomas.hoffmann@quantinuum.com>
Co-authored-by: Dimitri Kartsaklis <dimitri.kartsaklis@quantinuum.com>"
,CQCL,lambeq,docs/training.rst,"training: add Rotosolve optimizer.

Resolves CQCL/lambeq#93

Co-authored-by: Ian Fan <ian.fan@quantinuum.com>
Co-authored-by: Thomas Hoffmann <thomas.hoffmann@quantinuum.com>
Co-authored-by: Dimitri Kartsaklis <dimitri.kartsaklis@quantinuum.com>"
,CQCL,lambeq,lambeq/__init__.py,"training: add Rotosolve optimizer.

Resolves CQCL/lambeq#93

Co-authored-by: Ian Fan <ian.fan@quantinuum.com>
Co-authored-by: Thomas Hoffmann <thomas.hoffmann@quantinuum.com>
Co-authored-by: Dimitri Kartsaklis <dimitri.kartsaklis@quantinuum.com>"
,CQCL,lambeq,lambeq/training/__init__.py,"training: add Rotosolve optimizer.

Resolves CQCL/lambeq#93

Co-authored-by: Ian Fan <ian.fan@quantinuum.com>
Co-authored-by: Thomas Hoffmann <thomas.hoffmann@quantinuum.com>
Co-authored-by: Dimitri Kartsaklis <dimitri.kartsaklis@quantinuum.com>"
,CQCL,lambeq,lambeq/training/rotosolve_optimizer.py,"training: add Rotosolve optimizer.

Resolves CQCL/lambeq#93

Co-authored-by: Ian Fan <ian.fan@quantinuum.com>
Co-authored-by: Thomas Hoffmann <thomas.hoffmann@quantinuum.com>
Co-authored-by: Dimitri Kartsaklis <dimitri.kartsaklis@quantinuum.com>"
,CQCL,lambeq,lambeq/ansatz/base.py,"Update DisCoPy support to 1.1.3 (#89)

- replace `discopy.rigid` with `discopy.pregroup` everywhere
- replace `discopy.biclosed` with `discopy.grammar.categorial` everywhere
- Use `Diagram.decode` to account for the change in contructor signature `Diagram(inside, dom, cod)`
- update attribute names that were previously hidden, e.g. `._data` becomes `.data`
- replace diagrammatic conjugate with transpose
- swap left and right currying

Co-authored-by: Alexis Toumi <alexis@toumi.email>"
,CQCL,lambeq,lambeq/ansatz/circuit.py,"Update DisCoPy support to 1.1.3 (#89)

- replace `discopy.rigid` with `discopy.pregroup` everywhere
- replace `discopy.biclosed` with `discopy.grammar.categorial` everywhere
- Use `Diagram.decode` to account for the change in contructor signature `Diagram(inside, dom, cod)`
- update attribute names that were previously hidden, e.g. `._data` becomes `.data`
- replace diagrammatic conjugate with transpose
- swap left and right currying

Co-authored-by: Alexis Toumi <alexis@toumi.email>"
,CQCL,lambeq,lambeq/rewrite/base.py,"Update DisCoPy support to 1.1.3 (#89)

- replace `discopy.rigid` with `discopy.pregroup` everywhere
- replace `discopy.biclosed` with `discopy.grammar.categorial` everywhere
- Use `Diagram.decode` to account for the change in contructor signature `Diagram(inside, dom, cod)`
- update attribute names that were previously hidden, e.g. `._data` becomes `.data`
- replace diagrammatic conjugate with transpose
- swap left and right currying

Co-authored-by: Alexis Toumi <alexis@toumi.email>"
,CQCL,lambeq,lambeq/training/pennylane_model.py,"Update DisCoPy support to 1.1.3 (#89)

- replace `discopy.rigid` with `discopy.pregroup` everywhere
- replace `discopy.biclosed` with `discopy.grammar.categorial` everywhere
- Use `Diagram.decode` to account for the change in contructor signature `Diagram(inside, dom, cod)`
- update attribute names that were previously hidden, e.g. `._data` becomes `.data`
- replace diagrammatic conjugate with transpose
- swap left and right currying

Co-authored-by: Alexis Toumi <alexis@toumi.email>"
,CQCL,lambeq,tests/test_circuit.py,"Update DisCoPy support to 1.1.3 (#89)

- replace `discopy.rigid` with `discopy.pregroup` everywhere
- replace `discopy.biclosed` with `discopy.grammar.categorial` everywhere
- Use `Diagram.decode` to account for the change in contructor signature `Diagram(inside, dom, cod)`
- update attribute names that were previously hidden, e.g. `._data` becomes `.data`
- replace diagrammatic conjugate with transpose
- swap left and right currying

Co-authored-by: Alexis Toumi <alexis@toumi.email>"
,CQCL,lambeq,tests/text2diagram/test_reader.py,"Update DisCoPy support to 1.1.3 (#89)

- replace `discopy.rigid` with `discopy.pregroup` everywhere
- replace `discopy.biclosed` with `discopy.grammar.categorial` everywhere
- Use `Diagram.decode` to account for the change in contructor signature `Diagram(inside, dom, cod)`
- update attribute names that were previously hidden, e.g. `._data` becomes `.data`
- replace diagrammatic conjugate with transpose
- swap left and right currying

Co-authored-by: Alexis Toumi <alexis@toumi.email>"
,CQCL,lambeq,tests/training/test_model.py,"Update DisCoPy support to 1.1.3 (#89)

- replace `discopy.rigid` with `discopy.pregroup` everywhere
- replace `discopy.biclosed` with `discopy.grammar.categorial` everywhere
- Use `Diagram.decode` to account for the change in contructor signature `Diagram(inside, dom, cod)`
- update attribute names that were previously hidden, e.g. `._data` becomes `.data`
- replace diagrammatic conjugate with transpose
- swap left and right currying

Co-authored-by: Alexis Toumi <alexis@toumi.email>"
,CQCL,lambeq,tests/training/test_pennylane_model.py,"Update DisCoPy support to 1.1.3 (#89)

- replace `discopy.rigid` with `discopy.pregroup` everywhere
- replace `discopy.biclosed` with `discopy.grammar.categorial` everywhere
- Use `Diagram.decode` to account for the change in contructor signature `Diagram(inside, dom, cod)`
- update attribute names that were previously hidden, e.g. `._data` becomes `.data`
- replace diagrammatic conjugate with transpose
- swap left and right currying

Co-authored-by: Alexis Toumi <alexis@toumi.email>"
,CQCL,lambeq,tests/training/test_pytorch_trainer.py,"Update DisCoPy support to 1.1.3 (#89)

- replace `discopy.rigid` with `discopy.pregroup` everywhere
- replace `discopy.biclosed` with `discopy.grammar.categorial` everywhere
- Use `Diagram.decode` to account for the change in contructor signature `Diagram(inside, dom, cod)`
- update attribute names that were previously hidden, e.g. `._data` becomes `.data`
- replace diagrammatic conjugate with transpose
- swap left and right currying

Co-authored-by: Alexis Toumi <alexis@toumi.email>"
,CQCL,lambeq,tests/training/test_spsa_optimizer.py,"Update DisCoPy support to 1.1.3 (#89)

- replace `discopy.rigid` with `discopy.pregroup` everywhere
- replace `discopy.biclosed` with `discopy.grammar.categorial` everywhere
- Use `Diagram.decode` to account for the change in contructor signature `Diagram(inside, dom, cod)`
- update attribute names that were previously hidden, e.g. `._data` becomes `.data`
- replace diagrammatic conjugate with transpose
- swap left and right currying

Co-authored-by: Alexis Toumi <alexis@toumi.email>"
,CQCL,lambeq,tests/training/test_tket_model.py,"Update DisCoPy support to 1.1.3 (#89)

- replace `discopy.rigid` with `discopy.pregroup` everywhere
- replace `discopy.biclosed` with `discopy.grammar.categorial` everywhere
- Use `Diagram.decode` to account for the change in contructor signature `Diagram(inside, dom, cod)`
- update attribute names that were previously hidden, e.g. `._data` becomes `.data`
- replace diagrammatic conjugate with transpose
- swap left and right currying

Co-authored-by: Alexis Toumi <alexis@toumi.email>"
,qulacs,qulacs,src/gpusim/memory_ops_device_functions.h,fix prototype decl of init_rnd
,microsoft,Reference-Guide-For-Quantum-Computing-A-Microsoft-Garage-Project,2-Quantum_Algorithms/4-Grover_s_Algorithm.ipynb,"Merge pull request #16 from ijralanil/fix-mean-calculation

Fix mean calculation"
,microsoft,Reference-Guide-For-Quantum-Computing-A-Microsoft-Garage-Project,2-Quantum_Algorithms/4-Grover_s_Algorithm.ipynb,"Fix mean calculation

Fixed the mean calculation for |101>"
,microsoft,Reference-Guide-For-Quantum-Computing-A-Microsoft-Garage-Project,QuantumComputingViaQSharpSolution/06_Demo H/Program.qs,quirk link fix
,microsoft,Reference-Guide-For-Quantum-Computing-A-Microsoft-Garage-Project,QuantumComputingViaQSharpSolution/12_Demo CNOT/Program.qs,quirk link fix
,microsoft,Reference-Guide-For-Quantum-Computing-A-Microsoft-Garage-Project,QuantumComputingViaQSharpSolution/14_Demo ApplyToEach-Controlled X-ControlledOnBitString/Program.qs,quirk link fix
,microsoft,Reference-Guide-For-Quantum-Computing-A-Microsoft-Garage-Project,QuantumComputingViaQSharpSolution/16_Demo bool-result-int-conversions/Program.qs,quirk link fix
,microsoft,Reference-Guide-For-Quantum-Computing-A-Microsoft-Garage-Project,QuantumComputingViaQSharpSolution/18_Demo Rotations/Program.qs,quirk link fix
,microsoft,Reference-Guide-For-Quantum-Computing-A-Microsoft-Garage-Project,QuantumComputingViaQSharpSolution/20_Demo Teleportation/Program.qs,quirk link fix
,microsoft,Reference-Guide-For-Quantum-Computing-A-Microsoft-Garage-Project,QuantumComputingViaQSharpSolution/24_Demo Quantm Circuit for Entangled Addition/Program.qs,quirk link fix
,microsoft,Reference-Guide-For-Quantum-Computing-A-Microsoft-Garage-Project,QuantumComputingViaQSharpSolution/26_Demo Deutsch_Jozsa algorithm/Program.qs,quirk link fix
,microsoft,Reference-Guide-For-Quantum-Computing-A-Microsoft-Garage-Project,1-Basic_Quantum_Concepts/1-States.ipynb,fixing broken URLs in 1-States.ipynb
,NVIDIA,cuda-quantum,python/tests/kernel/test_kernel_features.py,"[Bug-fix] [Python] Correctly handle 'break' within nested loops (#1693)

* Fix for issue#1682
* The 'break' statement visitor in Python AST bridge did not account for multiple nested loops
* Also fixed the same issue for 'continue' statement"
,NVIDIA,cuda-quantum,include/cudaq/Optimizer/CodeGen/CodeGenOps.td,"[CodeGen] Add a codegen dialect. (#1659)

Having a special purpose codegen dialect is very useful for when some
patterns in the IR need to be resolved into a single ""macro op""
immediately prior to code gen. This can happen when several primitive
operations need to be matched as a subgraph and replaced collectively as
a call to, say, a runtime helper function. This approach can greatly
simplify code gen proper and eliminate the injection of MLIR's
unrealized cast operations."
,NVIDIA,cuda-quantum,include/cudaq/Optimizer/CodeGen/Passes.h,"[CodeGen] Add a codegen dialect. (#1659)

Having a special purpose codegen dialect is very useful for when some
patterns in the IR need to be resolved into a single ""macro op""
immediately prior to code gen. This can happen when several primitive
operations need to be matched as a subgraph and replaced collectively as
a call to, say, a runtime helper function. This approach can greatly
simplify code gen proper and eliminate the injection of MLIR's
unrealized cast operations."
,NVIDIA,cuda-quantum,include/cudaq/Optimizer/CodeGen/Passes.td,"[CodeGen] Add a codegen dialect. (#1659)

Having a special purpose codegen dialect is very useful for when some
patterns in the IR need to be resolved into a single ""macro op""
immediately prior to code gen. This can happen when several primitive
operations need to be matched as a subgraph and replaced collectively as
a call to, say, a runtime helper function. This approach can greatly
simplify code gen proper and eliminate the injection of MLIR's
unrealized cast operations."
,NVIDIA,cuda-quantum,lib/Optimizer/CodeGen/CodeGenDialect.h,"[CodeGen] Add a codegen dialect. (#1659)

Having a special purpose codegen dialect is very useful for when some
patterns in the IR need to be resolved into a single ""macro op""
immediately prior to code gen. This can happen when several primitive
operations need to be matched as a subgraph and replaced collectively as
a call to, say, a runtime helper function. This approach can greatly
simplify code gen proper and eliminate the injection of MLIR's
unrealized cast operations."
,NVIDIA,cuda-quantum,lib/Optimizer/CodeGen/ConvertToQIR.cpp,"[CodeGen] Add a codegen dialect. (#1659)

Having a special purpose codegen dialect is very useful for when some
patterns in the IR need to be resolved into a single ""macro op""
immediately prior to code gen. This can happen when several primitive
operations need to be matched as a subgraph and replaced collectively as
a call to, say, a runtime helper function. This approach can greatly
simplify code gen proper and eliminate the injection of MLIR's
unrealized cast operations."
,NVIDIA,cuda-quantum,lib/Optimizer/CodeGen/Passes.cpp,"[CodeGen] Add a codegen dialect. (#1659)

Having a special purpose codegen dialect is very useful for when some
patterns in the IR need to be resolved into a single ""macro op""
immediately prior to code gen. This can happen when several primitive
operations need to be matched as a subgraph and replaced collectively as
a call to, say, a runtime helper function. This approach can greatly
simplify code gen proper and eliminate the injection of MLIR's
unrealized cast operations."
,NVIDIA,cuda-quantum,python/cudaq/kernel/kernel_builder.py,"[CodeGen] Add a codegen dialect. (#1659)

Having a special purpose codegen dialect is very useful for when some
patterns in the IR need to be resolved into a single ""macro op""
immediately prior to code gen. This can happen when several primitive
operations need to be matched as a subgraph and replaced collectively as
a call to, say, a runtime helper function. This approach can greatly
simplify code gen proper and eliminate the injection of MLIR's
unrealized cast operations."
,NVIDIA,cuda-quantum,python/runtime/mlir/py_register_dialects.cpp,"[CodeGen] Add a codegen dialect. (#1659)

Having a special purpose codegen dialect is very useful for when some
patterns in the IR need to be resolved into a single ""macro op""
immediately prior to code gen. This can happen when several primitive
operations need to be matched as a subgraph and replaced collectively as
a call to, say, a runtime helper function. This approach can greatly
simplify code gen proper and eliminate the injection of MLIR's
unrealized cast operations."
,NVIDIA,cuda-quantum,runtime/common/RuntimeMLIR.cpp,"[CodeGen] Add a codegen dialect. (#1659)

Having a special purpose codegen dialect is very useful for when some
patterns in the IR need to be resolved into a single ""macro op""
immediately prior to code gen. This can happen when several primitive
operations need to be matched as a subgraph and replaced collectively as
a call to, say, a runtime helper function. This approach can greatly
simplify code gen proper and eliminate the injection of MLIR's
unrealized cast operations."
,NVIDIA,cuda-quantum,docs/sphinx/examples/python/tutorials/multi_gpu_workflows.ipynb,"Publishing fixes for single-GPU runner (#1672)

Co-authored-by: Bettina Heim <heimb@outlook.com>"
,NVIDIA,cuda-quantum,python/tests/mlir/target/conditional_sample.py,"[Python AST] Always perform unsigned extension for i1 (bool) type when doing integer compare (#1654)

* Fixed https://github.com/NVIDIA/cuda-quantum/issues/1620

* Fix spell check

* Use cc.CastOp rather than arith.Ext

* Update python/cudaq/kernel/ast_bridge.py

Co-authored-by: Eric Schweitz <eschweitz@nvidia.com>

* Python code format + apply the recommended change  for the second place

---------

Co-authored-by: Eric Schweitz <eschweitz@nvidia.com>"
,NVIDIA,cuda-quantum,python/cudaq/kernel/ast_bridge.py,"[Fix] [Python] Enable 'reset' in Python kernel mode (#1649)

* Addresses issue captured in #1622
 -  Update documentation to a valid running code snippet
 -  Add comment explaining the terms in 'ExtractRefOp'
 - Addressing review comment - added explicit type check for the target

---------
Co-authored-by: Eric Schweitz <eschweitz@nvidia.com>"
,NVIDIA,cuda-quantum,python/tests/kernel/test_kernel_features.py,"[Fix] [Python] Enable 'reset' in Python kernel mode (#1649)

* Addresses issue captured in #1622
 -  Update documentation to a valid running code snippet
 -  Add comment explaining the terms in 'ExtractRefOp'
 - Addressing review comment - added explicit type check for the target

---------
Co-authored-by: Eric Schweitz <eschweitz@nvidia.com>"
,NVIDIA,cuda-quantum,docs/sphinx/examples/python/advanced_vqe.py,fixing advanced vqe example by removing the shot counts parameter in the cudaq.observe function (#1629)
,qosf,monthly-challenges,challenge-2021.07-jul/challenge-2021.07-jul.ipynb,"July 2021 Challenge (#42)

* challenge-09 (#41)

* Batch rename folders / files to new monthly naming scheme; Update latest challenge

* Fix broken link

Co-authored-by: Diego Emilio Serrano <65074936+diemilio@users.noreply.github.com>"
,QuEST-Kit,QuEST,QuEST/include/QuEST.h,fixed automatic workspace memory
,QuEST-Kit,QuEST,tests/test_decoherence.cpp,"added unit-test init-state check

Before each unit test, the initial state of the registers (assumed to be in the result of initDebugState) is now explicitly checked.

This prevents passing tests when initDebugState() itself is failing, and (for example) yielding an all-zero state which sneakily satisfies some unit tests.

This will likely noticeably increase the total unit-tests runtime, but will gaurantee tests visibly, instantly fail when (for example) the GPU configuration is wrong and produces all-zero states"
,QuEST-Kit,QuEST,tests/test_operators.cpp,"added unit-test init-state check

Before each unit test, the initial state of the registers (assumed to be in the result of initDebugState) is now explicitly checked.

This prevents passing tests when initDebugState() itself is failing, and (for example) yielding an all-zero state which sneakily satisfies some unit tests.

This will likely noticeably increase the total unit-tests runtime, but will gaurantee tests visibly, instantly fail when (for example) the GPU configuration is wrong and produces all-zero states"
,QuEST-Kit,QuEST,tests/test_unitaries.cpp,"added unit-test init-state check

Before each unit test, the initial state of the registers (assumed to be in the result of initDebugState) is now explicitly checked.

This prevents passing tests when initDebugState() itself is failing, and (for example) yielding an all-zero state which sneakily satisfies some unit tests.

This will likely noticeably increase the total unit-tests runtime, but will gaurantee tests visibly, instantly fail when (for example) the GPU configuration is wrong and produces all-zero states"
,QuEST-Kit,QuEST,tests/utilities.cpp,"added unit-test init-state check

Before each unit test, the initial state of the registers (assumed to be in the result of initDebugState) is now explicitly checked.

This prevents passing tests when initDebugState() itself is failing, and (for example) yielding an all-zero state which sneakily satisfies some unit tests.

This will likely noticeably increase the total unit-tests runtime, but will gaurantee tests visibly, instantly fail when (for example) the GPU configuration is wrong and produces all-zero states"
,QuEST-Kit,QuEST,tests/utilities.hpp,"added unit-test init-state check

Before each unit test, the initial state of the registers (assumed to be in the result of initDebugState) is now explicitly checked.

This prevents passing tests when initDebugState() itself is failing, and (for example) yielding an all-zero state which sneakily satisfies some unit tests.

This will likely noticeably increase the total unit-tests runtime, but will gaurantee tests visibly, instantly fail when (for example) the GPU configuration is wrong and produces all-zero states"
,Qaqarot,qaqarot,blueqat/gate.py,"Merge pull request #163 from gyu-don/sympy-fix

Fix gate parameter type for sympy"
,Qaqarot,qaqarot,tests/test_circuit.py,"Merge pull request #163 from gyu-don/sympy-fix

Fix gate parameter type for sympy"
,Qaqarot,qaqarot,blueqat/backends/quimb.py,"Merge pull request #162 from ryuNagai/maintain_test_quimb

Debug tests for quimb"
,Qaqarot,qaqarot,tests/test_1qdecompose.py,"Merge pull request #162 from ryuNagai/maintain_test_quimb

Debug tests for quimb"
,Qaqarot,qaqarot,tests/test_circuit.py,"Merge pull request #162 from ryuNagai/maintain_test_quimb

Debug tests for quimb"
,Qaqarot,qaqarot,tests/test_dagger.py,"Merge pull request #162 from ryuNagai/maintain_test_quimb

Debug tests for quimb"
,Qaqarot,qaqarot,tests/test_vqe.py,"Merge pull request #162 from ryuNagai/maintain_test_quimb

Debug tests for quimb"
,Qaqarot,qaqarot,tests/test_circuit.py,TST: Fix test
,Qaqarot,qaqarot,blueqat/gate.py,BUG: Fix gate parameter type for sympy
,Qaqarot,qaqarot,blueqat/backends/quimb.py,Debug tests for quimb
,Qaqarot,qaqarot,tests/test_1qdecompose.py,Debug tests for quimb
,Qaqarot,qaqarot,tests/test_circuit.py,Debug tests for quimb
,Qaqarot,qaqarot,tests/test_dagger.py,Debug tests for quimb
,Qaqarot,qaqarot,tests/test_vqe.py,Debug tests for quimb
,Quantomatic,pyzx,pyzx/circuit/gates.py,"Merge pull request #226 from dlyongemallo/fix_qasm3_space_between_phases

Fix two OpenQASM issues: handle spaces between phases and add `U` gate."
,Quantomatic,pyzx,pyzx/circuit/qasmparser.py,"Merge pull request #226 from dlyongemallo/fix_qasm3_space_between_phases

Fix two OpenQASM issues: handle spaces between phases and add `U` gate."
,Quantomatic,pyzx,tests/test_qasm.py,"Merge pull request #226 from dlyongemallo/fix_qasm3_space_between_phases

Fix two OpenQASM issues: handle spaces between phases and add `U` gate."
,Quantomatic,pyzx,pyzx/circuit/gates.py,"Add `U` as alias for `u3` gate. Required for compatibility with OpenQASM 3.

Together with #218, fixes #227."
,Quantomatic,pyzx,pyzx/circuit/qasmparser.py,"Add `U` as alias for `u3` gate. Required for compatibility with OpenQASM 3.

Together with #218, fixes #227."
,Quantomatic,pyzx,tests/test_qasm.py,"Add `U` as alias for `u3` gate. Required for compatibility with OpenQASM 3.

Together with #218, fixes #227."
,Quantomatic,pyzx,tests/test_qasm.py,"Fix parsing of OpenQASM code with spaces between phase parameters.

Add round-trip tests from pyzx to qiskit back to pyzx using both OpenQASM 2 and 3.

Fixes #225."
,Quantomatic,pyzx,pyzx/editor_actions.py,"added convience method for unordered pairs, many more fixes"
,Quantomatic,pyzx,pyzx/graph/graph_s.py,fixing some broken behaviour in graph_s
,Quantomatic,pyzx,demos/AKLT/AKLT hexagonal lattice.ipynb,"Change `print_matrix` so that it actually displays the matrix.

(Also: update ""AKLT hexagonal lattice.ipynb"" so it no longer uses the hack of wrapping print_matrix with a call to display.)

Fixes #145."
,microsoft,qsharp,compiler/qsc_passes/src/capabilitiesck.rs,"Improve error reporting spans in RCA check (#1543)

This fixes minor issues in error spans used when reporting RCA check
errors to avoid duplicate errors being reported for generated entry
expressions that come from `@EntryPoint` attributed callables in
standalone Q# files.

Fixes #1537."
,microsoft,qsharp,compiler/qsc_frontend/src/compile/tests.rs,"Use hierarchical namespaces in name resolution (#1415)

_This PR replaces #1364_

This PR introduces a feature called _hierarchical namespaces_, a
module-like system that maintains backward compatibility. It is the
foundational groundwork that will pave the way for:
1. Naked namespaces (files without namespace declarations)
2. Package publishing and sharing
3. Explicit item imports
4. Exports and re-exports
5. and the rest of the stuff
[here](https://github.com/microsoft/qsharp/issues/493#issuecomment-1979722979)

Key changes include:
1. `VecIdent` type introduction: This abstraction over `Vec<Ident>`
represents the new namespaces in the AST. Alternate names could be
`DotIdent` or `Path`, but those names were already loaded with meaning
in our codebase. I'm open to feedback on nomenclature here.
7. `NamespaceId` usage: This replaces our previous flat map-style
`Rc<str> -> Res` item tracking.
8. `NamespaceTree`: This tracks the namespace hierarchy separately in
low-cost data structure, and allows us to keep our basic `tys` and
`terms` maps relatively untouched.
9. Name resolution algorithm update: The algorithm in `resolve.rs`
received a heavy facelift. Not only did I try to simplify the existing
code, but I also added the required functionality to check candidate
partially-opened or re-opened namespaces.

This PR maintains 100% backward compatibility with the existing
resolution engine, preserving features like re-opening namespaces,
shadowing semantics, merging namespaces via aliases, and absolute-path
opens. It also introduces the ability to reference a function in a
different namespace if its parent namespace is opened.

Additional notes:

1. Katas used a form of shadowing that wasn't tested in our compiler.
This PR [adds a
test](https://github.com/microsoft/qsharp/pull/1312/files#diff-7a3aa16f18f6d132b9e54a6b6ebd53e6c3b41cea805c8f8db9c456b533a3c96bR2787)
for that.
2. Pursuing #1321 could help differentiate user-facing and
compiler-engineer-facing string representations of structs, which are
increasingly conflated.
3. There's potential for refactoring `ast`, `fir`, and `hir` to use
shared generic types, reducing duplicate `Ident`/etc types.
4. Completions functionality remains the same, but it's not yet aware of
the ability to partially open namespaces (e.g. `open Microsoft.Quantum`.
This will be addressed in future updates.
5. There is a performance regression, but we are performing a full
tree-traversal namespace resolution algorithm in a place where we used
to just do a constant table lookup. I have optimized this as much as I
believe is reasonable for now, bringing the regression down from ~40%,
where it was originally, to around 5-10% based on the benchmark run.

Also closes #1336

---------

Co-authored-by: Mine Starks <mineyalc@microsoft.com>
Co-authored-by: Mine Starks <16928427+minestarks@users.noreply.github.com>"
,microsoft,qsharp,compiler/qsc_passes/src/replace_qubit_allocation.rs,"Use hierarchical namespaces in name resolution (#1415)

_This PR replaces #1364_

This PR introduces a feature called _hierarchical namespaces_, a
module-like system that maintains backward compatibility. It is the
foundational groundwork that will pave the way for:
1. Naked namespaces (files without namespace declarations)
2. Package publishing and sharing
3. Explicit item imports
4. Exports and re-exports
5. and the rest of the stuff
[here](https://github.com/microsoft/qsharp/issues/493#issuecomment-1979722979)

Key changes include:
1. `VecIdent` type introduction: This abstraction over `Vec<Ident>`
represents the new namespaces in the AST. Alternate names could be
`DotIdent` or `Path`, but those names were already loaded with meaning
in our codebase. I'm open to feedback on nomenclature here.
7. `NamespaceId` usage: This replaces our previous flat map-style
`Rc<str> -> Res` item tracking.
8. `NamespaceTree`: This tracks the namespace hierarchy separately in
low-cost data structure, and allows us to keep our basic `tys` and
`terms` maps relatively untouched.
9. Name resolution algorithm update: The algorithm in `resolve.rs`
received a heavy facelift. Not only did I try to simplify the existing
code, but I also added the required functionality to check candidate
partially-opened or re-opened namespaces.

This PR maintains 100% backward compatibility with the existing
resolution engine, preserving features like re-opening namespaces,
shadowing semantics, merging namespaces via aliases, and absolute-path
opens. It also introduces the ability to reference a function in a
different namespace if its parent namespace is opened.

Additional notes:

1. Katas used a form of shadowing that wasn't tested in our compiler.
This PR [adds a
test](https://github.com/microsoft/qsharp/pull/1312/files#diff-7a3aa16f18f6d132b9e54a6b6ebd53e6c3b41cea805c8f8db9c456b533a3c96bR2787)
for that.
2. Pursuing #1321 could help differentiate user-facing and
compiler-engineer-facing string representations of structs, which are
increasingly conflated.
3. There's potential for refactoring `ast`, `fir`, and `hir` to use
shared generic types, reducing duplicate `Ident`/etc types.
4. Completions functionality remains the same, but it's not yet aware of
the ability to partially open namespaces (e.g. `open Microsoft.Quantum`.
This will be addressed in future updates.
5. There is a performance regression, but we are performing a full
tree-traversal namespace resolution algorithm in a place where we used
to just do a constant table lookup. I have optimized this as much as I
believe is reasonable for now, bringing the regression down from ~40%,
where it was originally, to around 5-10% based on the benchmark run.

Also closes #1336

---------

Co-authored-by: Mine Starks <mineyalc@microsoft.com>
Co-authored-by: Mine Starks <16928427+minestarks@users.noreply.github.com>"
,microsoft,qsharp,compiler/qsc_partial_eval/src/lib.rs,"Additional RIR block remapping, Error string updates (#1526)

This change fixes another issue in block id remapping in RIR that can
lead to degenerate performance cases. The corresponding test case is
updated to exercise deeper nesting and verify the fix.

This also updates the error string used for dynamic values encountered
by partial evaluation based on feedback."
,microsoft,qsharp,compiler/qsc_partial_eval/tests/misc.rs,"Additional RIR block remapping, Error string updates (#1526)

This change fixes another issue in block id remapping in RIR that can
lead to degenerate performance cases. The corresponding test case is
updated to exercise deeper nesting and verify the fix.

This also updates the error string used for dynamic values encountered
by partial evaluation based on feedback."
,microsoft,qsharp,compiler/qsc_partial_eval/tests/bindings.rs,"Fix panic when creating unneeded Phi node (#1527)

This fixes an issue where a mutable variable A used only in one scope
and not across any others is set to a different mutable variable B that
spans multiple scopes, including scopes that are not dominated by
variable B. Variables like B do not need phi nodes as they are assumed
to be unused in later blocks, and any actual usage in later blocks will
be caught by the SSA check pass by using the dominator tree."
,microsoft,qsharp,compiler/qsc_partial_eval/tests/misc.rs,"Fix RIR transform for large unrolled loops, chained stores across branches (#1521)

This fixes two RIR transformation bugs:

- Avoid revisiting same nodes back to back in node remapping pass, which
can cause exponential increase in memory usage for programs with large
loops containing nested branching.
- Use variable map for operands in phi node arguments to avoid orphaned
variable when that variable comes from a store of another stored
variable across branches."
,microsoft,qsharp,samples/algorithms/BernsteinVazirani.qs,"Fix use of `ForEach` in samples for compatibility (#1520)

The Bernstein-Vazirani and Hidden Shift samples both used a pattern that
is not well supported by RCA, specifically calling `ForEach(MResetZ,
qubits)` to perform measurement on each qubit in an array. Passing a
callable that produces a dynamic value makes static analysis very
challenging, so instead we can update these to use the equivalent
`MResetEachZ` operation. This allows the samples to work well with
analysis and produce QIR for both base and adaptive profile."
,microsoft,qsharp,samples/algorithms/BernsteinVaziraniNISQ.qs,"Fix use of `ForEach` in samples for compatibility (#1520)

The Bernstein-Vazirani and Hidden Shift samples both used a pattern that
is not well supported by RCA, specifically calling `ForEach(MResetZ,
qubits)` to perform measurement on each qubit in an array. Passing a
callable that produces a dynamic value makes static analysis very
challenging, so instead we can update these to use the equivalent
`MResetEachZ` operation. This allows the samples to work well with
analysis and produce QIR for both base and adaptive profile."
,microsoft,qsharp,samples/algorithms/HiddenShift.qs,"Fix use of `ForEach` in samples for compatibility (#1520)

The Bernstein-Vazirani and Hidden Shift samples both used a pattern that
is not well supported by RCA, specifically calling `ForEach(MResetZ,
qubits)` to perform measurement on each qubit in an array. Passing a
callable that produces a dynamic value makes static analysis very
challenging, so instead we can update these to use the equivalent
`MResetEachZ` operation. This allows the samples to work well with
analysis and produce QIR for both base and adaptive profile."
,microsoft,qsharp,samples/algorithms/HiddenShiftNISQ.qs,"Fix use of `ForEach` in samples for compatibility (#1520)

The Bernstein-Vazirani and Hidden Shift samples both used a pattern that
is not well supported by RCA, specifically calling `ForEach(MResetZ,
qubits)` to perform measurement on each qubit in an array. Passing a
callable that produces a dynamic value makes static analysis very
challenging, so instead we can update these to use the equivalent
`MResetEachZ` operation. This allows the samples to work well with
analysis and produce QIR for both base and adaptive profile."
,microsoft,qsharp,compiler/qsc_partial_eval/src/lib.rs,"Fix for logic based on `CallToUnresolvedCallee` flag (#1519)

The check for the dynamism of the return from unresolved callees
incorrectly ended up applying to calls where the flag had propagated
from another call site, including the entry point callable itself. This
change introduces new infra to track the call expression that introduced
the flag as opposed to all calls the flag had propagated to, which keeps
the desired protection but avoids rejecting other call expressions."
,microsoft,qsharp,compiler/qsc_partial_eval/tests/calls.rs,"Fix for logic based on `CallToUnresolvedCallee` flag (#1519)

The check for the dynamism of the return from unresolved callees
incorrectly ended up applying to calls where the flag had propagated
from another call site, including the entry point callable itself. This
change introduces new infra to track the call expression that introduced
the flag as opposed to all calls the flag had propagated to, which keeps
the desired protection but avoids rejecting other call expressions."
,microsoft,qsharp,compiler/qsc/src/codegen/tests.rs,Fix integer output recording name (#1517)
,microsoft,qsharp,compiler/qsc_partial_eval/tests/assigns.rs,Fix integer output recording name (#1517)
,microsoft,qsharp,compiler/qsc_partial_eval/tests/bindings.rs,Fix integer output recording name (#1517)
,microsoft,qsharp,compiler/qsc_partial_eval/tests/intrinsics.rs,Fix integer output recording name (#1517)
,microsoft,qsharp,compiler/qsc_partial_eval/tests/misc.rs,Fix integer output recording name (#1517)
,microsoft,qsharp,compiler/qsc_partial_eval/tests/output_recording.rs,Fix integer output recording name (#1517)
,microsoft,qsharp,compiler/qsc_rir/src/builder.rs,Fix integer output recording name (#1517)
,microsoft,qsharp,compiler/qsc_partial_eval/tests/calls.rs,"Support closures in RCA (#1498)

This change adds full support for analysis of closures for runtime
capabilities and calls when the callee expression is known to resolve to
a bound closure. This allows analysis to include captured variables as
well."
,microsoft,qsharp,compiler/qsc_rca/tests/calls.rs,"Support closures in RCA (#1498)

This change adds full support for analysis of closures for runtime
capabilities and calls when the callee expression is known to resolve to
a bound closure. This allows analysis to include captured variables as
well."
,microsoft,qsharp,compiler/qsc/src/codegen/tests.rs,"Fix RIR transform bugs (#1514)

This fixes multiple bugs in RIR transformations:

- Updates variable remapping logic during SSA pass to check whether the
proposed replacement itself has a pending remap, fixing scenario where
mutable variables are mapped to other mutable variables.
- Includes variables created by `Store` instructions in the count for
identifying highest variable id to use for inserted phi-nodes, fixing
issues where a phi variable may overlap with an existing remapped
mutable variable.
- Avoids wrapping subtraction in qubit remapping mass when there are no
qubits in the program.
- Fixes type check pass to validate that comparison instruction produces
a Boolean value rather than the same value as arguments.

This change adds some new test cases and expands test coverage
significatly by running all programs produced in partial eval tests
through RIR transforms in the test utility."
,microsoft,qsharp,compiler/qsc_partial_eval/src/lib.rs,"Check unresolved callables during partial eval (#1497)

This change updates the RCA check pass to not treat unresolved callables
as errors and instead relies on a new check at partial eval time that
checks the resolved callable with the known arguments to return RCA
check errors at that point."
,microsoft,qsharp,compiler/qsc_partial_eval/tests/calls.rs,"Check unresolved callables during partial eval (#1497)

This change updates the RCA check pass to not treat unresolved callables
as errors and instead relies on a new check at partial eval time that
checks the resolved callable with the known arguments to return RCA
check errors at that point."
,microsoft,qsharp,compiler/qsc_partial_eval/tests/output_recording.rs,"Check unresolved callables during partial eval (#1497)

This change updates the RCA check pass to not treat unresolved callables
as errors and instead relies on a new check at partial eval time that
checks the resolved callable with the known arguments to return RCA
check errors at that point."
,microsoft,qsharp,compiler/qsc_rca/src/errors.rs,"Check unresolved callables during partial eval (#1497)

This change updates the RCA check pass to not treat unresolved callables
as errors and instead relies on a new check at partial eval time that
checks the resolved callable with the known arguments to return RCA
check errors at that point."
,tequilahub,tequila,src/tequila/circuit/qasm.py,"Merge pull request #340 from tequilahub/kottmanj-update-1.9.5

* fixing syntax issue in post_init of dataclass (#327)
* phoenics support dropped
* more convenient randomization initialization for OO, avoiding numpy warnings
* Update qasm.py (#334)
Fixes issue #332
* added methods to create annihilation, creation, sz, sp, sm and s2 operators in qubit representation (#336)
* Update qasm.py (#335)
* Update ci_chemistry_psi4.yml (psi4 --> conda-forge channel)
* orbital names are better tracked through transformations (#338)
* keep basis info when re-initializing with mol.from_tequila
* orbital-optimization gives back molecule in the original basis
* more basis info (#339)
---------

Co-authored-by: davibinco <59845652+davibinco@users.noreply.github.com>"
,tequilahub,tequila,src/tequila/quantumchemistry/qc_base.py,"Merge pull request #340 from tequilahub/kottmanj-update-1.9.5

* fixing syntax issue in post_init of dataclass (#327)
* phoenics support dropped
* more convenient randomization initialization for OO, avoiding numpy warnings
* Update qasm.py (#334)
Fixes issue #332
* added methods to create annihilation, creation, sz, sp, sm and s2 operators in qubit representation (#336)
* Update qasm.py (#335)
* Update ci_chemistry_psi4.yml (psi4 --> conda-forge channel)
* orbital names are better tracked through transformations (#338)
* keep basis info when re-initializing with mol.from_tequila
* orbital-optimization gives back molecule in the original basis
* more basis info (#339)
---------

Co-authored-by: davibinco <59845652+davibinco@users.noreply.github.com>"
,tequilahub,tequila,src/tequila/quantumchemistry/qc_base.py,"fix doc in fermionic operators for molecule (#337)

* fix doc in fermionic operators for molecule, now spin-orbital is specified
* add doc for spin-orbital order"
,tequilahub,tequila,src/tequila/circuit/qasm.py,"Update qasm.py (#334)

Fixes issue #332"
,tequilahub,tequila,src/tequila/optimizers/optimizer_phoenics.py,"Update to 1.9.4 (#330)

* fixing syntax issue in post_init of dataclass (#327)

* fixing syntax issue in post_init of dataclass
* phoenics dropped due to maintenance resources
* more convenient randomization initialization for OO, avoiding numpy warnings

* Update version.py (#329)"
,tequilahub,tequila,src/tequila/quantumchemistry/chemistry_tools.py,"Update to 1.9.4 (#330)

* fixing syntax issue in post_init of dataclass (#327)

* fixing syntax issue in post_init of dataclass
* phoenics dropped due to maintenance resources
* more convenient randomization initialization for OO, avoiding numpy warnings

* Update version.py (#329)"
,tequilahub,tequila,tests/test_phoenics.py,"Update to 1.9.4 (#330)

* fixing syntax issue in post_init of dataclass (#327)

* fixing syntax issue in post_init of dataclass
* phoenics dropped due to maintenance resources
* more convenient randomization initialization for OO, avoiding numpy warnings

* Update version.py (#329)"
,tequilahub,tequila,src/tequila/quantumchemistry/chemistry_tools.py,"fixing syntax issue in post_init of dataclass (#327)

* fixing syntax issue in post_init of dataclass
* phoenics dropped due to maintenance resources
* more convenient randomization initialization for OO, avoiding numpy warnings"
,tequilahub,tequila,tests/test_noise_opt.py,"fixing syntax issue in post_init of dataclass (#327)

* fixing syntax issue in post_init of dataclass
* phoenics dropped due to maintenance resources
* more convenient randomization initialization for OO, avoiding numpy warnings"
,tequilahub,tequila,tests/test_phoenics.py,"fixing syntax issue in post_init of dataclass (#327)

* fixing syntax issue in post_init of dataclass
* phoenics dropped due to maintenance resources
* more convenient randomization initialization for OO, avoiding numpy warnings"
,tequilahub,tequila,src/tequila/quantumchemistry/qc_base.py,fixing issues with qubit encodings and orbital optimizations (#325)
,tequilahub,tequila,src/tequila/circuit/gates.py,fixing bug associated to qubit excitations with added controls (#317)
,tequilahub,tequila,tests/test_simulator_backends.py,"fixing issues with gradient printing in spsa (#316)

* fixing issues with gradient printing in spsa
* wrong skip condition in tests
* fixing issues with new pytest version in noise-opt"
,unitaryfund,mitiq,CHANGELOG.md,"Release 0.36.0 (#2338)

* modified CHANGELOG.md and VERSION.txt for milestone 0.36.0

* modified CHANGELOG.md

* add highlights section to CHANGELOG.md (suggested by @cosenal)

Co-authored-by: Alessandro Cosentino <alessandro@unitary.fund>

* move linkcheck PR to Maintenance section

* fix code formatting in changelog

---------

Co-authored-by: Alessandro Cosentino <alessandro@unitary.fund>"
,unitaryfund,mitiq,README.md,"Created method to get available QEM methods in mitiq (#2298)

* Created method to get available QEM methods in mitiq

* Add try except block for mitiq module names

* Remove comment; leaving Pauli twirling in

* Spelling convention for cancellation

Co-authored-by: Nathan Shammah <nathan.shammah@gmail.com>

* fomatting

* Formatting

* Remove fold_gates_from_left from vqe-pyquil demo

* Remove test which checks for module type pending packaging investigation, add `mitiq` prefix to module names for clarity, add qem_methods to Quick Tour Error mitigation techniques

---------

Co-authored-by: Nathan Shammah <nathan.shammah@gmail.com>"
,unitaryfund,mitiq,mitiq/__init__.py,"Created method to get available QEM methods in mitiq (#2298)

* Created method to get available QEM methods in mitiq

* Add try except block for mitiq module names

* Remove comment; leaving Pauli twirling in

* Spelling convention for cancellation

Co-authored-by: Nathan Shammah <nathan.shammah@gmail.com>

* fomatting

* Formatting

* Remove fold_gates_from_left from vqe-pyquil demo

* Remove test which checks for module type pending packaging investigation, add `mitiq` prefix to module names for clarity, add qem_methods to Quick Tour Error mitigation techniques

---------

Co-authored-by: Nathan Shammah <nathan.shammah@gmail.com>"
,unitaryfund,mitiq,mitiq/tests/test_utils.py,"Created method to get available QEM methods in mitiq (#2298)

* Created method to get available QEM methods in mitiq

* Add try except block for mitiq module names

* Remove comment; leaving Pauli twirling in

* Spelling convention for cancellation

Co-authored-by: Nathan Shammah <nathan.shammah@gmail.com>

* fomatting

* Formatting

* Remove fold_gates_from_left from vqe-pyquil demo

* Remove test which checks for module type pending packaging investigation, add `mitiq` prefix to module names for clarity, add qem_methods to Quick Tour Error mitigation techniques

---------

Co-authored-by: Nathan Shammah <nathan.shammah@gmail.com>"
,unitaryfund,mitiq,mitiq/utils.py,"Created method to get available QEM methods in mitiq (#2298)

* Created method to get available QEM methods in mitiq

* Add try except block for mitiq module names

* Remove comment; leaving Pauli twirling in

* Spelling convention for cancellation

Co-authored-by: Nathan Shammah <nathan.shammah@gmail.com>

* fomatting

* Formatting

* Remove fold_gates_from_left from vqe-pyquil demo

* Remove test which checks for module type pending packaging investigation, add `mitiq` prefix to module names for clarity, add qem_methods to Quick Tour Error mitigation techniques

---------

Co-authored-by: Nathan Shammah <nathan.shammah@gmail.com>"
,unitaryfund,mitiq,dev_requirements.txt,"Upgrade Qiskit to 1.0.2 (#2269)

* updates dev_requirements for Qiskit 1.0.2

* updates qiskit_utils to not use execute

* updates conversions to use qasm2.dumps

* updates I gate

* adds TransformationPass to _transform_registers

* updates test

* updates zne tests

* fixes ddd tests

* fixes pec tests

* fixes zne scaling tests

* adds tests for transpiler

* updates aer version

* updates docs examples

* slightly refactors qiskit transpilations

* updates mitiq paper codeblock

* pin myst-parser dependency

* fixes docstring and adds tests for multi-register circuit

* applies suggestions from comments

---------

Co-authored-by: Alessandro Cosentino <alessandro@unitary.fund>"
,unitaryfund,mitiq,docs/source/examples/calibration-tutorial.md,"Upgrade Qiskit to 1.0.2 (#2269)

* updates dev_requirements for Qiskit 1.0.2

* updates qiskit_utils to not use execute

* updates conversions to use qasm2.dumps

* updates I gate

* adds TransformationPass to _transform_registers

* updates test

* updates zne tests

* fixes ddd tests

* fixes pec tests

* fixes zne scaling tests

* adds tests for transpiler

* updates aer version

* updates docs examples

* slightly refactors qiskit transpilations

* updates mitiq paper codeblock

* pin myst-parser dependency

* fixes docstring and adds tests for multi-register circuit

* applies suggestions from comments

---------

Co-authored-by: Alessandro Cosentino <alessandro@unitary.fund>"
,unitaryfund,mitiq,docs/source/examples/cirq-ibmq-backends.md,"Upgrade Qiskit to 1.0.2 (#2269)

* updates dev_requirements for Qiskit 1.0.2

* updates qiskit_utils to not use execute

* updates conversions to use qasm2.dumps

* updates I gate

* adds TransformationPass to _transform_registers

* updates test

* updates zne tests

* fixes ddd tests

* fixes pec tests

* fixes zne scaling tests

* adds tests for transpiler

* updates aer version

* updates docs examples

* slightly refactors qiskit transpilations

* updates mitiq paper codeblock

* pin myst-parser dependency

* fixes docstring and adds tests for multi-register circuit

* applies suggestions from comments

---------

Co-authored-by: Alessandro Cosentino <alessandro@unitary.fund>"
,unitaryfund,mitiq,docs/source/examples/ddd_on_ibmq_ghz.md,"Upgrade Qiskit to 1.0.2 (#2269)

* updates dev_requirements for Qiskit 1.0.2

* updates qiskit_utils to not use execute

* updates conversions to use qasm2.dumps

* updates I gate

* adds TransformationPass to _transform_registers

* updates test

* updates zne tests

* fixes ddd tests

* fixes pec tests

* fixes zne scaling tests

* adds tests for transpiler

* updates aer version

* updates docs examples

* slightly refactors qiskit transpilations

* updates mitiq paper codeblock

* pin myst-parser dependency

* fixes docstring and adds tests for multi-register circuit

* applies suggestions from comments

---------

Co-authored-by: Alessandro Cosentino <alessandro@unitary.fund>"
,unitaryfund,mitiq,docs/source/examples/ggi_summer_school_solved.md,"Upgrade Qiskit to 1.0.2 (#2269)

* updates dev_requirements for Qiskit 1.0.2

* updates qiskit_utils to not use execute

* updates conversions to use qasm2.dumps

* updates I gate

* adds TransformationPass to _transform_registers

* updates test

* updates zne tests

* fixes ddd tests

* fixes pec tests

* fixes zne scaling tests

* adds tests for transpiler

* updates aer version

* updates docs examples

* slightly refactors qiskit transpilations

* updates mitiq paper codeblock

* pin myst-parser dependency

* fixes docstring and adds tests for multi-register circuit

* applies suggestions from comments

---------

Co-authored-by: Alessandro Cosentino <alessandro@unitary.fund>"
,unitaryfund,mitiq,docs/source/examples/ibmq-backends.md,"Upgrade Qiskit to 1.0.2 (#2269)

* updates dev_requirements for Qiskit 1.0.2

* updates qiskit_utils to not use execute

* updates conversions to use qasm2.dumps

* updates I gate

* adds TransformationPass to _transform_registers

* updates test

* updates zne tests

* fixes ddd tests

* fixes pec tests

* fixes zne scaling tests

* adds tests for transpiler

* updates aer version

* updates docs examples

* slightly refactors qiskit transpilations

* updates mitiq paper codeblock

* pin myst-parser dependency

* fixes docstring and adds tests for multi-register circuit

* applies suggestions from comments

---------

Co-authored-by: Alessandro Cosentino <alessandro@unitary.fund>"
,unitaryfund,mitiq,docs/source/examples/layerwise-folding.md,"Upgrade Qiskit to 1.0.2 (#2269)

* updates dev_requirements for Qiskit 1.0.2

* updates qiskit_utils to not use execute

* updates conversions to use qasm2.dumps

* updates I gate

* adds TransformationPass to _transform_registers

* updates test

* updates zne tests

* fixes ddd tests

* fixes pec tests

* fixes zne scaling tests

* adds tests for transpiler

* updates aer version

* updates docs examples

* slightly refactors qiskit transpilations

* updates mitiq paper codeblock

* pin myst-parser dependency

* fixes docstring and adds tests for multi-register circuit

* applies suggestions from comments

---------

Co-authored-by: Alessandro Cosentino <alessandro@unitary.fund>"
,unitaryfund,mitiq,docs/source/examples/pec_tutorial.md,"Upgrade Qiskit to 1.0.2 (#2269)

* updates dev_requirements for Qiskit 1.0.2

* updates qiskit_utils to not use execute

* updates conversions to use qasm2.dumps

* updates I gate

* adds TransformationPass to _transform_registers

* updates test

* updates zne tests

* fixes ddd tests

* fixes pec tests

* fixes zne scaling tests

* adds tests for transpiler

* updates aer version

* updates docs examples

* slightly refactors qiskit transpilations

* updates mitiq paper codeblock

* pin myst-parser dependency

* fixes docstring and adds tests for multi-register circuit

* applies suggestions from comments

---------

Co-authored-by: Alessandro Cosentino <alessandro@unitary.fund>"
,unitaryfund,mitiq,docs/source/examples/pennylane-ibmq-backends.md,"Upgrade Qiskit to 1.0.2 (#2269)

* updates dev_requirements for Qiskit 1.0.2

* updates qiskit_utils to not use execute

* updates conversions to use qasm2.dumps

* updates I gate

* adds TransformationPass to _transform_registers

* updates test

* updates zne tests

* fixes ddd tests

* fixes pec tests

* fixes zne scaling tests

* adds tests for transpiler

* updates aer version

* updates docs examples

* slightly refactors qiskit transpilations

* updates mitiq paper codeblock

* pin myst-parser dependency

* fixes docstring and adds tests for multi-register circuit

* applies suggestions from comments

---------

Co-authored-by: Alessandro Cosentino <alessandro@unitary.fund>"
,unitaryfund,mitiq,docs/source/examples/quantum_simulation_scars_ibmq.md,"Upgrade Qiskit to 1.0.2 (#2269)

* updates dev_requirements for Qiskit 1.0.2

* updates qiskit_utils to not use execute

* updates conversions to use qasm2.dumps

* updates I gate

* adds TransformationPass to _transform_registers

* updates test

* updates zne tests

* fixes ddd tests

* fixes pec tests

* fixes zne scaling tests

* adds tests for transpiler

* updates aer version

* updates docs examples

* slightly refactors qiskit transpilations

* updates mitiq paper codeblock

* pin myst-parser dependency

* fixes docstring and adds tests for multi-register circuit

* applies suggestions from comments

---------

Co-authored-by: Alessandro Cosentino <alessandro@unitary.fund>"
,unitaryfund,mitiq,docs/source/examples/simple-landscape-braket.md,"Upgrade Qiskit to 1.0.2 (#2269)

* updates dev_requirements for Qiskit 1.0.2

* updates qiskit_utils to not use execute

* updates conversions to use qasm2.dumps

* updates I gate

* adds TransformationPass to _transform_registers

* updates test

* updates zne tests

* fixes ddd tests

* fixes pec tests

* fixes zne scaling tests

* adds tests for transpiler

* updates aer version

* updates docs examples

* slightly refactors qiskit transpilations

* updates mitiq paper codeblock

* pin myst-parser dependency

* fixes docstring and adds tests for multi-register circuit

* applies suggestions from comments

---------

Co-authored-by: Alessandro Cosentino <alessandro@unitary.fund>"
,unitaryfund,mitiq,docs/source/examples/simple-landscape-qiskit.md,"Upgrade Qiskit to 1.0.2 (#2269)

* updates dev_requirements for Qiskit 1.0.2

* updates qiskit_utils to not use execute

* updates conversions to use qasm2.dumps

* updates I gate

* adds TransformationPass to _transform_registers

* updates test

* updates zne tests

* fixes ddd tests

* fixes pec tests

* fixes zne scaling tests

* adds tests for transpiler

* updates aer version

* updates docs examples

* slightly refactors qiskit transpilations

* updates mitiq paper codeblock

* pin myst-parser dependency

* fixes docstring and adds tests for multi-register circuit

* applies suggestions from comments

---------

Co-authored-by: Alessandro Cosentino <alessandro@unitary.fund>"
,unitaryfund,mitiq,mitiq/ddd/tests/test_insertion.py,"Upgrade Qiskit to 1.0.2 (#2269)

* updates dev_requirements for Qiskit 1.0.2

* updates qiskit_utils to not use execute

* updates conversions to use qasm2.dumps

* updates I gate

* adds TransformationPass to _transform_registers

* updates test

* updates zne tests

* fixes ddd tests

* fixes pec tests

* fixes zne scaling tests

* adds tests for transpiler

* updates aer version

* updates docs examples

* slightly refactors qiskit transpilations

* updates mitiq paper codeblock

* pin myst-parser dependency

* fixes docstring and adds tests for multi-register circuit

* applies suggestions from comments

---------

Co-authored-by: Alessandro Cosentino <alessandro@unitary.fund>"
,unitaryfund,mitiq,mitiq/interface/conversions.py,"Upgrade Qiskit to 1.0.2 (#2269)

* updates dev_requirements for Qiskit 1.0.2

* updates qiskit_utils to not use execute

* updates conversions to use qasm2.dumps

* updates I gate

* adds TransformationPass to _transform_registers

* updates test

* updates zne tests

* fixes ddd tests

* fixes pec tests

* fixes zne scaling tests

* adds tests for transpiler

* updates aer version

* updates docs examples

* slightly refactors qiskit transpilations

* updates mitiq paper codeblock

* pin myst-parser dependency

* fixes docstring and adds tests for multi-register circuit

* applies suggestions from comments

---------

Co-authored-by: Alessandro Cosentino <alessandro@unitary.fund>"
,unitaryfund,mitiq,mitiq/interface/mitiq_qiskit/__init__.py,"Upgrade Qiskit to 1.0.2 (#2269)

* updates dev_requirements for Qiskit 1.0.2

* updates qiskit_utils to not use execute

* updates conversions to use qasm2.dumps

* updates I gate

* adds TransformationPass to _transform_registers

* updates test

* updates zne tests

* fixes ddd tests

* fixes pec tests

* fixes zne scaling tests

* adds tests for transpiler

* updates aer version

* updates docs examples

* slightly refactors qiskit transpilations

* updates mitiq paper codeblock

* pin myst-parser dependency

* fixes docstring and adds tests for multi-register circuit

* applies suggestions from comments

---------

Co-authored-by: Alessandro Cosentino <alessandro@unitary.fund>"
,unitaryfund,mitiq,mitiq/interface/mitiq_qiskit/conversions.py,"Upgrade Qiskit to 1.0.2 (#2269)

* updates dev_requirements for Qiskit 1.0.2

* updates qiskit_utils to not use execute

* updates conversions to use qasm2.dumps

* updates I gate

* adds TransformationPass to _transform_registers

* updates test

* updates zne tests

* fixes ddd tests

* fixes pec tests

* fixes zne scaling tests

* adds tests for transpiler

* updates aer version

* updates docs examples

* slightly refactors qiskit transpilations

* updates mitiq paper codeblock

* pin myst-parser dependency

* fixes docstring and adds tests for multi-register circuit

* applies suggestions from comments

---------

Co-authored-by: Alessandro Cosentino <alessandro@unitary.fund>"
,unitaryfund,mitiq,mitiq/interface/mitiq_qiskit/qiskit_utils.py,"Upgrade Qiskit to 1.0.2 (#2269)

* updates dev_requirements for Qiskit 1.0.2

* updates qiskit_utils to not use execute

* updates conversions to use qasm2.dumps

* updates I gate

* adds TransformationPass to _transform_registers

* updates test

* updates zne tests

* fixes ddd tests

* fixes pec tests

* fixes zne scaling tests

* adds tests for transpiler

* updates aer version

* updates docs examples

* slightly refactors qiskit transpilations

* updates mitiq paper codeblock

* pin myst-parser dependency

* fixes docstring and adds tests for multi-register circuit

* applies suggestions from comments

---------

Co-authored-by: Alessandro Cosentino <alessandro@unitary.fund>"
,unitaryfund,mitiq,mitiq/interface/mitiq_qiskit/tests/test_conversions_qiskit.py,"Upgrade Qiskit to 1.0.2 (#2269)

* updates dev_requirements for Qiskit 1.0.2

* updates qiskit_utils to not use execute

* updates conversions to use qasm2.dumps

* updates I gate

* adds TransformationPass to _transform_registers

* updates test

* updates zne tests

* fixes ddd tests

* fixes pec tests

* fixes zne scaling tests

* adds tests for transpiler

* updates aer version

* updates docs examples

* slightly refactors qiskit transpilations

* updates mitiq paper codeblock

* pin myst-parser dependency

* fixes docstring and adds tests for multi-register circuit

* applies suggestions from comments

---------

Co-authored-by: Alessandro Cosentino <alessandro@unitary.fund>"
,unitaryfund,mitiq,mitiq/interface/mitiq_qiskit/tests/test_qiskit_utils.py,"Upgrade Qiskit to 1.0.2 (#2269)

* updates dev_requirements for Qiskit 1.0.2

* updates qiskit_utils to not use execute

* updates conversions to use qasm2.dumps

* updates I gate

* adds TransformationPass to _transform_registers

* updates test

* updates zne tests

* fixes ddd tests

* fixes pec tests

* fixes zne scaling tests

* adds tests for transpiler

* updates aer version

* updates docs examples

* slightly refactors qiskit transpilations

* updates mitiq paper codeblock

* pin myst-parser dependency

* fixes docstring and adds tests for multi-register circuit

* applies suggestions from comments

---------

Co-authored-by: Alessandro Cosentino <alessandro@unitary.fund>"
,unitaryfund,mitiq,mitiq/interface/mitiq_qiskit/tests/test_transpiler.py,"Upgrade Qiskit to 1.0.2 (#2269)

* updates dev_requirements for Qiskit 1.0.2

* updates qiskit_utils to not use execute

* updates conversions to use qasm2.dumps

* updates I gate

* adds TransformationPass to _transform_registers

* updates test

* updates zne tests

* fixes ddd tests

* fixes pec tests

* fixes zne scaling tests

* adds tests for transpiler

* updates aer version

* updates docs examples

* slightly refactors qiskit transpilations

* updates mitiq paper codeblock

* pin myst-parser dependency

* fixes docstring and adds tests for multi-register circuit

* applies suggestions from comments

---------

Co-authored-by: Alessandro Cosentino <alessandro@unitary.fund>"
,unitaryfund,mitiq,mitiq/interface/mitiq_qiskit/transpiler.py,"Upgrade Qiskit to 1.0.2 (#2269)

* updates dev_requirements for Qiskit 1.0.2

* updates qiskit_utils to not use execute

* updates conversions to use qasm2.dumps

* updates I gate

* adds TransformationPass to _transform_registers

* updates test

* updates zne tests

* fixes ddd tests

* fixes pec tests

* fixes zne scaling tests

* adds tests for transpiler

* updates aer version

* updates docs examples

* slightly refactors qiskit transpilations

* updates mitiq paper codeblock

* pin myst-parser dependency

* fixes docstring and adds tests for multi-register circuit

* applies suggestions from comments

---------

Co-authored-by: Alessandro Cosentino <alessandro@unitary.fund>"
,unitaryfund,mitiq,mitiq/pec/tests/test_pec_sampling.py,"Upgrade Qiskit to 1.0.2 (#2269)

* updates dev_requirements for Qiskit 1.0.2

* updates qiskit_utils to not use execute

* updates conversions to use qasm2.dumps

* updates I gate

* adds TransformationPass to _transform_registers

* updates test

* updates zne tests

* fixes ddd tests

* fixes pec tests

* fixes zne scaling tests

* adds tests for transpiler

* updates aer version

* updates docs examples

* slightly refactors qiskit transpilations

* updates mitiq paper codeblock

* pin myst-parser dependency

* fixes docstring and adds tests for multi-register circuit

* applies suggestions from comments

---------

Co-authored-by: Alessandro Cosentino <alessandro@unitary.fund>"
,unitaryfund,mitiq,mitiq/pec/types/tests/test_types.py,"Upgrade Qiskit to 1.0.2 (#2269)

* updates dev_requirements for Qiskit 1.0.2

* updates qiskit_utils to not use execute

* updates conversions to use qasm2.dumps

* updates I gate

* adds TransformationPass to _transform_registers

* updates test

* updates zne tests

* fixes ddd tests

* fixes pec tests

* fixes zne scaling tests

* adds tests for transpiler

* updates aer version

* updates docs examples

* slightly refactors qiskit transpilations

* updates mitiq paper codeblock

* pin myst-parser dependency

* fixes docstring and adds tests for multi-register circuit

* applies suggestions from comments

---------

Co-authored-by: Alessandro Cosentino <alessandro@unitary.fund>"
,unitaryfund,mitiq,mitiq/tests/test_conversions.py,"Upgrade Qiskit to 1.0.2 (#2269)

* updates dev_requirements for Qiskit 1.0.2

* updates qiskit_utils to not use execute

* updates conversions to use qasm2.dumps

* updates I gate

* adds TransformationPass to _transform_registers

* updates test

* updates zne tests

* fixes ddd tests

* fixes pec tests

* fixes zne scaling tests

* adds tests for transpiler

* updates aer version

* updates docs examples

* slightly refactors qiskit transpilations

* updates mitiq paper codeblock

* pin myst-parser dependency

* fixes docstring and adds tests for multi-register circuit

* applies suggestions from comments

---------

Co-authored-by: Alessandro Cosentino <alessandro@unitary.fund>"
,unitaryfund,mitiq,mitiq/zne/scaling/tests/test_folding.py,"Upgrade Qiskit to 1.0.2 (#2269)

* updates dev_requirements for Qiskit 1.0.2

* updates qiskit_utils to not use execute

* updates conversions to use qasm2.dumps

* updates I gate

* adds TransformationPass to _transform_registers

* updates test

* updates zne tests

* fixes ddd tests

* fixes pec tests

* fixes zne scaling tests

* adds tests for transpiler

* updates aer version

* updates docs examples

* slightly refactors qiskit transpilations

* updates mitiq paper codeblock

* pin myst-parser dependency

* fixes docstring and adds tests for multi-register circuit

* applies suggestions from comments

---------

Co-authored-by: Alessandro Cosentino <alessandro@unitary.fund>"
,unitaryfund,mitiq,mitiq/zne/tests/test_zne.py,"Upgrade Qiskit to 1.0.2 (#2269)

* updates dev_requirements for Qiskit 1.0.2

* updates qiskit_utils to not use execute

* updates conversions to use qasm2.dumps

* updates I gate

* adds TransformationPass to _transform_registers

* updates test

* updates zne tests

* fixes ddd tests

* fixes pec tests

* fixes zne scaling tests

* adds tests for transpiler

* updates aer version

* updates docs examples

* slightly refactors qiskit transpilations

* updates mitiq paper codeblock

* pin myst-parser dependency

* fixes docstring and adds tests for multi-register circuit

* applies suggestions from comments

---------

Co-authored-by: Alessandro Cosentino <alessandro@unitary.fund>"
,CQCL,pytket-docs,examples/circuit_generation_example.ipynb,"Clean up circuit generation example (#330)

* use circuit renderer in circuit generation example

* fix mistake in circuit gen

* clean up circuit example

* more cleanup, adding links

* update circuit generation example notebook"
,CQCL,pytket-docs,examples/python/circuit_generation_example.py,"Clean up circuit generation example (#330)

* use circuit renderer in circuit generation example

* fix mistake in circuit gen

* clean up circuit example

* more cleanup, adding links

* update circuit generation example notebook"
,CQCL,pytket-docs,manual/manual_circuit.rst,"Fix spacing in multiplexor table (#329)

* fix table spacing

* fix typo and formatting

* punctuation

* Multipexor -> MultiplexorBox"
,CQCL,pytket-docs,manual/manual_circuit.rst,"Update circuit composition content in user manual (#324)

* add tensor product example

* add example with RuntimeError

* minor text edits

* edit reg name

* add example for Circuit.add_circbox_with_regmap

* update sphinx references

* update one last refernce

* minor text edit

* fix typo

* size -> sizes

Co-authored-by: Alec Edgington <54802828+cqc-alec@users.noreply.github.com>

* Wording fix

Co-authored-by: Alec Edgington <54802828+cqc-alec@users.noreply.github.com>

* Update manual/manual_circuit.rst

Co-authored-by: Alec Edgington <54802828+cqc-alec@users.noreply.github.com>

* Update manual/manual_circuit.rst

Co-authored-by: Alec Edgington <54802828+cqc-alec@users.noreply.github.com>

* update Circuit.append example

* update one more link

---------

Co-authored-by: Alec Edgington <54802828+cqc-alec@users.noreply.github.com>"
,CQCL,pytket-docs,examples/phase_estimation.ipynb,"Update Quantum phase estimation example notebook (#327)

* fix qft naming issue

* use Circuit.add_gate

* add clean QPE notebook

* add notebook again"
,CQCL,pytket-docs,examples/python/phase_estimation.py,"Update Quantum phase estimation example notebook (#327)

* fix qft naming issue

* use Circuit.add_gate

* add clean QPE notebook

* add notebook again"
,CQCL,pytket-docs,manual/conf.py,"Use intersphinx properly to crosslink to API docs from manual (#309)

* fix external links for assertions page

* add pytket-qiskit to intersphinx_mapping

* fix links in manual backends pages

* fix some more backend links

* fix more backend links

* allow warnings in manual build

* fix pyclass: links

* fix py:class: links

* fix links for Predicate

* fix backendinfo links

* fix FullPeepholeOptimise links

* fix AerBackend links

* fix a bunch more links

* fix syntax error

* fix links again

* fix invalid tables after find and replace

* fix OpType links

* fix some more links

* fix broken links found by linkcheck

* remove extra word 'examples'

* fix circuit and Backend methods

* fix Qubit and Bit

* link to pytket-quantinuum

* fix Graph visualisation

* fix more links

* fix DecomposeBoxes

* fix yet more links

* link to sympy

* correct linking to pytket-quantinuum

* link to qiskit properly

* fix more links in circuit and Backend pages

* fix DecomposeBoxes

* fix predicates issue

* Get rid of dodgy sympy link

* Add some more link fixes to manual_assertion.rst

Added a couple of missing links in text that Github wouldn't let me easily propose changes to:
* `add_assert` should be `add_assertion`; also added the fully-qualified name.
* Added fully-qualified name for `get_debug_info`.

* Update manual_backend.rst

Adding in some links to methods where we don't have them already.

Also fixing up a couple of instances where we had `:py:class:` and should have had `:py:meth:`.

* fix sympy links

* add -W flag to manual build again

* use original doi paper links

* use -W flag in build script

* fix some more links in compiler section

* fix yet more links in compilation section

* fix a couple more links

* fix backend typos

* update qiskit link

* update installation stuff

* update final DOI link

* for -> on

* another DOI link

* Remove -W flag (address in separate PR)

---------

Co-authored-by: isobelhooper <isobel.hooper@cambridgequantum.com>"
,CQCL,pytket-docs,manual/manual_assertion.rst,"Use intersphinx properly to crosslink to API docs from manual (#309)

* fix external links for assertions page

* add pytket-qiskit to intersphinx_mapping

* fix links in manual backends pages

* fix some more backend links

* fix more backend links

* allow warnings in manual build

* fix pyclass: links

* fix py:class: links

* fix links for Predicate

* fix backendinfo links

* fix FullPeepholeOptimise links

* fix AerBackend links

* fix a bunch more links

* fix syntax error

* fix links again

* fix invalid tables after find and replace

* fix OpType links

* fix some more links

* fix broken links found by linkcheck

* remove extra word 'examples'

* fix circuit and Backend methods

* fix Qubit and Bit

* link to pytket-quantinuum

* fix Graph visualisation

* fix more links

* fix DecomposeBoxes

* fix yet more links

* link to sympy

* correct linking to pytket-quantinuum

* link to qiskit properly

* fix more links in circuit and Backend pages

* fix DecomposeBoxes

* fix predicates issue

* Get rid of dodgy sympy link

* Add some more link fixes to manual_assertion.rst

Added a couple of missing links in text that Github wouldn't let me easily propose changes to:
* `add_assert` should be `add_assertion`; also added the fully-qualified name.
* Added fully-qualified name for `get_debug_info`.

* Update manual_backend.rst

Adding in some links to methods where we don't have them already.

Also fixing up a couple of instances where we had `:py:class:` and should have had `:py:meth:`.

* fix sympy links

* add -W flag to manual build again

* use original doi paper links

* use -W flag in build script

* fix some more links in compiler section

* fix yet more links in compilation section

* fix a couple more links

* fix backend typos

* update qiskit link

* update installation stuff

* update final DOI link

* for -> on

* another DOI link

* Remove -W flag (address in separate PR)

---------

Co-authored-by: isobelhooper <isobel.hooper@cambridgequantum.com>"
,CQCL,pytket-docs,manual/manual_backend.rst,"Use intersphinx properly to crosslink to API docs from manual (#309)

* fix external links for assertions page

* add pytket-qiskit to intersphinx_mapping

* fix links in manual backends pages

* fix some more backend links

* fix more backend links

* allow warnings in manual build

* fix pyclass: links

* fix py:class: links

* fix links for Predicate

* fix backendinfo links

* fix FullPeepholeOptimise links

* fix AerBackend links

* fix a bunch more links

* fix syntax error

* fix links again

* fix invalid tables after find and replace

* fix OpType links

* fix some more links

* fix broken links found by linkcheck

* remove extra word 'examples'

* fix circuit and Backend methods

* fix Qubit and Bit

* link to pytket-quantinuum

* fix Graph visualisation

* fix more links

* fix DecomposeBoxes

* fix yet more links

* link to sympy

* correct linking to pytket-quantinuum

* link to qiskit properly

* fix more links in circuit and Backend pages

* fix DecomposeBoxes

* fix predicates issue

* Get rid of dodgy sympy link

* Add some more link fixes to manual_assertion.rst

Added a couple of missing links in text that Github wouldn't let me easily propose changes to:
* `add_assert` should be `add_assertion`; also added the fully-qualified name.
* Added fully-qualified name for `get_debug_info`.

* Update manual_backend.rst

Adding in some links to methods where we don't have them already.

Also fixing up a couple of instances where we had `:py:class:` and should have had `:py:meth:`.

* fix sympy links

* add -W flag to manual build again

* use original doi paper links

* use -W flag in build script

* fix some more links in compiler section

* fix yet more links in compilation section

* fix a couple more links

* fix backend typos

* update qiskit link

* update installation stuff

* update final DOI link

* for -> on

* another DOI link

* Remove -W flag (address in separate PR)

---------

Co-authored-by: isobelhooper <isobel.hooper@cambridgequantum.com>"
,CQCL,pytket-docs,manual/manual_compiler.rst,"Use intersphinx properly to crosslink to API docs from manual (#309)

* fix external links for assertions page

* add pytket-qiskit to intersphinx_mapping

* fix links in manual backends pages

* fix some more backend links

* fix more backend links

* allow warnings in manual build

* fix pyclass: links

* fix py:class: links

* fix links for Predicate

* fix backendinfo links

* fix FullPeepholeOptimise links

* fix AerBackend links

* fix a bunch more links

* fix syntax error

* fix links again

* fix invalid tables after find and replace

* fix OpType links

* fix some more links

* fix broken links found by linkcheck

* remove extra word 'examples'

* fix circuit and Backend methods

* fix Qubit and Bit

* link to pytket-quantinuum

* fix Graph visualisation

* fix more links

* fix DecomposeBoxes

* fix yet more links

* link to sympy

* correct linking to pytket-quantinuum

* link to qiskit properly

* fix more links in circuit and Backend pages

* fix DecomposeBoxes

* fix predicates issue

* Get rid of dodgy sympy link

* Add some more link fixes to manual_assertion.rst

Added a couple of missing links in text that Github wouldn't let me easily propose changes to:
* `add_assert` should be `add_assertion`; also added the fully-qualified name.
* Added fully-qualified name for `get_debug_info`.

* Update manual_backend.rst

Adding in some links to methods where we don't have them already.

Also fixing up a couple of instances where we had `:py:class:` and should have had `:py:meth:`.

* fix sympy links

* add -W flag to manual build again

* use original doi paper links

* use -W flag in build script

* fix some more links in compiler section

* fix yet more links in compilation section

* fix a couple more links

* fix backend typos

* update qiskit link

* update installation stuff

* update final DOI link

* for -> on

* another DOI link

* Remove -W flag (address in separate PR)

---------

Co-authored-by: isobelhooper <isobel.hooper@cambridgequantum.com>"
,CQCL,pytket-docs,manual/manual_noise.rst,"Use intersphinx properly to crosslink to API docs from manual (#309)

* fix external links for assertions page

* add pytket-qiskit to intersphinx_mapping

* fix links in manual backends pages

* fix some more backend links

* fix more backend links

* allow warnings in manual build

* fix pyclass: links

* fix py:class: links

* fix links for Predicate

* fix backendinfo links

* fix FullPeepholeOptimise links

* fix AerBackend links

* fix a bunch more links

* fix syntax error

* fix links again

* fix invalid tables after find and replace

* fix OpType links

* fix some more links

* fix broken links found by linkcheck

* remove extra word 'examples'

* fix circuit and Backend methods

* fix Qubit and Bit

* link to pytket-quantinuum

* fix Graph visualisation

* fix more links

* fix DecomposeBoxes

* fix yet more links

* link to sympy

* correct linking to pytket-quantinuum

* link to qiskit properly

* fix more links in circuit and Backend pages

* fix DecomposeBoxes

* fix predicates issue

* Get rid of dodgy sympy link

* Add some more link fixes to manual_assertion.rst

Added a couple of missing links in text that Github wouldn't let me easily propose changes to:
* `add_assert` should be `add_assertion`; also added the fully-qualified name.
* Added fully-qualified name for `get_debug_info`.

* Update manual_backend.rst

Adding in some links to methods where we don't have them already.

Also fixing up a couple of instances where we had `:py:class:` and should have had `:py:meth:`.

* fix sympy links

* add -W flag to manual build again

* use original doi paper links

* use -W flag in build script

* fix some more links in compiler section

* fix yet more links in compilation section

* fix a couple more links

* fix backend typos

* update qiskit link

* update installation stuff

* update final DOI link

* for -> on

* another DOI link

* Remove -W flag (address in separate PR)

---------

Co-authored-by: isobelhooper <isobel.hooper@cambridgequantum.com>"
,CQCL,pytket-docs,manual/manual_circuit.rst,"Fix `W` state example in the manual. (#299)

* fix a broken link in backends_example

* add backends example notebook after fix

* change werner state -> W state"
,NVIDIA,cuQuantum,benchmarks/README.md,"Merge branch 'new_bench' into 'main'

Release cuquantum-benchmarks v0.3.0 + Fix a sample

See merge request cuda-hpc-libraries/cuquantum-sdk/cuquantum-public!23"
,NVIDIA,cuQuantum,benchmarks/cuquantum_benchmarks/benchmarks/apply_gen_perm_matrix.py,"Merge branch 'new_bench' into 'main'

Release cuquantum-benchmarks v0.3.0 + Fix a sample

See merge request cuda-hpc-libraries/cuquantum-sdk/cuquantum-public!23"
,NVIDIA,cuQuantum,benchmarks/cuquantum_benchmarks/benchmarks/apply_matrix.py,"Merge branch 'new_bench' into 'main'

Release cuquantum-benchmarks v0.3.0 + Fix a sample

See merge request cuda-hpc-libraries/cuquantum-sdk/cuquantum-public!23"
,NVIDIA,cuQuantum,benchmarks/cuquantum_benchmarks/benchmarks/cusv_sampler.py,"Merge branch 'new_bench' into 'main'

Release cuquantum-benchmarks v0.3.0 + Fix a sample

See merge request cuda-hpc-libraries/cuquantum-sdk/cuquantum-public!23"
,NVIDIA,cuQuantum,benchmarks/cuquantum_benchmarks/config.py,"Merge branch 'new_bench' into 'main'

Release cuquantum-benchmarks v0.3.0 + Fix a sample

See merge request cuda-hpc-libraries/cuquantum-sdk/cuquantum-public!23"
,NVIDIA,cuQuantum,benchmarks/cuquantum_benchmarks/frontends/frontend_dumper.py,"Merge branch 'new_bench' into 'main'

Release cuquantum-benchmarks v0.3.0 + Fix a sample

See merge request cuda-hpc-libraries/cuquantum-sdk/cuquantum-public!23"
,NVIDIA,cuQuantum,benchmarks/cuquantum_benchmarks/frontends/frontend_pny.py,"Merge branch 'new_bench' into 'main'

Release cuquantum-benchmarks v0.3.0 + Fix a sample

See merge request cuda-hpc-libraries/cuquantum-sdk/cuquantum-public!23"
,NVIDIA,cuQuantum,benchmarks/cuquantum_benchmarks/frontends/frontend_qiskit.py,"Merge branch 'new_bench' into 'main'

Release cuquantum-benchmarks v0.3.0 + Fix a sample

See merge request cuda-hpc-libraries/cuquantum-sdk/cuquantum-public!23"
,microsoft,PQCrypto-VPN,README.md,"Update README.md to mention qTESLA, and correct note about where to open issues"
,microsoft,PQCrypto-VPN,openvpn/config/server-passdb.ovpn,"Conform to OpenVPN behavior for letting OpenSSL choose suitable defaults

A previous change in the OpenVPN submodule tried to choose p256-sikep434 as a default if no ecdh-curve directive was present, and this worked because of a bug in OpenVPN that was fixed in v2.4.9. Instead of working around this, we return to OpenVPN's intended behavior, since the OQS fork of OpenSSL should eventually take charge of picking suitable defaults to only be post-quantum. Expand the comments in the sample configuration files to make it clear the ecdh-curve directive must be specified at least on the server to guarantee a post-=quantum key exchange."
,microsoft,PQCrypto-VPN,openvpn/config/server.ovpn,"Conform to OpenVPN behavior for letting OpenSSL choose suitable defaults

A previous change in the OpenVPN submodule tried to choose p256-sikep434 as a default if no ecdh-curve directive was present, and this worked because of a bug in OpenVPN that was fixed in v2.4.9. Instead of working around this, we return to OpenVPN's intended behavior, since the OQS fork of OpenSSL should eventually take charge of picking suitable defaults to only be post-quantum. Expand the comments in the sample configuration files to make it clear the ecdh-curve directive must be specified at least on the server to guarantee a post-=quantum key exchange."
,microsoft,PQCrypto-VPN,openvpn/config/client-passdb.ovpn,"Documentation improvements to README.md and sample configuration files

Correct some details about Ubuntu versions and testing in the README. Update current known issues.
Expand documentation in configuration files to make it clear how to avoid accidentally using non-PQ key exchange algorithms."
,microsoft,PQCrypto-VPN,openvpn/config/client-win.ovpn,"Documentation improvements to README.md and sample configuration files

Correct some details about Ubuntu versions and testing in the README. Update current known issues.
Expand documentation in configuration files to make it clear how to avoid accidentally using non-PQ key exchange algorithms."
,microsoft,PQCrypto-VPN,openvpn/config/client.ovpn,"Documentation improvements to README.md and sample configuration files

Correct some details about Ubuntu versions and testing in the README. Update current known issues.
Expand documentation in configuration files to make it clear how to avoid accidentally using non-PQ key exchange algorithms."
,microsoft,PQCrypto-VPN,openvpn/config/server-passdb.ovpn,"Documentation improvements to README.md and sample configuration files

Correct some details about Ubuntu versions and testing in the README. Update current known issues.
Expand documentation in configuration files to make it clear how to avoid accidentally using non-PQ key exchange algorithms."
,microsoft,PQCrypto-VPN,openvpn/config/server.ovpn,"Documentation improvements to README.md and sample configuration files

Correct some details about Ubuntu versions and testing in the README. Update current known issues.
Expand documentation in configuration files to make it clear how to avoid accidentally using non-PQ key exchange algorithms."
,XanaduAI,quantum-neural-networks,fraud_detection/fraud_detection.py,"Minor corrections to code to bring into line with paper (#3)

* Fix bug in input layer

* Correct number of layers

* Update to latest version of SF

* Update to latest sf in testing.py

* Correct typo in section title

* Update iteration number in testing to match training

* Provide gitignore

* Update git ignore

* Update roc

* Update gitignore

* Fix saver

* Update testing iteration number

* Update fraud_detection iterations"
,XanaduAI,quantum-neural-networks,fraud_detection/testing.py,"Minor corrections to code to bring into line with paper (#3)

* Fix bug in input layer

* Correct number of layers

* Update to latest version of SF

* Update to latest sf in testing.py

* Correct typo in section title

* Update iteration number in testing to match training

* Provide gitignore

* Update git ignore

* Update roc

* Update gitignore

* Fix saver

* Update testing iteration number

* Update fraud_detection iterations"
,microsoft,qsharp-runtime,src/Simulation/QSharpFoundation/Estimation/AccountForEstimates.qs,"Added definitions of resources estimation functions (#1124)

* Added definitions of resources estimation functions

* Added suffix Key to tuple keys

* Updated comments and namespace, added SingleVariant()

* Updated API based on feedback

* Updated estimator API based on review

* Fix typo

* Updated according to dev spec review

* Renamed file, added comments

---------

Co-authored-by: Dmitry Vasilevsky <dmitryv@microsoft.com>"
,microsoft,qsharp-runtime,src/Simulation/QSharpFoundation/Estimation/Caching.qs,"Added definitions of resources estimation functions (#1124)

* Added definitions of resources estimation functions

* Added suffix Key to tuple keys

* Updated comments and namespace, added SingleVariant()

* Updated API based on feedback

* Updated estimator API based on review

* Fix typo

* Updated according to dev spec review

* Renamed file, added comments

---------

Co-authored-by: Dmitry Vasilevsky <dmitryv@microsoft.com>"
,microsoft,qsharp-runtime,src/Simulation/TargetDefinitions/Decompositions/AssertOperationsEqualInPlace.qs,Fix `AssertOperationsEqualInPlace` (#1135)
,microsoft,qsharp-runtime,Simulation.sln,"Expose joint rotations publicly, update test infrastructure (#1117)

* Rename files from IsingXX to Rxx etc

* Update comments

* Add Exp decompositions, fix intrinsics.

* Implement two qubit rotation decomps

* Update Type1 decomps to use Rzz, Rx, Rz intrinsic

* Update file names

* Fix copyright comments

* Fix Rzz doc comments"
,microsoft,qsharp-runtime,src/Simulation/Simulators/CommonNativeSimulator/ApplyUncontrolledRxx.cs,"Expose joint rotations publicly, update test infrastructure (#1117)

* Rename files from IsingXX to Rxx etc

* Update comments

* Add Exp decompositions, fix intrinsics.

* Implement two qubit rotation decomps

* Update Type1 decomps to use Rzz, Rx, Rz intrinsic

* Update file names

* Fix copyright comments

* Fix Rzz doc comments"
,microsoft,qsharp-runtime,src/Simulation/Simulators/CommonNativeSimulator/ApplyUncontrolledRyy.cs,"Expose joint rotations publicly, update test infrastructure (#1117)

* Rename files from IsingXX to Rxx etc

* Update comments

* Add Exp decompositions, fix intrinsics.

* Implement two qubit rotation decomps

* Update Type1 decomps to use Rzz, Rx, Rz intrinsic

* Update file names

* Fix copyright comments

* Fix Rzz doc comments"
,microsoft,qsharp-runtime,src/Simulation/Simulators/CommonNativeSimulator/ApplyUncontrolledRzz.cs,"Expose joint rotations publicly, update test infrastructure (#1117)

* Rename files from IsingXX to Rxx etc

* Update comments

* Add Exp decompositions, fix intrinsics.

* Implement two qubit rotation decomps

* Update Type1 decomps to use Rzz, Rx, Rz intrinsic

* Update file names

* Fix copyright comments

* Fix Rzz doc comments"
,microsoft,qsharp-runtime,src/Simulation/Simulators/QCTraceSimulator/Circuits/Primitive.IsingXX.qs,"Expose joint rotations publicly, update test infrastructure (#1117)

* Rename files from IsingXX to Rxx etc

* Update comments

* Add Exp decompositions, fix intrinsics.

* Implement two qubit rotation decomps

* Update Type1 decomps to use Rzz, Rx, Rz intrinsic

* Update file names

* Fix copyright comments

* Fix Rzz doc comments"
,microsoft,qsharp-runtime,src/Simulation/Simulators/QCTraceSimulator/Circuits/Primitive.IsingYY.qs,"Expose joint rotations publicly, update test infrastructure (#1117)

* Rename files from IsingXX to Rxx etc

* Update comments

* Add Exp decompositions, fix intrinsics.

* Implement two qubit rotation decomps

* Update Type1 decomps to use Rzz, Rx, Rz intrinsic

* Update file names

* Fix copyright comments

* Fix Rzz doc comments"
,microsoft,qsharp-runtime,src/Simulation/Simulators/QCTraceSimulator/Circuits/Primitive.IsingZZ.qs,"Expose joint rotations publicly, update test infrastructure (#1117)

* Rename files from IsingXX to Rxx etc

* Update comments

* Add Exp decompositions, fix intrinsics.

* Implement two qubit rotation decomps

* Update Type1 decomps to use Rzz, Rx, Rz intrinsic

* Update file names

* Fix copyright comments

* Fix Rzz doc comments"
,microsoft,qsharp-runtime,src/Simulation/TargetDefinitions/Decompositions/ApplyControlledX.qs,"Expose joint rotations publicly, update test infrastructure (#1117)

* Rename files from IsingXX to Rxx etc

* Update comments

* Add Exp decompositions, fix intrinsics.

* Implement two qubit rotation decomps

* Update Type1 decomps to use Rzz, Rx, Rz intrinsic

* Update file names

* Fix copyright comments

* Fix Rzz doc comments"
,microsoft,qsharp-runtime,src/Simulation/TargetDefinitions/Decompositions/ApplyControlledZFromRzz.qs,"Expose joint rotations publicly, update test infrastructure (#1117)

* Rename files from IsingXX to Rxx etc

* Update comments

* Add Exp decompositions, fix intrinsics.

* Implement two qubit rotation decomps

* Update Type1 decomps to use Rzz, Rx, Rz intrinsic

* Update file names

* Fix copyright comments

* Fix Rzz doc comments"
,microsoft,qsharp-runtime,src/Simulation/TargetDefinitions/Decompositions/ApplyUncontrolledH.qs,"Expose joint rotations publicly, update test infrastructure (#1117)

* Rename files from IsingXX to Rxx etc

* Update comments

* Add Exp decompositions, fix intrinsics.

* Implement two qubit rotation decomps

* Update Type1 decomps to use Rzz, Rx, Rz intrinsic

* Update file names

* Fix copyright comments

* Fix Rzz doc comments"
,microsoft,qsharp-runtime,src/Simulation/TargetDefinitions/Decompositions/ApplyUncontrolledRy.qs,"Expose joint rotations publicly, update test infrastructure (#1117)

* Rename files from IsingXX to Rxx etc

* Update comments

* Add Exp decompositions, fix intrinsics.

* Implement two qubit rotation decomps

* Update Type1 decomps to use Rzz, Rx, Rz intrinsic

* Update file names

* Fix copyright comments

* Fix Rzz doc comments"
,microsoft,qsharp-runtime,src/Simulation/TargetDefinitions/Decompositions/ApplyUncontrolledS.qs,"Expose joint rotations publicly, update test infrastructure (#1117)

* Rename files from IsingXX to Rxx etc

* Update comments

* Add Exp decompositions, fix intrinsics.

* Implement two qubit rotation decomps

* Update Type1 decomps to use Rzz, Rx, Rz intrinsic

* Update file names

* Fix copyright comments

* Fix Rzz doc comments"
,microsoft,qsharp-runtime,src/Simulation/TargetDefinitions/Decompositions/ApplyUncontrolledSAdj.qs,"Expose joint rotations publicly, update test infrastructure (#1117)

* Rename files from IsingXX to Rxx etc

* Update comments

* Add Exp decompositions, fix intrinsics.

* Implement two qubit rotation decomps

* Update Type1 decomps to use Rzz, Rx, Rz intrinsic

* Update file names

* Fix copyright comments

* Fix Rzz doc comments"
,microsoft,qsharp-runtime,src/Simulation/TargetDefinitions/Decompositions/ApplyUncontrolledT.qs,"Expose joint rotations publicly, update test infrastructure (#1117)

* Rename files from IsingXX to Rxx etc

* Update comments

* Add Exp decompositions, fix intrinsics.

* Implement two qubit rotation decomps

* Update Type1 decomps to use Rzz, Rx, Rz intrinsic

* Update file names

* Fix copyright comments

* Fix Rzz doc comments"
,microsoft,qsharp-runtime,src/Simulation/TargetDefinitions/Decompositions/ApplyUncontrolledTAdj.qs,"Expose joint rotations publicly, update test infrastructure (#1117)

* Rename files from IsingXX to Rxx etc

* Update comments

* Add Exp decompositions, fix intrinsics.

* Implement two qubit rotation decomps

* Update Type1 decomps to use Rzz, Rx, Rz intrinsic

* Update file names

* Fix copyright comments

* Fix Rzz doc comments"
,microsoft,qsharp-runtime,src/Simulation/TargetDefinitions/Decompositions/ApplyUncontrolledX.qs,"Expose joint rotations publicly, update test infrastructure (#1117)

* Rename files from IsingXX to Rxx etc

* Update comments

* Add Exp decompositions, fix intrinsics.

* Implement two qubit rotation decomps

* Update Type1 decomps to use Rzz, Rx, Rz intrinsic

* Update file names

* Fix copyright comments

* Fix Rzz doc comments"
,microsoft,qsharp-runtime,src/Simulation/TargetDefinitions/Decompositions/ApplyUncontrolledY.qs,"Expose joint rotations publicly, update test infrastructure (#1117)

* Rename files from IsingXX to Rxx etc

* Update comments

* Add Exp decompositions, fix intrinsics.

* Implement two qubit rotation decomps

* Update Type1 decomps to use Rzz, Rx, Rz intrinsic

* Update file names

* Fix copyright comments

* Fix Rzz doc comments"
,microsoft,qsharp-runtime,src/Simulation/TargetDefinitions/Decompositions/ApplyUncontrolledZ.qs,"Expose joint rotations publicly, update test infrastructure (#1117)

* Rename files from IsingXX to Rxx etc

* Update comments

* Add Exp decompositions, fix intrinsics.

* Implement two qubit rotation decomps

* Update Type1 decomps to use Rzz, Rx, Rz intrinsic

* Update file names

* Fix copyright comments

* Fix Rzz doc comments"
,microsoft,qsharp-runtime,src/Simulation/TargetDefinitions/Decompositions/ExpUtilFromIsing.qs,"Expose joint rotations publicly, update test infrastructure (#1117)

* Rename files from IsingXX to Rxx etc

* Update comments

* Add Exp decompositions, fix intrinsics.

* Implement two qubit rotation decomps

* Update Type1 decomps to use Rzz, Rx, Rz intrinsic

* Update file names

* Fix copyright comments

* Fix Rzz doc comments"
,microsoft,qsharp-runtime,src/Simulation/TargetDefinitions/Decompositions/RxxFromExp.qs,"Expose joint rotations publicly, update test infrastructure (#1117)

* Rename files from IsingXX to Rxx etc

* Update comments

* Add Exp decompositions, fix intrinsics.

* Implement two qubit rotation decomps

* Update Type1 decomps to use Rzz, Rx, Rz intrinsic

* Update file names

* Fix copyright comments

* Fix Rzz doc comments"
,microsoft,qsharp-runtime,src/Simulation/TargetDefinitions/Decompositions/RxxFromRzz.qs,"Expose joint rotations publicly, update test infrastructure (#1117)

* Rename files from IsingXX to Rxx etc

* Update comments

* Add Exp decompositions, fix intrinsics.

* Implement two qubit rotation decomps

* Update Type1 decomps to use Rzz, Rx, Rz intrinsic

* Update file names

* Fix copyright comments

* Fix Rzz doc comments"
,microsoft,qsharp-runtime,src/Simulation/TargetDefinitions/Decompositions/RxxFromSinglyControlled.qs,"Expose joint rotations publicly, update test infrastructure (#1117)

* Rename files from IsingXX to Rxx etc

* Update comments

* Add Exp decompositions, fix intrinsics.

* Implement two qubit rotation decomps

* Update Type1 decomps to use Rzz, Rx, Rz intrinsic

* Update file names

* Fix copyright comments

* Fix Rzz doc comments"
,microsoft,qsharp-runtime,src/Simulation/TargetDefinitions/Decompositions/RyyFromExp.qs,"Expose joint rotations publicly, update test infrastructure (#1117)

* Rename files from IsingXX to Rxx etc

* Update comments

* Add Exp decompositions, fix intrinsics.

* Implement two qubit rotation decomps

* Update Type1 decomps to use Rzz, Rx, Rz intrinsic

* Update file names

* Fix copyright comments

* Fix Rzz doc comments"
,microsoft,qsharp-runtime,src/Simulation/TargetDefinitions/Decompositions/RyyFromRzz.qs,"Expose joint rotations publicly, update test infrastructure (#1117)

* Rename files from IsingXX to Rxx etc

* Update comments

* Add Exp decompositions, fix intrinsics.

* Implement two qubit rotation decomps

* Update Type1 decomps to use Rzz, Rx, Rz intrinsic

* Update file names

* Fix copyright comments

* Fix Rzz doc comments"
,microsoft,qsharp-runtime,src/Simulation/TargetDefinitions/Decompositions/RyyFromSinglyControlled.qs,"Expose joint rotations publicly, update test infrastructure (#1117)

* Rename files from IsingXX to Rxx etc

* Update comments

* Add Exp decompositions, fix intrinsics.

* Implement two qubit rotation decomps

* Update Type1 decomps to use Rzz, Rx, Rz intrinsic

* Update file names

* Fix copyright comments

* Fix Rzz doc comments"
,microsoft,qsharp-runtime,src/Simulation/TargetDefinitions/Decompositions/RzzFromExp.qs,"Expose joint rotations publicly, update test infrastructure (#1117)

* Rename files from IsingXX to Rxx etc

* Update comments

* Add Exp decompositions, fix intrinsics.

* Implement two qubit rotation decomps

* Update Type1 decomps to use Rzz, Rx, Rz intrinsic

* Update file names

* Fix copyright comments

* Fix Rzz doc comments"
,microsoft,qsharp-runtime,src/Simulation/TargetDefinitions/Decompositions/RzzFromRz.qs,"Expose joint rotations publicly, update test infrastructure (#1117)

* Rename files from IsingXX to Rxx etc

* Update comments

* Add Exp decompositions, fix intrinsics.

* Implement two qubit rotation decomps

* Update Type1 decomps to use Rzz, Rx, Rz intrinsic

* Update file names

* Fix copyright comments

* Fix Rzz doc comments"
,microsoft,qsharp-runtime,src/Simulation/TargetDefinitions/Decompositions/RzzFromSinglyControlled.qs,"Expose joint rotations publicly, update test infrastructure (#1117)

* Rename files from IsingXX to Rxx etc

* Update comments

* Add Exp decompositions, fix intrinsics.

* Implement two qubit rotation decomps

* Update Type1 decomps to use Rzz, Rx, Rz intrinsic

* Update file names

* Fix copyright comments

* Fix Rzz doc comments"
,microsoft,qsharp-runtime,src/Simulation/TargetDefinitions/Interfaces/IIntrinsicApplyUncontrolledRxx.cs,"Expose joint rotations publicly, update test infrastructure (#1117)

* Rename files from IsingXX to Rxx etc

* Update comments

* Add Exp decompositions, fix intrinsics.

* Implement two qubit rotation decomps

* Update Type1 decomps to use Rzz, Rx, Rz intrinsic

* Update file names

* Fix copyright comments

* Fix Rzz doc comments"
,microsoft,qsharp-runtime,src/Simulation/TargetDefinitions/Interfaces/IIntrinsicApplyUncontrolledRyy.cs,"Expose joint rotations publicly, update test infrastructure (#1117)

* Rename files from IsingXX to Rxx etc

* Update comments

* Add Exp decompositions, fix intrinsics.

* Implement two qubit rotation decomps

* Update Type1 decomps to use Rzz, Rx, Rz intrinsic

* Update file names

* Fix copyright comments

* Fix Rzz doc comments"
,microsoft,qsharp-runtime,src/Simulation/TargetDefinitions/Interfaces/IIntrinsicApplyUncontrolledRzz.cs,"Expose joint rotations publicly, update test infrastructure (#1117)

* Rename files from IsingXX to Rxx etc

* Update comments

* Add Exp decompositions, fix intrinsics.

* Implement two qubit rotation decomps

* Update Type1 decomps to use Rzz, Rx, Rz intrinsic

* Update file names

* Fix copyright comments

* Fix Rzz doc comments"
,microsoft,qsharp-runtime,src/Simulation/TargetDefinitions/Interfaces/IType2Core.cs,"Expose joint rotations publicly, update test infrastructure (#1117)

* Rename files from IsingXX to Rxx etc

* Update comments

* Add Exp decompositions, fix intrinsics.

* Implement two qubit rotation decomps

* Update Type1 decomps to use Rzz, Rx, Rz intrinsic

* Update file names

* Fix copyright comments

* Fix Rzz doc comments"
,microsoft,qsharp-runtime,src/Simulation/TargetDefinitions/Intrinsic/ApplyUncontrolledRxx.qs,"Expose joint rotations publicly, update test infrastructure (#1117)

* Rename files from IsingXX to Rxx etc

* Update comments

* Add Exp decompositions, fix intrinsics.

* Implement two qubit rotation decomps

* Update Type1 decomps to use Rzz, Rx, Rz intrinsic

* Update file names

* Fix copyright comments

* Fix Rzz doc comments"
,microsoft,qsharp-runtime,src/Simulation/TargetDefinitions/Intrinsic/ApplyUncontrolledRyy.qs,"Expose joint rotations publicly, update test infrastructure (#1117)

* Rename files from IsingXX to Rxx etc

* Update comments

* Add Exp decompositions, fix intrinsics.

* Implement two qubit rotation decomps

* Update Type1 decomps to use Rzz, Rx, Rz intrinsic

* Update file names

* Fix copyright comments

* Fix Rzz doc comments"
,microsoft,qsharp-runtime,src/Simulation/TargetDefinitions/Intrinsic/ApplyUncontrolledRzz.qs,"Expose joint rotations publicly, update test infrastructure (#1117)

* Rename files from IsingXX to Rxx etc

* Update comments

* Add Exp decompositions, fix intrinsics.

* Implement two qubit rotation decomps

* Update Type1 decomps to use Rzz, Rx, Rz intrinsic

* Update file names

* Fix copyright comments

* Fix Rzz doc comments"
,microsoft,qsharp-runtime,src/Simulation/TargetDefinitions/TargetPackages/QSharpCore.Package.props,"Expose joint rotations publicly, update test infrastructure (#1117)

* Rename files from IsingXX to Rxx etc

* Update comments

* Add Exp decompositions, fix intrinsics.

* Implement two qubit rotation decomps

* Update Type1 decomps to use Rzz, Rx, Rz intrinsic

* Update file names

* Fix copyright comments

* Fix Rzz doc comments"
,microsoft,qsharp-runtime,src/Simulation/TargetDefinitions/TargetPackages/Type1.Package.props,"Expose joint rotations publicly, update test infrastructure (#1117)

* Rename files from IsingXX to Rxx etc

* Update comments

* Add Exp decompositions, fix intrinsics.

* Implement two qubit rotation decomps

* Update Type1 decomps to use Rzz, Rx, Rz intrinsic

* Update file names

* Fix copyright comments

* Fix Rzz doc comments"
,microsoft,qsharp-runtime,src/Simulation/TargetDefinitions/TargetPackages/Type2.Package.props,"Expose joint rotations publicly, update test infrastructure (#1117)

* Rename files from IsingXX to Rxx etc

* Update comments

* Add Exp decompositions, fix intrinsics.

* Implement two qubit rotation decomps

* Update Type1 decomps to use Rzz, Rx, Rz intrinsic

* Update file names

* Fix copyright comments

* Fix Rzz doc comments"
,microsoft,qsharp-runtime,src/Simulation/TargetDefinitions/TargetPackages/Type3.Package.props,"Expose joint rotations publicly, update test infrastructure (#1117)

* Rename files from IsingXX to Rxx etc

* Update comments

* Add Exp decompositions, fix intrinsics.

* Implement two qubit rotation decomps

* Update Type1 decomps to use Rzz, Rx, Rz intrinsic

* Update file names

* Fix copyright comments

* Fix Rzz doc comments"
,microsoft,qsharp-runtime,src/Simulation/TargetDefinitions/TargetPackages/Type4.Package.props,"Expose joint rotations publicly, update test infrastructure (#1117)

* Rename files from IsingXX to Rxx etc

* Update comments

* Add Exp decompositions, fix intrinsics.

* Implement two qubit rotation decomps

* Update Type1 decomps to use Rzz, Rx, Rz intrinsic

* Update file names

* Fix copyright comments

* Fix Rzz doc comments"
,microsoft,qsharp-runtime,src/Simulation/TargetDefinitions/Tests/DecompositionTests.qs,"Expose joint rotations publicly, update test infrastructure (#1117)

* Rename files from IsingXX to Rxx etc

* Update comments

* Add Exp decompositions, fix intrinsics.

* Implement two qubit rotation decomps

* Update Type1 decomps to use Rzz, Rx, Rz intrinsic

* Update file names

* Fix copyright comments

* Fix Rzz doc comments"
,microsoft,qsharp-runtime,src/Simulation/TargetDefinitions/Tests/Reference.qs,"Expose joint rotations publicly, update test infrastructure (#1117)

* Rename files from IsingXX to Rxx etc

* Update comments

* Add Exp decompositions, fix intrinsics.

* Implement two qubit rotation decomps

* Update Type1 decomps to use Rzz, Rx, Rz intrinsic

* Update file names

* Fix copyright comments

* Fix Rzz doc comments"
,microsoft,qsharp-runtime,src/Simulation/TargetDefinitions/Tests/Tests.TargetDefinitions.csproj,"Expose joint rotations publicly, update test infrastructure (#1117)

* Rename files from IsingXX to Rxx etc

* Update comments

* Add Exp decompositions, fix intrinsics.

* Implement two qubit rotation decomps

* Update Type1 decomps to use Rzz, Rx, Rz intrinsic

* Update file names

* Fix copyright comments

* Fix Rzz doc comments"
,microsoft,qsharp-runtime,src/Simulation/TargetDefinitions/Tests/Type1/Tests.Type1.csproj,"Expose joint rotations publicly, update test infrastructure (#1117)

* Rename files from IsingXX to Rxx etc

* Update comments

* Add Exp decompositions, fix intrinsics.

* Implement two qubit rotation decomps

* Update Type1 decomps to use Rzz, Rx, Rz intrinsic

* Update file names

* Fix copyright comments

* Fix Rzz doc comments"
,microsoft,qsharp-runtime,src/Simulation/TargetDefinitions/Tests/Type1/Tests.qs,"Expose joint rotations publicly, update test infrastructure (#1117)

* Rename files from IsingXX to Rxx etc

* Update comments

* Add Exp decompositions, fix intrinsics.

* Implement two qubit rotation decomps

* Update Type1 decomps to use Rzz, Rx, Rz intrinsic

* Update file names

* Fix copyright comments

* Fix Rzz doc comments"
,amazon-braket,amazon-braket-sdk-python,src/braket/circuits/result_type.py,fix: check the qubit set length against observables (#970)
,amazon-braket,amazon-braket-sdk-python,src/braket/circuits/text_diagram_builders/text_circuit_diagram_utils.py,"Feature: Code refactoring with Sourcery (#954)

* fix: update to python 39 syntax

* fix: sourcery corrections

fix: line too long error

* fix: tests

* fix: tests

* fix: tests

* Update src/braket/circuits/circuit.py

Co-authored-by: Ashlyn Hanson <65787294+ashlhans@users.noreply.github.com>

* fix: update readme, delete .yaml

---------

Co-authored-by: Ashlyn Hanson <65787294+ashlhans@users.noreply.github.com>"
,amazon-braket,amazon-braket-sdk-python,src/braket/devices/device.py,"Feature: Code refactoring with Sourcery (#954)

* fix: update to python 39 syntax

* fix: sourcery corrections

fix: line too long error

* fix: tests

* fix: tests

* fix: tests

* Update src/braket/circuits/circuit.py

Co-authored-by: Ashlyn Hanson <65787294+ashlhans@users.noreply.github.com>

* fix: update readme, delete .yaml

---------

Co-authored-by: Ashlyn Hanson <65787294+ashlhans@users.noreply.github.com>"
,amazon-braket,amazon-braket-sdk-python,test/unit_tests/braket/circuits/test_observables.py,"Feature: Code refactoring with Sourcery (#954)

* fix: update to python 39 syntax

* fix: sourcery corrections

fix: line too long error

* fix: tests

* fix: tests

* fix: tests

* Update src/braket/circuits/circuit.py

Co-authored-by: Ashlyn Hanson <65787294+ashlhans@users.noreply.github.com>

* fix: update readme, delete .yaml

---------

Co-authored-by: Ashlyn Hanson <65787294+ashlhans@users.noreply.github.com>"
,amazon-braket,amazon-braket-sdk-python,src/braket/circuits/circuit.py,"fix: measure target qubits are required (#940)

* fix: measure target qubits are required

* removed commented out code

* fix test name that changed during merge conflict resolution

* convert non iterable targets to QubitSet, reformat conditions, add test for target_mapping to increase coverage

* move check for already measured target qubits to check_if_qubit_measured function

* simplify previously measured qubit error message

* pull in the latest default-simulator version

* Apply suggestions from code review

Co-authored-by: Cody Wang <speller26@gmail.com>

* Update src/braket/circuits/circuit.py

* Apply suggestions from code review

---------

Co-authored-by: Cody Wang <speller26@gmail.com>"
,amazon-braket,amazon-braket-sdk-python,src/braket/circuits/moments.py,"fix: measure target qubits are required (#940)

* fix: measure target qubits are required

* removed commented out code

* fix test name that changed during merge conflict resolution

* convert non iterable targets to QubitSet, reformat conditions, add test for target_mapping to increase coverage

* move check for already measured target qubits to check_if_qubit_measured function

* simplify previously measured qubit error message

* pull in the latest default-simulator version

* Apply suggestions from code review

Co-authored-by: Cody Wang <speller26@gmail.com>

* Update src/braket/circuits/circuit.py

* Apply suggestions from code review

---------

Co-authored-by: Cody Wang <speller26@gmail.com>"
,amazon-braket,amazon-braket-sdk-python,test/unit_tests/braket/circuits/test_ascii_circuit_diagram.py,"fix: measure target qubits are required (#940)

* fix: measure target qubits are required

* removed commented out code

* fix test name that changed during merge conflict resolution

* convert non iterable targets to QubitSet, reformat conditions, add test for target_mapping to increase coverage

* move check for already measured target qubits to check_if_qubit_measured function

* simplify previously measured qubit error message

* pull in the latest default-simulator version

* Apply suggestions from code review

Co-authored-by: Cody Wang <speller26@gmail.com>

* Update src/braket/circuits/circuit.py

* Apply suggestions from code review

---------

Co-authored-by: Cody Wang <speller26@gmail.com>"
,amazon-braket,amazon-braket-sdk-python,test/unit_tests/braket/circuits/test_circuit.py,"fix: measure target qubits are required (#940)

* fix: measure target qubits are required

* removed commented out code

* fix test name that changed during merge conflict resolution

* convert non iterable targets to QubitSet, reformat conditions, add test for target_mapping to increase coverage

* move check for already measured target qubits to check_if_qubit_measured function

* simplify previously measured qubit error message

* pull in the latest default-simulator version

* Apply suggestions from code review

Co-authored-by: Cody Wang <speller26@gmail.com>

* Update src/braket/circuits/circuit.py

* Apply suggestions from code review

---------

Co-authored-by: Cody Wang <speller26@gmail.com>"
,amazon-braket,amazon-braket-sdk-python,test/unit_tests/braket/circuits/test_unicode_circuit_diagram.py,"fix: measure target qubits are required (#940)

* fix: measure target qubits are required

* removed commented out code

* fix test name that changed during merge conflict resolution

* convert non iterable targets to QubitSet, reformat conditions, add test for target_mapping to increase coverage

* move check for already measured target qubits to check_if_qubit_measured function

* simplify previously measured qubit error message

* pull in the latest default-simulator version

* Apply suggestions from code review

Co-authored-by: Cody Wang <speller26@gmail.com>

* Update src/braket/circuits/circuit.py

* Apply suggestions from code review

---------

Co-authored-by: Cody Wang <speller26@gmail.com>"
,qiskit-community,qiskit-nature,qiskit_nature/second_q/mappers/__init__.py,"Bosonic logarithmic mapper (#1356)

* Added bosonic log mapper

* Created mapper tests. Fixes in algorithm

* Added annihilation operator tests. Fixes in algo

* Added more unit tests

* Added more unit tests

* Style fixes. Added documentation

* Added release note

* CI fixes

* Further CI fixes

* Apply suggestions from code review

Co-authored-by: Max Rossmannek <max.rossmannek@uzh.ch>

* PR fixes

* Style fixes

* Style fix

* Some phrasing from PR review

Co-authored-by: Max Rossmannek <max.rossmannek@uzh.ch>

* Refactor of single qubit op mapping

* Added missing unit tests

* Added bosonic log mapper

* Created mapper tests. Fixes in algorithm

* Added annihilation operator tests. Fixes in algo

* Added more unit tests

* Added more unit tests

* Style fixes. Added documentation

* Added release note

* CI fixes

* Further CI fixes

* Apply suggestions from code review

Co-authored-by: Max Rossmannek <max.rossmannek@uzh.ch>

* PR fixes

* Style fixes

* Style fix

* Some phrasing from PR review

Co-authored-by: Max Rossmannek <max.rossmannek@uzh.ch>

* Refactor of single qubit op mapping

* Added missing unit tests

* Fixed typo

* Doc fixes from code review

Co-authored-by: Max Rossmannek <max.rossmannek@uzh.ch>

* Raise error instead of break statement

* Minor fix

---------

Co-authored-by: Max Rossmannek <max.rossmannek@uzh.ch>"
,qiskit-community,qiskit-nature,qiskit_nature/second_q/mappers/bosonic_linear_mapper.py,"Bosonic logarithmic mapper (#1356)

* Added bosonic log mapper

* Created mapper tests. Fixes in algorithm

* Added annihilation operator tests. Fixes in algo

* Added more unit tests

* Added more unit tests

* Style fixes. Added documentation

* Added release note

* CI fixes

* Further CI fixes

* Apply suggestions from code review

Co-authored-by: Max Rossmannek <max.rossmannek@uzh.ch>

* PR fixes

* Style fixes

* Style fix

* Some phrasing from PR review

Co-authored-by: Max Rossmannek <max.rossmannek@uzh.ch>

* Refactor of single qubit op mapping

* Added missing unit tests

* Added bosonic log mapper

* Created mapper tests. Fixes in algorithm

* Added annihilation operator tests. Fixes in algo

* Added more unit tests

* Added more unit tests

* Style fixes. Added documentation

* Added release note

* CI fixes

* Further CI fixes

* Apply suggestions from code review

Co-authored-by: Max Rossmannek <max.rossmannek@uzh.ch>

* PR fixes

* Style fixes

* Style fix

* Some phrasing from PR review

Co-authored-by: Max Rossmannek <max.rossmannek@uzh.ch>

* Refactor of single qubit op mapping

* Added missing unit tests

* Fixed typo

* Doc fixes from code review

Co-authored-by: Max Rossmannek <max.rossmannek@uzh.ch>

* Raise error instead of break statement

* Minor fix

---------

Co-authored-by: Max Rossmannek <max.rossmannek@uzh.ch>"
,qiskit-community,qiskit-nature,qiskit_nature/second_q/mappers/bosonic_logarithmic_mapper.py,"Bosonic logarithmic mapper (#1356)

* Added bosonic log mapper

* Created mapper tests. Fixes in algorithm

* Added annihilation operator tests. Fixes in algo

* Added more unit tests

* Added more unit tests

* Style fixes. Added documentation

* Added release note

* CI fixes

* Further CI fixes

* Apply suggestions from code review

Co-authored-by: Max Rossmannek <max.rossmannek@uzh.ch>

* PR fixes

* Style fixes

* Style fix

* Some phrasing from PR review

Co-authored-by: Max Rossmannek <max.rossmannek@uzh.ch>

* Refactor of single qubit op mapping

* Added missing unit tests

* Added bosonic log mapper

* Created mapper tests. Fixes in algorithm

* Added annihilation operator tests. Fixes in algo

* Added more unit tests

* Added more unit tests

* Style fixes. Added documentation

* Added release note

* CI fixes

* Further CI fixes

* Apply suggestions from code review

Co-authored-by: Max Rossmannek <max.rossmannek@uzh.ch>

* PR fixes

* Style fixes

* Style fix

* Some phrasing from PR review

Co-authored-by: Max Rossmannek <max.rossmannek@uzh.ch>

* Refactor of single qubit op mapping

* Added missing unit tests

* Fixed typo

* Doc fixes from code review

Co-authored-by: Max Rossmannek <max.rossmannek@uzh.ch>

* Raise error instead of break statement

* Minor fix

---------

Co-authored-by: Max Rossmannek <max.rossmannek@uzh.ch>"
,qiskit-community,qiskit-nature,releasenotes/notes/bosonic-logarithmic-mapper-4b1f24c4ca16cf8b.yaml,"Bosonic logarithmic mapper (#1356)

* Added bosonic log mapper

* Created mapper tests. Fixes in algorithm

* Added annihilation operator tests. Fixes in algo

* Added more unit tests

* Added more unit tests

* Style fixes. Added documentation

* Added release note

* CI fixes

* Further CI fixes

* Apply suggestions from code review

Co-authored-by: Max Rossmannek <max.rossmannek@uzh.ch>

* PR fixes

* Style fixes

* Style fix

* Some phrasing from PR review

Co-authored-by: Max Rossmannek <max.rossmannek@uzh.ch>

* Refactor of single qubit op mapping

* Added missing unit tests

* Added bosonic log mapper

* Created mapper tests. Fixes in algorithm

* Added annihilation operator tests. Fixes in algo

* Added more unit tests

* Added more unit tests

* Style fixes. Added documentation

* Added release note

* CI fixes

* Further CI fixes

* Apply suggestions from code review

Co-authored-by: Max Rossmannek <max.rossmannek@uzh.ch>

* PR fixes

* Style fixes

* Style fix

* Some phrasing from PR review

Co-authored-by: Max Rossmannek <max.rossmannek@uzh.ch>

* Refactor of single qubit op mapping

* Added missing unit tests

* Fixed typo

* Doc fixes from code review

Co-authored-by: Max Rossmannek <max.rossmannek@uzh.ch>

* Raise error instead of break statement

* Minor fix

---------

Co-authored-by: Max Rossmannek <max.rossmannek@uzh.ch>"
,qiskit-community,qiskit-nature,test/second_q/mappers/test_bosonic_logarithmic_mapper.py,"Bosonic logarithmic mapper (#1356)

* Added bosonic log mapper

* Created mapper tests. Fixes in algorithm

* Added annihilation operator tests. Fixes in algo

* Added more unit tests

* Added more unit tests

* Style fixes. Added documentation

* Added release note

* CI fixes

* Further CI fixes

* Apply suggestions from code review

Co-authored-by: Max Rossmannek <max.rossmannek@uzh.ch>

* PR fixes

* Style fixes

* Style fix

* Some phrasing from PR review

Co-authored-by: Max Rossmannek <max.rossmannek@uzh.ch>

* Refactor of single qubit op mapping

* Added missing unit tests

* Added bosonic log mapper

* Created mapper tests. Fixes in algorithm

* Added annihilation operator tests. Fixes in algo

* Added more unit tests

* Added more unit tests

* Style fixes. Added documentation

* Added release note

* CI fixes

* Further CI fixes

* Apply suggestions from code review

Co-authored-by: Max Rossmannek <max.rossmannek@uzh.ch>

* PR fixes

* Style fixes

* Style fix

* Some phrasing from PR review

Co-authored-by: Max Rossmannek <max.rossmannek@uzh.ch>

* Refactor of single qubit op mapping

* Added missing unit tests

* Fixed typo

* Doc fixes from code review

Co-authored-by: Max Rossmannek <max.rossmannek@uzh.ch>

* Raise error instead of break statement

* Minor fix

---------

Co-authored-by: Max Rossmannek <max.rossmannek@uzh.ch>"
,qiskit-community,qiskit-nature,qiskit_nature/second_q/mappers/__init__.py,"Improve mappers, add ModeBasedMapper (#1301)

* Implement ModeBasedMapper no caching

* Added caching and release note

* Update release note to pass spell check

* fix typing

* fix typing for Python <3.10

* suggestions by mrossinek plus changes needed to pass pylint

* Update improve-mappers-b55cb0ca5fd656e4.yaml

---------

Co-authored-by: Steve Wood <40241007+woodsp-ibm@users.noreply.github.com>
Co-authored-by: Max Rossmannek <oss@zurich.ibm.com>"
,qiskit-community,qiskit-nature,qiskit_nature/second_q/mappers/bravyi_kitaev_mapper.py,"Improve mappers, add ModeBasedMapper (#1301)

* Implement ModeBasedMapper no caching

* Added caching and release note

* Update release note to pass spell check

* fix typing

* fix typing for Python <3.10

* suggestions by mrossinek plus changes needed to pass pylint

* Update improve-mappers-b55cb0ca5fd656e4.yaml

---------

Co-authored-by: Steve Wood <40241007+woodsp-ibm@users.noreply.github.com>
Co-authored-by: Max Rossmannek <oss@zurich.ibm.com>"
,qiskit-community,qiskit-nature,qiskit_nature/second_q/mappers/direct_mapper.py,"Improve mappers, add ModeBasedMapper (#1301)

* Implement ModeBasedMapper no caching

* Added caching and release note

* Update release note to pass spell check

* fix typing

* fix typing for Python <3.10

* suggestions by mrossinek plus changes needed to pass pylint

* Update improve-mappers-b55cb0ca5fd656e4.yaml

---------

Co-authored-by: Steve Wood <40241007+woodsp-ibm@users.noreply.github.com>
Co-authored-by: Max Rossmannek <oss@zurich.ibm.com>"
,qiskit-community,qiskit-nature,qiskit_nature/second_q/mappers/jordan_wigner_mapper.py,"Improve mappers, add ModeBasedMapper (#1301)

* Implement ModeBasedMapper no caching

* Added caching and release note

* Update release note to pass spell check

* fix typing

* fix typing for Python <3.10

* suggestions by mrossinek plus changes needed to pass pylint

* Update improve-mappers-b55cb0ca5fd656e4.yaml

---------

Co-authored-by: Steve Wood <40241007+woodsp-ibm@users.noreply.github.com>
Co-authored-by: Max Rossmannek <oss@zurich.ibm.com>"
,qiskit-community,qiskit-nature,qiskit_nature/second_q/mappers/logarithmic_mapper.py,"Improve mappers, add ModeBasedMapper (#1301)

* Implement ModeBasedMapper no caching

* Added caching and release note

* Update release note to pass spell check

* fix typing

* fix typing for Python <3.10

* suggestions by mrossinek plus changes needed to pass pylint

* Update improve-mappers-b55cb0ca5fd656e4.yaml

---------

Co-authored-by: Steve Wood <40241007+woodsp-ibm@users.noreply.github.com>
Co-authored-by: Max Rossmannek <oss@zurich.ibm.com>"
,qiskit-community,qiskit-nature,qiskit_nature/second_q/mappers/mode_based_mapper.py,"Improve mappers, add ModeBasedMapper (#1301)

* Implement ModeBasedMapper no caching

* Added caching and release note

* Update release note to pass spell check

* fix typing

* fix typing for Python <3.10

* suggestions by mrossinek plus changes needed to pass pylint

* Update improve-mappers-b55cb0ca5fd656e4.yaml

---------

Co-authored-by: Steve Wood <40241007+woodsp-ibm@users.noreply.github.com>
Co-authored-by: Max Rossmannek <oss@zurich.ibm.com>"
,qiskit-community,qiskit-nature,qiskit_nature/second_q/mappers/parity_mapper.py,"Improve mappers, add ModeBasedMapper (#1301)

* Implement ModeBasedMapper no caching

* Added caching and release note

* Update release note to pass spell check

* fix typing

* fix typing for Python <3.10

* suggestions by mrossinek plus changes needed to pass pylint

* Update improve-mappers-b55cb0ca5fd656e4.yaml

---------

Co-authored-by: Steve Wood <40241007+woodsp-ibm@users.noreply.github.com>
Co-authored-by: Max Rossmannek <oss@zurich.ibm.com>"
,qiskit-community,qiskit-nature,qiskit_nature/second_q/mappers/qubit_mapper.py,"Improve mappers, add ModeBasedMapper (#1301)

* Implement ModeBasedMapper no caching

* Added caching and release note

* Update release note to pass spell check

* fix typing

* fix typing for Python <3.10

* suggestions by mrossinek plus changes needed to pass pylint

* Update improve-mappers-b55cb0ca5fd656e4.yaml

---------

Co-authored-by: Steve Wood <40241007+woodsp-ibm@users.noreply.github.com>
Co-authored-by: Max Rossmannek <oss@zurich.ibm.com>"
,qiskit-community,qiskit-nature,releasenotes/notes/improve-mappers-b55cb0ca5fd656e4.yaml,"Improve mappers, add ModeBasedMapper (#1301)

* Implement ModeBasedMapper no caching

* Added caching and release note

* Update release note to pass spell check

* fix typing

* fix typing for Python <3.10

* suggestions by mrossinek plus changes needed to pass pylint

* Update improve-mappers-b55cb0ca5fd656e4.yaml

---------

Co-authored-by: Steve Wood <40241007+woodsp-ibm@users.noreply.github.com>
Co-authored-by: Max Rossmannek <oss@zurich.ibm.com>"
,qiskit-community,qiskit-nature,qiskit_nature/second_q/operators/__init__.py,"Add MajoranaOp class (#1270)

* Add MajoranaOp class

* New style of MajoranaOp.terms(), some new tests

* Update majorana_op.py

* Update majorana_op.py

* Some easier reviews done. More will follow.

* Update releasenotes/notes/add-majoranaop-1cbf9d4a1d4c264e.yaml

Co-authored-by: Max Rossmannek <max.rossmannek@uzh.ch>

* Update releasenotes/notes/add-majoranaop-1cbf9d4a1d4c264e.yaml

Co-authored-by: Max Rossmannek <max.rossmannek@uzh.ch>

* Update qiskit_nature/second_q/operators/majorana_op.py

Co-authored-by: Max Rossmannek <max.rossmannek@uzh.ch>

* Reviewed changes

* final suggestions by mrossinek

* release notes: added example

* suggestions from pylint for tests to pass

* Fixed copyright header for modified files

---------

Co-authored-by: Max Rossmannek <max.rossmannek@uzh.ch>
Co-authored-by: Steve Wood <40241007+woodsp-ibm@users.noreply.github.com>
Co-authored-by: Max Rossmannek <oss@zurich.ibm.com>"
,qiskit-community,qiskit-nature,qiskit_nature/second_q/operators/majorana_op.py,"Add MajoranaOp class (#1270)

* Add MajoranaOp class

* New style of MajoranaOp.terms(), some new tests

* Update majorana_op.py

* Update majorana_op.py

* Some easier reviews done. More will follow.

* Update releasenotes/notes/add-majoranaop-1cbf9d4a1d4c264e.yaml

Co-authored-by: Max Rossmannek <max.rossmannek@uzh.ch>

* Update releasenotes/notes/add-majoranaop-1cbf9d4a1d4c264e.yaml

Co-authored-by: Max Rossmannek <max.rossmannek@uzh.ch>

* Update qiskit_nature/second_q/operators/majorana_op.py

Co-authored-by: Max Rossmannek <max.rossmannek@uzh.ch>

* Reviewed changes

* final suggestions by mrossinek

* release notes: added example

* suggestions from pylint for tests to pass

* Fixed copyright header for modified files

---------

Co-authored-by: Max Rossmannek <max.rossmannek@uzh.ch>
Co-authored-by: Steve Wood <40241007+woodsp-ibm@users.noreply.github.com>
Co-authored-by: Max Rossmannek <oss@zurich.ibm.com>"
,qiskit-community,qiskit-nature,releasenotes/notes/add-majoranaop-1cbf9d4a1d4c264e.yaml,"Add MajoranaOp class (#1270)

* Add MajoranaOp class

* New style of MajoranaOp.terms(), some new tests

* Update majorana_op.py

* Update majorana_op.py

* Some easier reviews done. More will follow.

* Update releasenotes/notes/add-majoranaop-1cbf9d4a1d4c264e.yaml

Co-authored-by: Max Rossmannek <max.rossmannek@uzh.ch>

* Update releasenotes/notes/add-majoranaop-1cbf9d4a1d4c264e.yaml

Co-authored-by: Max Rossmannek <max.rossmannek@uzh.ch>

* Update qiskit_nature/second_q/operators/majorana_op.py

Co-authored-by: Max Rossmannek <max.rossmannek@uzh.ch>

* Reviewed changes

* final suggestions by mrossinek

* release notes: added example

* suggestions from pylint for tests to pass

* Fixed copyright header for modified files

---------

Co-authored-by: Max Rossmannek <max.rossmannek@uzh.ch>
Co-authored-by: Steve Wood <40241007+woodsp-ibm@users.noreply.github.com>
Co-authored-by: Max Rossmannek <oss@zurich.ibm.com>"
,qiskit-community,qiskit-nature,qiskit_nature/second_q/hamiltonians/fermi_hubbard_model.py,"Update black (#1357)

* Update black

* Fix copyright"
,qiskit-community,qiskit-nature,docs/tutorials/01_electronic_structure.ipynb,"Fix tutorials to work with Qiskit 1.0 (#1336)

* Fix tutorials to work with Qiskit 1.0

* Fix tutorials to work with Qiskit 1.0

* Fix import that was removed

* Fix method that was removed"
,qiskit-community,qiskit-nature,docs/tutorials/04_excited_states_solvers.ipynb,"Fix tutorials to work with Qiskit 1.0 (#1336)

* Fix tutorials to work with Qiskit 1.0

* Fix tutorials to work with Qiskit 1.0

* Fix import that was removed

* Fix method that was removed"
,qiskit-community,qiskit-nature,docs/tutorials/05_problem_transformers.ipynb,"Fix tutorials to work with Qiskit 1.0 (#1336)

* Fix tutorials to work with Qiskit 1.0

* Fix tutorials to work with Qiskit 1.0

* Fix import that was removed

* Fix method that was removed"
,qiskit-community,qiskit-nature,docs/tutorials/07_leveraging_qiskit_runtime.ipynb,"Fix tutorials to work with Qiskit 1.0 (#1336)

* Fix tutorials to work with Qiskit 1.0

* Fix tutorials to work with Qiskit 1.0

* Fix import that was removed

* Fix method that was removed"
,qiskit-community,qiskit-nature,docs/tutorials/09_properties.ipynb,"Fix tutorials to work with Qiskit 1.0 (#1336)

* Fix tutorials to work with Qiskit 1.0

* Fix tutorials to work with Qiskit 1.0

* Fix import that was removed

* Fix method that was removed"
,qiskit-community,qiskit-nature,docs/tutorials/10_lattice_models.ipynb,"Fix tutorials to work with Qiskit 1.0 (#1336)

* Fix tutorials to work with Qiskit 1.0

* Fix tutorials to work with Qiskit 1.0

* Fix import that was removed

* Fix method that was removed"
,qiskit-community,qiskit-nature,docs/tutorials/11_quadratic_hamiltonian_and_slater_determinants.ipynb,"Fix tutorials to work with Qiskit 1.0 (#1336)

* Fix tutorials to work with Qiskit 1.0

* Fix tutorials to work with Qiskit 1.0

* Fix import that was removed

* Fix method that was removed"
,qiskit-community,qiskit-nature,docs/tutorials/12_deuteron_binding_energy.ipynb,"Fix tutorials to work with Qiskit 1.0 (#1336)

* Fix tutorials to work with Qiskit 1.0

* Fix tutorials to work with Qiskit 1.0

* Fix import that was removed

* Fix method that was removed"
,qiskit-community,qiskit-nature,qiskit_nature/second_q/operators/commutators.py,"fix: do not use `normal_order` as part of commutator methods (#1299)

* fix: do not use `normal_order` as part of commutator methods

Fixes #1298

* Update docs"
,qiskit-community,qiskit-nature,releasenotes/notes/fix-commutator-methods-fdae69426a05222a.yaml,"fix: do not use `normal_order` as part of commutator methods (#1299)

* fix: do not use `normal_order` as part of commutator methods

Fixes #1298

* Update docs"
,qiskit-community,qiskit-nature,test/second_q/operators/test_bosonic_op.py,"fix: do not use `normal_order` as part of commutator methods (#1299)

* fix: do not use `normal_order` as part of commutator methods

Fixes #1298

* Update docs"
,qiskit-community,qiskit-nature,test/second_q/operators/test_commutators.py,"fix: do not use `normal_order` as part of commutator methods (#1299)

* fix: do not use `normal_order` as part of commutator methods

Fixes #1298

* Update docs"
,qiskit-community,qiskit-nature,test/second_q/properties/test_s_operators.py,"fix: do not use `normal_order` as part of commutator methods (#1299)

* fix: do not use `normal_order` as part of commutator methods

Fixes #1298

* Update docs"
,qiskit-community,qiskit-nature,qiskit_nature/second_q/properties/angular_momentum.py,"Fix the `AngularMomentum` (again) (#1292)

* fix: use the symmetric formula for S^2

Prior to this fix, the `AngularMomentum` operator was working on the
assumption that the number of alpha-spin particles would always exceed
the number of beta-spin particles (for non-singlet systems). However,
this is not guaranteed to be the case. This commit fixes this problem by
using a symmetric formula for S^2 which is the average of the two cases
(alpha- vs. beta-spin particles exceeding the other).

* feat: log a warning when the alpha-beta overlap is non-unitary

When dealing with active spaces obtained from unrestricted-spin
orbitals, the alpha-beta overlap matrix which is used to construct the
S^2 operator can become non-unitary (for example, when the active set of
alpha- and beta-spin orbitals do not span the same space). This can
result in an <S^2> value measured on the active space that is largely
different from (e.g.) the UHF <S^2> value. More importantly, when this
is the case, the difference between these two <S^2> values is ""hidden""
in the inactive+inactive and inactive+active interactions. Especially
when spin contamination is present, this can lead to vastly unexpected
results and may indicate a poor choice of active space.

* Add reno

* test: add a regression test

* fix: update warning tolerance

* Linting and formatting

* docs: fix verbatim in RST"
,qiskit-community,qiskit-nature,releasenotes/notes/fix-angular-momentum-2-cebabde075b61a4e.yaml,"Fix the `AngularMomentum` (again) (#1292)

* fix: use the symmetric formula for S^2

Prior to this fix, the `AngularMomentum` operator was working on the
assumption that the number of alpha-spin particles would always exceed
the number of beta-spin particles (for non-singlet systems). However,
this is not guaranteed to be the case. This commit fixes this problem by
using a symmetric formula for S^2 which is the average of the two cases
(alpha- vs. beta-spin particles exceeding the other).

* feat: log a warning when the alpha-beta overlap is non-unitary

When dealing with active spaces obtained from unrestricted-spin
orbitals, the alpha-beta overlap matrix which is used to construct the
S^2 operator can become non-unitary (for example, when the active set of
alpha- and beta-spin orbitals do not span the same space). This can
result in an <S^2> value measured on the active space that is largely
different from (e.g.) the UHF <S^2> value. More importantly, when this
is the case, the difference between these two <S^2> values is ""hidden""
in the inactive+inactive and inactive+active interactions. Especially
when spin contamination is present, this can lead to vastly unexpected
results and may indicate a poor choice of active space.

* Add reno

* test: add a regression test

* fix: update warning tolerance

* Linting and formatting

* docs: fix verbatim in RST"
,qiskit-community,qiskit-nature,test/second_q/properties/test_angular_momentum.py,"Fix the `AngularMomentum` (again) (#1292)

* fix: use the symmetric formula for S^2

Prior to this fix, the `AngularMomentum` operator was working on the
assumption that the number of alpha-spin particles would always exceed
the number of beta-spin particles (for non-singlet systems). However,
this is not guaranteed to be the case. This commit fixes this problem by
using a symmetric formula for S^2 which is the average of the two cases
(alpha- vs. beta-spin particles exceeding the other).

* feat: log a warning when the alpha-beta overlap is non-unitary

When dealing with active spaces obtained from unrestricted-spin
orbitals, the alpha-beta overlap matrix which is used to construct the
S^2 operator can become non-unitary (for example, when the active set of
alpha- and beta-spin orbitals do not span the same space). This can
result in an <S^2> value measured on the active space that is largely
different from (e.g.) the UHF <S^2> value. More importantly, when this
is the case, the difference between these two <S^2> values is ""hidden""
in the inactive+inactive and inactive+active interactions. Especially
when spin contamination is present, this can lead to vastly unexpected
results and may indicate a poor choice of active space.

* Add reno

* test: add a regression test

* fix: update warning tolerance

* Linting and formatting

* docs: fix verbatim in RST"
,qiskit-community,qiskit-nature,qiskit_nature/second_q/circuit/library/ansatzes/ucc.py,"UCC and fully occupied MOs (Fix for issue #1277) (#1286)

* UCC and fully occupied MOs (Fix for issue #1277)

The configuration check looked for whether any number of alpha or beta orbitals was greater or equals than the number of particles.
Obviously, there cannot be more particles than spin orbitals, and in order to handle this case, I updated the previous `any(n >= ...` to `any(n > ...`. 
For handling case where both alpha and beta are the same as the number of particles (i.e. He2 molecule), I created a new raise condition, notifying that the function is still not implemented.
For the case where either alpha or beta is equals to the number of particles (i.e. H-He molecule), it should just pass through.

* Remove unintended spaces

Sorry, I forgot to remove the spaces.

* Added case for HeH 

Added a test case for HeH molecule, with (alpha, beta) = (2, 1). This should work after the changes in ucc.py

* Remove comment

The tests complained because of the spelling of a molecule in a comment. And I reformatted a little.

* Formatting according to black

Formatted the indentations correctly following the suggestions of black

* Create release notes for PR #1286

Release notes created

* Deleted unnecessary parts.

Deleted unnecessary parts.

* Update releasenotes/notes/fix-UCC-and-fully-occupied-MOs-c8fdf252a0607395.yaml

---------

Co-authored-by: Max Rossmannek <max.rossmannek@uzh.ch>"
,qiskit-community,qiskit-nature,releasenotes/notes/fix-UCC-and-fully-occupied-MOs-c8fdf252a0607395.yaml,"UCC and fully occupied MOs (Fix for issue #1277) (#1286)

* UCC and fully occupied MOs (Fix for issue #1277)

The configuration check looked for whether any number of alpha or beta orbitals was greater or equals than the number of particles.
Obviously, there cannot be more particles than spin orbitals, and in order to handle this case, I updated the previous `any(n >= ...` to `any(n > ...`. 
For handling case where both alpha and beta are the same as the number of particles (i.e. He2 molecule), I created a new raise condition, notifying that the function is still not implemented.
For the case where either alpha or beta is equals to the number of particles (i.e. H-He molecule), it should just pass through.

* Remove unintended spaces

Sorry, I forgot to remove the spaces.

* Added case for HeH 

Added a test case for HeH molecule, with (alpha, beta) = (2, 1). This should work after the changes in ucc.py

* Remove comment

The tests complained because of the spelling of a molecule in a comment. And I reformatted a little.

* Formatting according to black

Formatted the indentations correctly following the suggestions of black

* Create release notes for PR #1286

Release notes created

* Deleted unnecessary parts.

Deleted unnecessary parts.

* Update releasenotes/notes/fix-UCC-and-fully-occupied-MOs-c8fdf252a0607395.yaml

---------

Co-authored-by: Max Rossmannek <max.rossmannek@uzh.ch>"
,qiskit-community,qiskit-nature,test/second_q/circuit/library/ansatzes/test_ucc.py,"UCC and fully occupied MOs (Fix for issue #1277) (#1286)

* UCC and fully occupied MOs (Fix for issue #1277)

The configuration check looked for whether any number of alpha or beta orbitals was greater or equals than the number of particles.
Obviously, there cannot be more particles than spin orbitals, and in order to handle this case, I updated the previous `any(n >= ...` to `any(n > ...`. 
For handling case where both alpha and beta are the same as the number of particles (i.e. He2 molecule), I created a new raise condition, notifying that the function is still not implemented.
For the case where either alpha or beta is equals to the number of particles (i.e. H-He molecule), it should just pass through.

* Remove unintended spaces

Sorry, I forgot to remove the spaces.

* Added case for HeH 

Added a test case for HeH molecule, with (alpha, beta) = (2, 1). This should work after the changes in ucc.py

* Remove comment

The tests complained because of the spelling of a molecule in a comment. And I reformatted a little.

* Formatting according to black

Formatted the indentations correctly following the suggestions of black

* Create release notes for PR #1286

Release notes created

* Deleted unnecessary parts.

Deleted unnecessary parts.

* Update releasenotes/notes/fix-UCC-and-fully-occupied-MOs-c8fdf252a0607395.yaml

---------

Co-authored-by: Max Rossmannek <max.rossmannek@uzh.ch>"
,qosf,qml-mooc,qiskit_version/07_Variational_Circuits.ipynb,Typo and small text fix
,qosf,qml-mooc,forest_version/02_Measurements_and_Mixed_States.ipynb,"Merge branch 'Lecture2M' into 'master'

fix typo in lecture 2

See merge request qosf/qml-mooc!36"
,qosf,qml-mooc,qiskit_version/02_Measurements_and_Mixed_States.ipynb,"Merge branch 'Lecture2M' into 'master'

fix typo in lecture 2

See merge request qosf/qml-mooc!36"
,qosf,qml-mooc,forest_version/02_Measurements_and_Mixed_States.ipynb,fix typo in lecture 2
,qosf,qml-mooc,qiskit_version/02_Measurements_and_Mixed_States.ipynb,fix typo in lecture 2
,qiskit-community,qiskit-metal,docs/docstring_cheat_sheet.md,"Get rid of jupyter-sphinx and sphinx-automodapi (#960)

* WIP: debug tutorials not rendering

* Revert ""WIP: debug tutorials not rendering""

This reverts commit a991b425aaf81ddb1d271e8badebe288f52f1cb4.

* Get rid of jupyter-sphinx

* Also get rid of automodapi"
,mupq,pqm4,mk/cw308t-stm32f3.mk,fix build for other platforms
,mupq,pqm4,mk/stm32f4discovery.mk,fix build for other platforms
,qiboteam,qibo,src/qibo/models/error_mitigation.py,"Merge pull request #1238 from qiboteam/cuquantum_tests

Fix tests for `cupy` and `cuquantum` backends"
,qiboteam,qibo,tests/test_measurements_collapse.py,"Merge pull request #1238 from qiboteam/cuquantum_tests

Fix tests for `cupy` and `cuquantum` backends"
,qiboteam,qibo,tests/test_measurements_probabilistic.py,"Merge pull request #1238 from qiboteam/cuquantum_tests

Fix tests for `cupy` and `cuquantum` backends"
,qiboteam,qibo,tests/test_models_circuit_qasm.py,"Merge pull request #1238 from qiboteam/cuquantum_tests

Fix tests for `cupy` and `cuquantum` backends"
,qiboteam,qibo,tests/test_quantum_info_clifford.py,"Merge pull request #1238 from qiboteam/cuquantum_tests

Fix tests for `cupy` and `cuquantum` backends"
,qiboteam,qibo,tests/test_quantum_info_random.py,"Merge pull request #1238 from qiboteam/cuquantum_tests

Fix tests for `cupy` and `cuquantum` backends"
,qiboteam,qibo,tests/test_transpiler_unitary_decompositions.py,"Merge pull request #1238 from qiboteam/cuquantum_tests

Fix tests for `cupy` and `cuquantum` backends"
,qiboteam,qibo,src/qibo/transpiler/pipeline.py,"Merge pull request #1301 from qiboteam/fix_transpiler

Small fix in transpiler initial and final layout"
,qiboteam,qibo,tests/test_transpiler_pipeline.py,"Merge pull request #1301 from qiboteam/fix_transpiler

Small fix in transpiler initial and final layout"
,qiboteam,qibo,doc/source/api-reference/qibo.rst,Merge branch 'master' into fix_transpiler
,qiboteam,qibo,src/qibo/gates/abstract.py,Merge branch 'master' into fix_transpiler
,qiboteam,qibo,src/qibo/hamiltonians/hamiltonians.py,Merge branch 'master' into fix_transpiler
,qiboteam,qibo,src/qibo/models/dbi/double_bracket.py,Merge branch 'master' into fix_transpiler
,qiboteam,qibo,src/qibo/models/utils.py,Merge branch 'master' into fix_transpiler
,qiboteam,qibo,tests/test_backends_clifford.py,Merge branch 'master' into fix_transpiler
,qiboteam,qibo,tests/test_models_dbi.py,Merge branch 'master' into fix_transpiler
,qiboteam,qibo,tests/test_quantum_info_metrics.py,Merge branch 'master' into fix_transpiler
,quantumlib,ReCirq,dev_tools/write-ci-requirements.py,"Added seniority_zero core functions in new subpackage (#331)

* Initial commit with core pieces

* Added some type hints, changed gatesets as per Matts suggestion'

* Added type hints, fixed docstrings

* Changed list to List in docstrings

* Fixed flake8, added missing file

* Added extra requirements'

* Added requirements to setup.py also

* Added fqe to requirements

* Trying to fix bug in qaoa by concatenating result

* Formatting stuff"
,quantumlib,ReCirq,recirq/seniority_zero/circuits_expt/core.py,"Added seniority_zero core functions in new subpackage (#331)

* Initial commit with core pieces

* Added some type hints, changed gatesets as per Matts suggestion'

* Added type hints, fixed docstrings

* Changed list to List in docstrings

* Fixed flake8, added missing file

* Added extra requirements'

* Added requirements to setup.py also

* Added fqe to requirements

* Trying to fix bug in qaoa by concatenating result

* Formatting stuff"
,quantumlib,ReCirq,recirq/seniority_zero/circuits_expt/core_test.py,"Added seniority_zero core functions in new subpackage (#331)

* Initial commit with core pieces

* Added some type hints, changed gatesets as per Matts suggestion'

* Added type hints, fixed docstrings

* Changed list to List in docstrings

* Fixed flake8, added missing file

* Added extra requirements'

* Added requirements to setup.py also

* Added fqe to requirements

* Trying to fix bug in qaoa by concatenating result

* Formatting stuff"
,quantumlib,ReCirq,recirq/seniority_zero/circuits_expt/gate_sets.py,"Added seniority_zero core functions in new subpackage (#331)

* Initial commit with core pieces

* Added some type hints, changed gatesets as per Matts suggestion'

* Added type hints, fixed docstrings

* Changed list to List in docstrings

* Fixed flake8, added missing file

* Added extra requirements'

* Added requirements to setup.py also

* Added fqe to requirements

* Trying to fix bug in qaoa by concatenating result

* Formatting stuff"
,quantumlib,ReCirq,recirq/seniority_zero/circuits_expt/gate_sets_test.py,"Added seniority_zero core functions in new subpackage (#331)

* Initial commit with core pieces

* Added some type hints, changed gatesets as per Matts suggestion'

* Added type hints, fixed docstrings

* Changed list to List in docstrings

* Fixed flake8, added missing file

* Added extra requirements'

* Added requirements to setup.py also

* Added fqe to requirements

* Trying to fix bug in qaoa by concatenating result

* Formatting stuff"
,quantumlib,ReCirq,recirq/seniority_zero/circuits_expt/gates.py,"Added seniority_zero core functions in new subpackage (#331)

* Initial commit with core pieces

* Added some type hints, changed gatesets as per Matts suggestion'

* Added type hints, fixed docstrings

* Changed list to List in docstrings

* Fixed flake8, added missing file

* Added extra requirements'

* Added requirements to setup.py also

* Added fqe to requirements

* Trying to fix bug in qaoa by concatenating result

* Formatting stuff"
,quantumlib,ReCirq,recirq/seniority_zero/circuits_expt/gates_test.py,"Added seniority_zero core functions in new subpackage (#331)

* Initial commit with core pieces

* Added some type hints, changed gatesets as per Matts suggestion'

* Added type hints, fixed docstrings

* Changed list to List in docstrings

* Fixed flake8, added missing file

* Added extra requirements'

* Added requirements to setup.py also

* Added fqe to requirements

* Trying to fix bug in qaoa by concatenating result

* Formatting stuff"
,quantumlib,ReCirq,recirq/seniority_zero/circuits_simplified/core.py,"Added seniority_zero core functions in new subpackage (#331)

* Initial commit with core pieces

* Added some type hints, changed gatesets as per Matts suggestion'

* Added type hints, fixed docstrings

* Changed list to List in docstrings

* Fixed flake8, added missing file

* Added extra requirements'

* Added requirements to setup.py also

* Added fqe to requirements

* Trying to fix bug in qaoa by concatenating result

* Formatting stuff"
,quantumlib,ReCirq,recirq/seniority_zero/circuits_simplified/core_test.py,"Added seniority_zero core functions in new subpackage (#331)

* Initial commit with core pieces

* Added some type hints, changed gatesets as per Matts suggestion'

* Added type hints, fixed docstrings

* Changed list to List in docstrings

* Fixed flake8, added missing file

* Added extra requirements'

* Added requirements to setup.py also

* Added fqe to requirements

* Trying to fix bug in qaoa by concatenating result

* Formatting stuff"
,quantumlib,ReCirq,recirq/seniority_zero/circuits_simplified/gates.py,"Added seniority_zero core functions in new subpackage (#331)

* Initial commit with core pieces

* Added some type hints, changed gatesets as per Matts suggestion'

* Added type hints, fixed docstrings

* Changed list to List in docstrings

* Fixed flake8, added missing file

* Added extra requirements'

* Added requirements to setup.py also

* Added fqe to requirements

* Trying to fix bug in qaoa by concatenating result

* Formatting stuff"
,quantumlib,ReCirq,recirq/seniority_zero/circuits_simplified/gates_test.py,"Added seniority_zero core functions in new subpackage (#331)

* Initial commit with core pieces

* Added some type hints, changed gatesets as per Matts suggestion'

* Added type hints, fixed docstrings

* Changed list to List in docstrings

* Fixed flake8, added missing file

* Added extra requirements'

* Added requirements to setup.py also

* Added fqe to requirements

* Trying to fix bug in qaoa by concatenating result

* Formatting stuff"
,quantumlib,ReCirq,recirq/seniority_zero/data_processing/general.py,"Added seniority_zero core functions in new subpackage (#331)

* Initial commit with core pieces

* Added some type hints, changed gatesets as per Matts suggestion'

* Added type hints, fixed docstrings

* Changed list to List in docstrings

* Fixed flake8, added missing file

* Added extra requirements'

* Added requirements to setup.py also

* Added fqe to requirements

* Trying to fix bug in qaoa by concatenating result

* Formatting stuff"
,quantumlib,ReCirq,recirq/seniority_zero/data_processing/general_test.py,"Added seniority_zero core functions in new subpackage (#331)

* Initial commit with core pieces

* Added some type hints, changed gatesets as per Matts suggestion'

* Added type hints, fixed docstrings

* Changed list to List in docstrings

* Fixed flake8, added missing file

* Added extra requirements'

* Added requirements to setup.py also

* Added fqe to requirements

* Trying to fix bug in qaoa by concatenating result

* Formatting stuff"
,quantumlib,ReCirq,recirq/seniority_zero/extra-requirements.txt,"Added seniority_zero core functions in new subpackage (#331)

* Initial commit with core pieces

* Added some type hints, changed gatesets as per Matts suggestion'

* Added type hints, fixed docstrings

* Changed list to List in docstrings

* Fixed flake8, added missing file

* Added extra requirements'

* Added requirements to setup.py also

* Added fqe to requirements

* Trying to fix bug in qaoa by concatenating result

* Formatting stuff"
,quantumlib,ReCirq,recirq/seniority_zero/hamiltonians/rg_hamiltonian.py,"Added seniority_zero core functions in new subpackage (#331)

* Initial commit with core pieces

* Added some type hints, changed gatesets as per Matts suggestion'

* Added type hints, fixed docstrings

* Changed list to List in docstrings

* Fixed flake8, added missing file

* Added extra requirements'

* Added requirements to setup.py also

* Added fqe to requirements

* Trying to fix bug in qaoa by concatenating result

* Formatting stuff"
,quantumlib,ReCirq,recirq/seniority_zero/hamiltonians/rg_hamiltonian_test.py,"Added seniority_zero core functions in new subpackage (#331)

* Initial commit with core pieces

* Added some type hints, changed gatesets as per Matts suggestion'

* Added type hints, fixed docstrings

* Changed list to List in docstrings

* Fixed flake8, added missing file

* Added extra requirements'

* Added requirements to setup.py also

* Added fqe to requirements

* Trying to fix bug in qaoa by concatenating result

* Formatting stuff"
,quantumlib,ReCirq,recirq/seniority_zero/misc.py,"Added seniority_zero core functions in new subpackage (#331)

* Initial commit with core pieces

* Added some type hints, changed gatesets as per Matts suggestion'

* Added type hints, fixed docstrings

* Changed list to List in docstrings

* Fixed flake8, added missing file

* Added extra requirements'

* Added requirements to setup.py also

* Added fqe to requirements

* Trying to fix bug in qaoa by concatenating result

* Formatting stuff"
,quantumlib,ReCirq,recirq/seniority_zero/misc_test.py,"Added seniority_zero core functions in new subpackage (#331)

* Initial commit with core pieces

* Added some type hints, changed gatesets as per Matts suggestion'

* Added type hints, fixed docstrings

* Changed list to List in docstrings

* Fixed flake8, added missing file

* Added extra requirements'

* Added requirements to setup.py also

* Added fqe to requirements

* Trying to fix bug in qaoa by concatenating result

* Formatting stuff"
,quantumlib,ReCirq,recirq/seniority_zero/scheduling.py,"Added seniority_zero core functions in new subpackage (#331)

* Initial commit with core pieces

* Added some type hints, changed gatesets as per Matts suggestion'

* Added type hints, fixed docstrings

* Changed list to List in docstrings

* Fixed flake8, added missing file

* Added extra requirements'

* Added requirements to setup.py also

* Added fqe to requirements

* Trying to fix bug in qaoa by concatenating result

* Formatting stuff"
,quantumlib,ReCirq,setup.py,"Added seniority_zero core functions in new subpackage (#331)

* Initial commit with core pieces

* Added some type hints, changed gatesets as per Matts suggestion'

* Added type hints, fixed docstrings

* Changed list to List in docstrings

* Fixed flake8, added missing file

* Added extra requirements'

* Added requirements to setup.py also

* Added fqe to requirements

* Trying to fix bug in qaoa by concatenating result

* Formatting stuff"
,quantumlib,ReCirq,recirq/qaoa/placement.py,"Fix pytket import typo (#324)

This bug is surfaced by devsite automation - `docs/qaoa/routing_with_tket.ipynb` and `docs/qaoa/hardware_grid_circuits.ipynb` are failing.

@ammareltigani @mpharrigan"
,quantumlib,ReCirq,docs/qaoa/example_problems.ipynb,"Some more doc fixes for Cirq 1.0 (#320)

- Fix some qubits / qubit_set mix-ups.
- Change some more classes in Fermi Hubbarb to use json namespace."
,quantumlib,ReCirq,recirq/fermi_hubbard/parameters.py,"Some more doc fixes for Cirq 1.0 (#320)

- Fix some qubits / qubit_set mix-ups.
- Change some more classes in Fermi Hubbarb to use json namespace."
,quantumlib,ReCirq,docs/qaoa/hardware_grid_circuits.ipynb,"Update docs with more Cirq 1.0 fixes (#317)

* Update docs with more Cirq 1.0 fixes

- Hartree-Fock assumes str(q) == '(a, b)' but it is now 'q(a, b)'
- Remove TwoQubitGate
- Add metadata.qubit_set for device lookups.
- Add json_namespace to a few places.
- Add recirq json resolvers."
,quantumlib,ReCirq,docs/qaoa/routing_with_tket.ipynb,"Update docs with more Cirq 1.0 fixes (#317)

* Update docs with more Cirq 1.0 fixes

- Hartree-Fock assumes str(q) == '(a, b)' but it is now 'q(a, b)'
- Remove TwoQubitGate
- Add metadata.qubit_set for device lookups.
- Add json_namespace to a few places.
- Add recirq json resolvers."
,quantumlib,ReCirq,recirq/fermi_hubbard/parameters.py,"Update docs with more Cirq 1.0 fixes (#317)

* Update docs with more Cirq 1.0 fixes

- Hartree-Fock assumes str(q) == '(a, b)' but it is now 'q(a, b)'
- Remove TwoQubitGate
- Add metadata.qubit_set for device lookups.
- Add json_namespace to a few places.
- Add recirq json resolvers."
,quantumlib,ReCirq,docs/time_crystals/time_crystal_circuit_generation.ipynb,"Add Circuit Generation Notebook for Discrete Time Crystal Experiments (#251)

* Add Tasks for Discrete Time Crystal Experiments

* Fix import and dataclass decorators

* Full removal of tasks and dataclasses

* Run `black` python formatter

* Improve docstring attribute descriptions

* fix 2021 copyright to 2022

* Add docstring newlines, add Iterator import

* Updated test cases

* Fix parameter descriptions

* Add DTC simulation utilities for for experiments

* Copyright addition, add type hints

* Fix imports broken in merge

* Add circuit generation notebook

* Corrections: terminology and technical correctness

* Improve explanations a bit

* Remove old dtcsimulation file (now dtc_simulation)

* Feedback fixes"
,quantumlib,ReCirq,recirq/benchmarks/xeb/grid_parallel_two_qubit_xeb.py,"Fix imports and broken tests for Cirq 1.0 (#318)

* Fix imports and broken tests for Cirq 1.0

- Move imports from cirq.experiments to recirq.benchmarks.xeb
- Add a missing function that got deleted
- Fix repr and repr testing for xeb.

* Fix xeb serialization and tests.

* Fix optimizers in qml_lfe

* Hack in missing experiment functions."
,quantumlib,ReCirq,recirq/benchmarks/xeb/grid_parallel_two_qubit_xeb_test.py,"Fix imports and broken tests for Cirq 1.0 (#318)

* Fix imports and broken tests for Cirq 1.0

- Move imports from cirq.experiments to recirq.benchmarks.xeb
- Add a missing function that got deleted
- Fix repr and repr testing for xeb.

* Fix xeb serialization and tests.

* Fix optimizers in qml_lfe

* Hack in missing experiment functions."
,quantumlib,ReCirq,recirq/otoc/parallel_xeb.py,"Fix imports and broken tests for Cirq 1.0 (#318)

* Fix imports and broken tests for Cirq 1.0

- Move imports from cirq.experiments to recirq.benchmarks.xeb
- Add a missing function that got deleted
- Fix repr and repr testing for xeb.

* Fix xeb serialization and tests.

* Fix optimizers in qml_lfe

* Hack in missing experiment functions."
,quantumlib,ReCirq,recirq/qml_lfe/learn_dynamics_c.py,"Fix imports and broken tests for Cirq 1.0 (#318)

* Fix imports and broken tests for Cirq 1.0

- Move imports from cirq.experiments to recirq.benchmarks.xeb
- Add a missing function that got deleted
- Fix repr and repr testing for xeb.

* Fix xeb serialization and tests.

* Fix optimizers in qml_lfe

* Hack in missing experiment functions."
,quantumlib,ReCirq,recirq/qml_lfe/learn_dynamics_q.py,"Fix imports and broken tests for Cirq 1.0 (#318)

* Fix imports and broken tests for Cirq 1.0

- Move imports from cirq.experiments to recirq.benchmarks.xeb
- Add a missing function that got deleted
- Fix repr and repr testing for xeb.

* Fix xeb serialization and tests.

* Fix optimizers in qml_lfe

* Hack in missing experiment functions."
,quantumlib,ReCirq,recirq/qml_lfe/learn_states_c.py,"Fix imports and broken tests for Cirq 1.0 (#318)

* Fix imports and broken tests for Cirq 1.0

- Move imports from cirq.experiments to recirq.benchmarks.xeb
- Add a missing function that got deleted
- Fix repr and repr testing for xeb.

* Fix xeb serialization and tests.

* Fix optimizers in qml_lfe

* Hack in missing experiment functions."
,quantumlib,ReCirq,recirq/qml_lfe/learn_states_q.py,"Fix imports and broken tests for Cirq 1.0 (#318)

* Fix imports and broken tests for Cirq 1.0

- Move imports from cirq.experiments to recirq.benchmarks.xeb
- Add a missing function that got deleted
- Fix repr and repr testing for xeb.

* Fix xeb serialization and tests.

* Fix optimizers in qml_lfe

* Hack in missing experiment functions."
,quantumlib,ReCirq,recirq/fermi_hubbard/decomposition.py,"Fix some notebooks in Recirq (#316)

- Used pytket.routing which was removed in pytket 1.0
- Fix use of deprecated cirq.optimizers."
,quantumlib,ReCirq,recirq/qaoa/gates_and_compilation.py,"Fix some notebooks in Recirq (#316)

- Used pytket.routing which was removed in pytket 1.0
- Fix use of deprecated cirq.optimizers."
,quantumlib,ReCirq,dev_tools/write-ci-requirements.py,"Bump ReCirq to Cirq 0.15 (#313)

* Bump ReCirq to Cirq 0.15

Change-Id: Ic0b1d276182da1d93817e77579e4cdcf015b5cfe

* fix some deprecations

Change-Id: Ic0aaaecad78ac3d85ee4d7486311f5c01add1c2a

* remove vestigial `mutate` args"
,quantumlib,ReCirq,recirq/benchmarks/rep_rate/rep_rate_calculator.py,"Bump ReCirq to Cirq 0.15 (#313)

* Bump ReCirq to Cirq 0.15

Change-Id: Ic0b1d276182da1d93817e77579e4cdcf015b5cfe

* fix some deprecations

Change-Id: Ic0aaaecad78ac3d85ee4d7486311f5c01add1c2a

* remove vestigial `mutate` args"
,quantumlib,ReCirq,recirq/fermi_hubbard/decomposition.py,"Bump ReCirq to Cirq 0.15 (#313)

* Bump ReCirq to Cirq 0.15

Change-Id: Ic0b1d276182da1d93817e77579e4cdcf015b5cfe

* fix some deprecations

Change-Id: Ic0aaaecad78ac3d85ee4d7486311f5c01add1c2a

* remove vestigial `mutate` args"
,quantumlib,ReCirq,recirq/qaoa/gates_and_compilation.py,"Bump ReCirq to Cirq 0.15 (#313)

* Bump ReCirq to Cirq 0.15

Change-Id: Ic0b1d276182da1d93817e77579e4cdcf015b5cfe

* fix some deprecations

Change-Id: Ic0aaaecad78ac3d85ee4d7486311f5c01add1c2a

* remove vestigial `mutate` args"
,quantumlib,ReCirq,recirq/qaoa/placement_test.py,"Bump ReCirq to Cirq 0.15 (#313)

* Bump ReCirq to Cirq 0.15

Change-Id: Ic0b1d276182da1d93817e77579e4cdcf015b5cfe

* fix some deprecations

Change-Id: Ic0aaaecad78ac3d85ee4d7486311f5c01add1c2a

* remove vestigial `mutate` args"
